# Copyright Google Inc 2023 and onwards.
# This file was generated by proto2lkml. Do not modify it.
# Source: googlex/security/malachite/proto/external/entity.proto
### BEGIN googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_preamble.lkml 
include: "/chronicle_features.lkml"

### END googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_preamble.lkml 
view: entity_graph {
  ### BEGIN googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_view_preamble.lkml
  sql_table_name: `@{ENTITY_GRAPH}`;;

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    sql: CONCAT(IFNULL(to_hex(${TABLE}.metadata.product_entity_id), ""), 
                IFNULL(${TABLE}.metadata.creation_timestamp.seconds,0), 
                IFNULL(${TABLE}.metadata.creation_timestamp.nanos,0), 
                IFNULL(${TABLE}.metadata.entity_type,0), 
                IFNULL(${TABLE}.metadata.vendor_name,""), 
                IFNULL(${TABLE}.metadata.product_name,""));;
  }

  measure: count {
    description: "Count of entities; COUNT(DISTINCT ...) is used."
    type: count
    view_label: "Entity"
  }

  measure: count_all {
    description: "Count of all entities; COUNT(DISTINCT ...) is not used."
    type: number
    sql: count(*) ;;
    label: "Count (all)"
    view_label: "Entity"
  }


  filter: time_filter {
    label: "metadata.collected_timestamp"
    type: date_time
    view_label: "Entity"
    description: "Filter on collected_timestamp"
  }

  ### END googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_view_preamble.lkml
  dimension: additional {
    hidden: yes
  }  # dimension additional

  dimension: additional__fields {
    hidden: yes
  }  # dimension additional__fields

  dimension: entity {
    hidden: yes
  }  # dimension entity

  dimension: entity__administrative_domain {
    type: string
    sql: ${TABLE}.entity.administrative_domain ;;
    group_label: "entity"
    label: "entity.administrative_domain"
    view_label: "Entity"
    description: "Domain which the device belongs to (for example, the Microsoft Windows domain)."
  }  # dimension entity__administrative_domain

  dimension: entity__application {
    type: string
    sql: ${TABLE}.entity.application ;;
    group_label: "entity"
    label: "entity.application"
    view_label: "Entity"
    description: "The name of an application or service. Some SSO solutions only capture the name of a target application such as \"Atlassian\" or \"Chronicle\"."
  }  # dimension entity__application

  dimension: entity__artifact {
    hidden: yes
  }  # dimension entity__artifact

  dimension: entity__artifact__ip {
    type: string
    sql: ${TABLE}.entity.artifact.ip ;;
    group_label: "entity"
    label: "entity.artifact.ip"
    view_label: "Entity"
    description: "IP address of the artifact."
  }  # dimension entity__artifact__ip

  dimension: entity__artifact__network {
    hidden: yes
  }  # dimension entity__artifact__network

  dimension: entity__artifact__network__email {
    hidden: yes
  }  # dimension entity__artifact__network__email

  dimension: entity__artifact__network__email__to {
    hidden: yes
  }  # dimension entity__artifact__network__email__to

  dimension: entity__artifact__prevalence {
    hidden: yes
  }  # dimension entity__artifact__prevalence

  dimension: entity__artifact__prevalence__day_count {
    type: number
    sql: ${TABLE}.entity.artifact.prevalence.day_count ;;
    group_label: "entity"
    label: "entity.artifact.prevalence.day_count"
    view_label: "Entity"
    description: "The number of days over which rolling_max is calculated."
  }  # dimension entity__artifact__prevalence__day_count

  dimension: entity__artifact__prevalence__day_max {
    type: number
    sql: ${TABLE}.entity.artifact.prevalence.day_max ;;
    group_label: "entity"
    label: "entity.artifact.prevalence.day_max"
    view_label: "Entity"
    description: "The max prevalence score in a day interval window."
  }  # dimension entity__artifact__prevalence__day_max

  dimension: entity__artifact__prevalence__rolling_max {
    type: number
    sql: ${TABLE}.entity.artifact.prevalence.rolling_max ;;
    group_label: "entity"
    label: "entity.artifact.prevalence.rolling_max"
    view_label: "Entity"
    description: "The maximum number of assets per day accessing the resource over the trailing day_count days."
  }  # dimension entity__artifact__prevalence__rolling_max

  dimension: entity__artifact__prevalence__rolling_max_sub_domains {
    type: number
    sql: ${TABLE}.entity.artifact.prevalence.rolling_max_sub_domains ;;
    group_label: "entity"
    label: "entity.artifact.prevalence.rolling_max_sub_domains"
    view_label: "Entity"
    description: "The maximum number of assets per day accessing the domain along with sub-domains over the trailing day_count days. This field is only valid for domains."
  }  # dimension entity__artifact__prevalence__rolling_max_sub_domains

  dimension: entity__asset {
    hidden: yes
  }  # dimension entity__asset

  dimension: entity__asset__asset_id {
    type: string
    sql: ${TABLE}.entity.asset.asset_id ;;
    group_label: "entity"
    label: "entity.asset.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset__asset_id

  dimension: entity__asset__attribute {
    hidden: yes
  }  # dimension entity__asset__attribute

  dimension: entity__asset__attribute__cloud {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud

  dimension: entity__asset__attribute__cloud__availability_zone {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.availability_zone ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.availability_zone"
    view_label: "Entity"
    description: "The cloud environment availability zone (different from region which is location.name)."
  }  # dimension entity__asset__attribute__cloud__availability_zone

  dimension: entity__asset__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__asset__attribute__cloud__environment

  dimension: entity__asset__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__asset__attribute__cloud__environment_enum_name

  dimension: entity__asset__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__project

  dimension: entity__asset__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.id [D]"
    label: "entity.asset.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__id

  dimension: entity__asset__attribute__cloud__project__name {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.name ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.name [D]"
    label: "entity.asset.attribute.cloud.project.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__name

  dimension: entity__asset__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.product_object_id [D]"
    label: "entity.asset.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__product_object_id

  dimension: entity__asset__attribute__cloud__project__resource_type {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.project.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.resource_type [D]"
    label: "entity.asset.attribute.cloud.project.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__resource_type

  dimension: entity__asset__attribute__cloud__project__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "DATABASE", "DATASET", "DEVICE", "FIREWALL_RULE", "MAILBOX_FOLDER", "MUTEX", "PIPE", "SERVICE_ACCOUNT", "SETTING", "STORAGE_BUCKET", "STORAGE_OBJECT", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.project.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' END ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.resource_type_enum_name [D]"
    label: "entity.asset.attribute.cloud.project.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__resource_type_enum_name

  dimension: entity__asset__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__vpc

  dimension: entity__asset__attribute__cloud__vpc__name {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.name ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.name [D]"
    label: "entity.asset.attribute.cloud.vpc.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__name

  dimension: entity__asset__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.product_object_id [D]"
    label: "entity.asset.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__product_object_id

  dimension: entity__asset__attribute__cloud__vpc__resource_type {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.resource_type [D]"
    label: "entity.asset.attribute.cloud.vpc.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__resource_type

  dimension: entity__asset__attribute__cloud__vpc__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "DATABASE", "DATASET", "DEVICE", "FIREWALL_RULE", "MAILBOX_FOLDER", "MUTEX", "PIPE", "SERVICE_ACCOUNT", "SETTING", "STORAGE_BUCKET", "STORAGE_OBJECT", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.vpc.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' END ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.resource_type_enum_name [D]"
    label: "entity.asset.attribute.cloud.vpc.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__resource_type_enum_name

  dimension_group: entity__asset__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__asset__attribute__creation_time

  dimension: entity__asset__attribute__labels {
    hidden: yes
  }  # dimension entity__asset__attribute__labels

  dimension_group: entity__asset__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__asset__attribute__last_update_time

  dimension: entity__asset__category {
    type: string
    sql: ${TABLE}.entity.asset.category ;;
    group_label: "entity"
    label: "entity.asset.category"
    view_label: "Entity"
    description: "The category of the asset (e.g. \"End User Asset\", \"Workstation\", \"Server\")."
  }  # dimension entity__asset__category

  dimension_group: entity__asset__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    group_item_label: "entity.asset.creation_time [D]"
    label: "entity.asset.creation_time"
    view_label: "Entity"
    description: "Time the asset was created or provisioned. Deprecate: creation_time should be populated in Attribute as generic metadata. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__creation_time

  dimension: entity__asset__deployment_status {
    type: number
    sql: ${TABLE}.entity.asset.deployment_status ;;
    group_label: "entity"
    label: "entity.asset.deployment_status"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status

  dimension: entity__asset__deployment_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DECOMISSIONED", "DEPLOYMENT_STATUS_UNSPECIFIED", "PENDING_DECOMISSION"]
    sql: CASE ${TABLE}.entity.asset.deployment_status WHEN 0 THEN 'DEPLOYMENT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'PENDING_DECOMISSION' WHEN 3 THEN 'DECOMISSIONED' END ;;
    group_label: "entity"
    label: "entity.asset.deployment_status_enum_name"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status_enum_name

  dimension_group: entity__asset__first_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.first_discover_time"
    view_label: "Entity"
    description: "Time the asset was first discovered (by asset management/discoverability software)."
  }  # dimension entity__asset__first_discover_time

  dimension: entity__asset__hardware {
    hidden: yes
  }  # dimension entity__asset__hardware

  dimension: entity__asset__hostname {
    type: string
    sql: ${TABLE}.entity.asset.hostname ;;
    group_label: "entity"
    label: "entity.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension entity__asset__hostname

  dimension: entity__asset__ip {
    hidden: yes
  }  # dimension entity__asset__ip

  dimension: entity__asset__labels {
    hidden: yes
  }  # dimension entity__asset__labels

  dimension_group: entity__asset__last_boot_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_boot_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_boot_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.last_boot_time"
    view_label: "Entity"
    description: "Time the asset was last boot started."
  }  # dimension entity__asset__last_boot_time

  dimension_group: entity__asset__last_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.last_discover_time"
    view_label: "Entity"
    description: "Time the asset was last discovered (by asset management/discoverability software)."
  }  # dimension entity__asset__last_discover_time

  dimension: entity__asset__location {
    hidden: yes
  }  # dimension entity__asset__location

  dimension: entity__asset__location__city {
    type: string
    sql: ${TABLE}.entity.asset.location.city ;;
    group_label: "entity"
    label: "entity.asset.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__asset__location__city

  dimension: entity__asset__location__country_or_region {
    type: string
    sql: ${TABLE}.entity.asset.location.country_or_region ;;
    group_label: "entity"
    label: "entity.asset.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__asset__location__country_or_region

  dimension: entity__asset__location__floor_name {
    type: string
    sql: ${TABLE}.entity.asset.location.floor_name ;;
    group_label: "entity"
    label: "entity.asset.location.floor_name"
    view_label: "Entity"
    description: "Floor name, number or a combination of the two for a building. (e.g. \"1-A\")."
  }  # dimension entity__asset__location__floor_name

  dimension: entity__asset__location__name {
    type: string
    sql: ${TABLE}.entity.asset.location.name ;;
    group_label: "entity"
    label: "entity.asset.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__asset__location__name

  dimension: entity__asset__location__region_latitude {
    type: number
    sql: ${TABLE}.entity.asset.location.region_latitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.region_latitude [D]"
    label: "entity.asset.location.region_latitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__location__region_latitude

  dimension: entity__asset__location__region_longitude {
    type: number
    sql: ${TABLE}.entity.asset.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.region_longitude [D]"
    label: "entity.asset.location.region_longitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__location__region_longitude

  dimension: entity__asset__location__location {
    type: location
    sql_latitude: ${TABLE}.entity.asset.location.region_latitude ;;
    sql_longitude: ${TABLE}.entity.asset.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.location [D][L]"
    label: "entity.asset.location.location"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release [L]: This is a location field and can be used in maps."
  }  # dimension entity__asset__location__location

  dimension: entity__asset__location__state {
    type: string
    sql: ${TABLE}.entity.asset.location.state ;;
    group_label: "entity"
    label: "entity.asset.location.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__asset__location__state

  dimension: entity__asset__mac {
    hidden: yes
  }  # dimension entity__asset__mac

  dimension: entity__asset__nat_ip {
    hidden: yes
  }  # dimension entity__asset__nat_ip

  dimension: entity__asset__network_domain {
    type: string
    sql: ${TABLE}.entity.asset.network_domain ;;
    group_label: "entity"
    label: "entity.asset.network_domain"
    view_label: "Entity"
    description: "The network domain of the asset (e.g. \"corp.acme.com\")"
  }  # dimension entity__asset__network_domain

  dimension: entity__asset__platform_software {
    hidden: yes
  }  # dimension entity__asset__platform_software

  dimension: entity__asset__platform_software__platform {
    type: number
    sql: ${TABLE}.entity.asset.platform_software.platform ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform

  dimension: entity__asset__platform_software__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.asset.platform_software.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_enum_name"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform_enum_name

  dimension: entity__asset__platform_software__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_patch_level ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_patch_level"
    view_label: "Entity"
    description: "The platform software patch level ( e.g. \"Build 17134.48\", \"SP1\")."
  }  # dimension entity__asset__platform_software__platform_patch_level

  dimension: entity__asset__platform_software__platform_version {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_version ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_version"
    view_label: "Entity"
    description: "The platform software version ( e.g. \"Microsoft Windows 1803\")."
  }  # dimension entity__asset__platform_software__platform_version

  dimension: entity__asset__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.product_object_id ;;
    group_label: "entity"
    label: "entity.asset.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID  or similar)."
  }  # dimension entity__asset__product_object_id

  dimension: entity__asset__software {
    hidden: yes
  }  # dimension entity__asset__software

  dimension_group: entity__asset__system_last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.system_last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.system_last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.system_last_update_time"
    view_label: "Entity"
    description: "Time the asset system or OS was last updated. For all other operations that are not system updates (such as resizing a vm, etc.) use Attribute.last_update_time."
  }  # dimension entity__asset__system_last_update_time

  dimension: entity__asset__type {
    type: number
    sql: ${TABLE}.entity.asset.type ;;
    group_label: "entity"
    label: "entity.asset.type"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type

  dimension: entity__asset__type_enum_name {
    type: string
    suggestions: ["IOT", "LAPTOP", "MOBILE", "NETWORK_ATTACHED_STORAGE", "PRINTER", "ROLE_UNSPECIFIED", "SCANNER", "SERVER", "TAPE_LIBRARY", "WORKSTATION"]
    sql: CASE ${TABLE}.entity.asset.type WHEN 0 THEN 'ROLE_UNSPECIFIED' WHEN 1 THEN 'WORKSTATION' WHEN 2 THEN 'LAPTOP' WHEN 3 THEN 'IOT' WHEN 4 THEN 'NETWORK_ATTACHED_STORAGE' WHEN 5 THEN 'PRINTER' WHEN 6 THEN 'SCANNER' WHEN 7 THEN 'SERVER' WHEN 8 THEN 'TAPE_LIBRARY' WHEN 9 THEN 'MOBILE' END ;;
    group_label: "entity"
    label: "entity.asset.type_enum_name"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type_enum_name

  dimension: entity__asset__vulnerabilities {
    hidden: yes
  }  # dimension entity__asset__vulnerabilities

  dimension: entity__asset_id {
    type: string
    sql: ${TABLE}.entity.asset_id ;;
    group_label: "entity"
    label: "entity.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset_id

  dimension: entity__cloud {
    hidden: yes
  }  # dimension entity__cloud

  dimension: entity__cloud__project {
    hidden: yes
  }  # dimension entity__cloud__project

  dimension: entity__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.cloud.project.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.cloud.project.product_object_id [D]"
    label: "entity.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__cloud__project__product_object_id

  dimension: entity__cloud__vpc {
    hidden: yes
  }  # dimension entity__cloud__vpc

  dimension: entity__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.cloud.vpc.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.cloud.vpc.product_object_id [D]"
    label: "entity.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__cloud__vpc__product_object_id

  dimension: entity__domain {
    hidden: yes
  }  # dimension entity__domain

  dimension: entity__domain__admin {
    hidden: yes
  }  # dimension entity__domain__admin

  dimension: entity__domain__admin__attribute {
    hidden: yes
  }  # dimension entity__domain__admin__attribute

  dimension: entity__domain__admin__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__admin__attribute__labels

  dimension: entity__domain__admin__office_address {
    hidden: yes
  }  # dimension entity__domain__admin__office_address

  dimension: entity__domain__admin__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.admin.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.admin.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__admin__office_address__country_or_region

  dimension_group: entity__domain__audit_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.audit_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.audit_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.audit_update_time"
    view_label: "Entity"
    description: "Audit updated time."
  }  # dimension entity__domain__audit_update_time

  dimension: entity__domain__billing {
    hidden: yes
  }  # dimension entity__domain__billing

  dimension: entity__domain__billing__attribute {
    hidden: yes
  }  # dimension entity__domain__billing__attribute

  dimension: entity__domain__billing__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__billing__attribute__labels

  dimension: entity__domain__billing__office_address {
    hidden: yes
  }  # dimension entity__domain__billing__office_address

  dimension: entity__domain__billing__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.billing.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.billing.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__billing__office_address__country_or_region

  dimension: entity__domain__contact_email {
    type: string
    sql: ${TABLE}.entity.domain.contact_email ;;
    group_label: "entity"
    label: "entity.domain.contact_email"
    view_label: "Entity"
    description: "Contact email address."
  }  # dimension entity__domain__contact_email

  dimension_group: entity__domain__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.creation_time"
    view_label: "Entity"
    description: "Domain creation time."
  }  # dimension entity__domain__creation_time

  dimension_group: entity__domain__expiration_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.expiration_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.expiration_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.expiration_time"
    view_label: "Entity"
    description: "Expiration time."
  }  # dimension entity__domain__expiration_time

  dimension_group: entity__domain__first_seen_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.first_seen_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.first_seen_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.first_seen_time"
    view_label: "Entity"
    description: "First seen timestamp of the domain in the customer's environment."
  }  # dimension entity__domain__first_seen_time

  dimension: entity__domain__name {
    type: string
    sql: ${TABLE}.entity.domain.name ;;
    group_label: "entity"
    label: "entity.domain.name"
    view_label: "Entity"
    description: "The domain name."
  }  # dimension entity__domain__name

  dimension: entity__domain__name_server {
    hidden: yes
  }  # dimension entity__domain__name_server

  dimension: entity__domain__prevalence {
    hidden: yes
  }  # dimension entity__domain__prevalence

  dimension: entity__domain__prevalence__day_count {
    type: number
    sql: ${TABLE}.entity.domain.prevalence.day_count ;;
    group_label: "entity"
    label: "entity.domain.prevalence.day_count"
    view_label: "Entity"
    description: "The number of days over which rolling_max is calculated."
  }  # dimension entity__domain__prevalence__day_count

  dimension: entity__domain__prevalence__day_max {
    type: number
    sql: ${TABLE}.entity.domain.prevalence.day_max ;;
    group_label: "entity"
    label: "entity.domain.prevalence.day_max"
    view_label: "Entity"
    description: "The max prevalence score in a day interval window."
  }  # dimension entity__domain__prevalence__day_max

  dimension: entity__domain__prevalence__day_max_sub_domains {
    type: number
    sql: ${TABLE}.entity.domain.prevalence.day_max_sub_domains ;;
    group_label: "entity"
    label: "entity.domain.prevalence.day_max_sub_domains"
    view_label: "Entity"
    description: "The max prevalence score in a day interval window across sub-domains. This field is only valid for domains."
  }  # dimension entity__domain__prevalence__day_max_sub_domains

  dimension: entity__domain__prevalence__rolling_max {
    type: number
    sql: ${TABLE}.entity.domain.prevalence.rolling_max ;;
    group_label: "entity"
    label: "entity.domain.prevalence.rolling_max"
    view_label: "Entity"
    description: "The maximum number of assets per day accessing the resource over the trailing day_count days."
  }  # dimension entity__domain__prevalence__rolling_max

  dimension: entity__domain__prevalence__rolling_max_sub_domains {
    type: number
    sql: ${TABLE}.entity.domain.prevalence.rolling_max_sub_domains ;;
    group_label: "entity"
    label: "entity.domain.prevalence.rolling_max_sub_domains"
    view_label: "Entity"
    description: "The maximum number of assets per day accessing the domain along with sub-domains over the trailing day_count days. This field is only valid for domains."
  }  # dimension entity__domain__prevalence__rolling_max_sub_domains

  dimension: entity__domain__registrant {
    hidden: yes
  }  # dimension entity__domain__registrant

  dimension: entity__domain__registrant__attribute {
    hidden: yes
  }  # dimension entity__domain__registrant__attribute

  dimension: entity__domain__registrant__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__registrant__attribute__labels

  dimension: entity__domain__registrant__company_name {
    type: string
    sql: ${TABLE}.entity.domain.registrant.company_name ;;
    group_label: "entity"
    label: "entity.domain.registrant.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__domain__registrant__company_name

  dimension: entity__domain__registrant__email_addresses {
    hidden: yes
  }  # dimension entity__domain__registrant__email_addresses

  dimension: entity__domain__registrant__office_address {
    hidden: yes
  }  # dimension entity__domain__registrant__office_address

  dimension: entity__domain__registrant__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.registrant.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.registrant.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__registrant__office_address__country_or_region

  dimension: entity__domain__registrant__office_address__state {
    type: string
    sql: ${TABLE}.entity.domain.registrant.office_address.state ;;
    group_label: "entity"
    label: "entity.domain.registrant.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__domain__registrant__office_address__state

  dimension: entity__domain__registrant__user_display_name {
    type: string
    sql: ${TABLE}.entity.domain.registrant.user_display_name ;;
    group_label: "entity"
    label: "entity.domain.registrant.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__domain__registrant__user_display_name

  dimension: entity__domain__registrar {
    type: string
    sql: ${TABLE}.entity.domain.registrar ;;
    group_label: "entity"
    label: "entity.domain.registrar"
    view_label: "Entity"
    description: "Registrar name - e.g. \"Wild West Domains, Inc. (R120-LROR)\", \"GoDaddy.com, LLC\", \"PDR LTD. D/B/A PUBLICDOMAINREGISTRY.COM\", etc."
  }  # dimension entity__domain__registrar

  dimension: entity__domain__registry_data_raw_text {
    type: string
    sql: ${TABLE}.entity.domain.registry_data_raw_text ;;
    group_label: "entity"
    label: "entity.domain.registry_data_raw_text"
    view_label: "Entity"
    description: "Registry Data raw text"
  }  # dimension entity__domain__registry_data_raw_text

  dimension: entity__domain__status {
    type: string
    sql: ${TABLE}.entity.domain.status ;;
    group_label: "entity"
    label: "entity.domain.status"
    view_label: "Entity"
    description: "Domain status. See <a href=\"https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en\">https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en</a> for meanings of possible values"
  }  # dimension entity__domain__status

  dimension: entity__domain__tech {
    hidden: yes
  }  # dimension entity__domain__tech

  dimension: entity__domain__tech__attribute {
    hidden: yes
  }  # dimension entity__domain__tech__attribute

  dimension: entity__domain__tech__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__tech__attribute__labels

  dimension: entity__domain__tech__office_address {
    hidden: yes
  }  # dimension entity__domain__tech__office_address

  dimension: entity__domain__tech__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.tech.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.tech.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__tech__office_address__country_or_region

  dimension_group: entity__domain__update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.update_time"
    view_label: "Entity"
    description: "Last updated time."
  }  # dimension entity__domain__update_time

  dimension: entity__domain__whois_record_raw_text {
    type: string
    sql: ${TABLE}.entity.domain.whois_record_raw_text ;;
    group_label: "entity"
    label: "entity.domain.whois_record_raw_text"
    view_label: "Entity"
    description: "unix epoch of the time when the domaintools first catches the record, or the time when domaintools catch the record changes. domaintools_time_ms is also used as the bigtable timestamp."
  }  # dimension entity__domain__whois_record_raw_text

  dimension: entity__domain__whois_server {
    type: string
    sql: ${TABLE}.entity.domain.whois_server ;;
    group_label: "entity"
    label: "entity.domain.whois_server"
    view_label: "Entity"
    description: "Whois server name."
  }  # dimension entity__domain__whois_server

  dimension: entity__email {
    type: string
    sql: ${TABLE}.entity.email ;;
    group_label: "entity"
    label: "entity.email"
    view_label: "Entity"
    description: "Email address. Only filled in for security_result.about"
  }  # dimension entity__email

  dimension: entity__file {
    hidden: yes
  }  # dimension entity__file

  dimension: entity__file__full_path {
    type: string
    sql: ${TABLE}.entity.file.full_path ;;
    group_label: "entity"
    label: "entity.file.full_path"
    view_label: "Entity"
    description: "The full path identifying the location of the file on the system."
  }  # dimension entity__file__full_path

  dimension: entity__file__md5 {
    type: string
    sql: ${TABLE}.entity.file.md5 ;;
    group_label: "entity"
    label: "entity.file.md5"
    view_label: "Entity"
    description: "The MD5 hash of the file."
  }  # dimension entity__file__md5

  dimension: entity__file__mime_type {
    type: string
    sql: ${TABLE}.entity.file.mime_type ;;
    group_label: "entity"
    label: "entity.file.mime_type"
    view_label: "Entity"
    description: "The MIME (Multipurpose Internet Mail Extensions) type of the file, for example \"PE\", \"PDF\", \"powershell script\", etc."
  }  # dimension entity__file__mime_type

  dimension: entity__file__names {
    hidden: yes
  }  # dimension entity__file__names

  dimension: entity__file__pe_file {
    hidden: yes
  }  # dimension entity__file__pe_file

  dimension: entity__file__pe_file__resource {
    hidden: yes
  }  # dimension entity__file__pe_file__resource

  dimension: entity__file__prevalence {
    hidden: yes
  }  # dimension entity__file__prevalence

  dimension: entity__file__prevalence__day_count {
    type: number
    sql: ${TABLE}.entity.file.prevalence.day_count ;;
    group_label: "entity"
    label: "entity.file.prevalence.day_count"
    view_label: "Entity"
    description: "The number of days over which rolling_max is calculated."
  }  # dimension entity__file__prevalence__day_count

  dimension: entity__file__prevalence__day_max {
    type: number
    sql: ${TABLE}.entity.file.prevalence.day_max ;;
    group_label: "entity"
    label: "entity.file.prevalence.day_max"
    view_label: "Entity"
    description: "The max prevalence score in a day interval window."
  }  # dimension entity__file__prevalence__day_max

  dimension: entity__file__prevalence__rolling_max {
    type: number
    sql: ${TABLE}.entity.file.prevalence.rolling_max ;;
    group_label: "entity"
    label: "entity.file.prevalence.rolling_max"
    view_label: "Entity"
    description: "The maximum number of assets per day accessing the resource over the trailing day_count days."
  }  # dimension entity__file__prevalence__rolling_max

  dimension: entity__file__sha1 {
    type: string
    sql: ${TABLE}.entity.file.sha1 ;;
    group_label: "entity"
    label: "entity.file.sha1"
    view_label: "Entity"
    description: "The SHA1 hash of the file."
  }  # dimension entity__file__sha1

  dimension: entity__file__sha256 {
    type: string
    sql: ${TABLE}.entity.file.sha256 ;;
    group_label: "entity"
    label: "entity.file.sha256"
    view_label: "Entity"
    description: "The SHA256 hash of the file."
  }  # dimension entity__file__sha256

  dimension: entity__group {
    hidden: yes
  }  # dimension entity__group

  dimension: entity__group__attribute {
    hidden: yes
  }  # dimension entity__group__attribute

  dimension: entity__group__attribute__cloud {
    hidden: yes
  }  # dimension entity__group__attribute__cloud

  dimension: entity__group__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__group__attribute__cloud__project

  dimension: entity__group__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.attribute.cloud.project.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.group.attribute.cloud.project.product_object_id [D]"
    label: "entity.group.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__group__attribute__cloud__project__product_object_id

  dimension: entity__group__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__group__attribute__cloud__vpc

  dimension: entity__group__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.attribute.cloud.vpc.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.group.attribute.cloud.vpc.product_object_id [D]"
    label: "entity.group.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__group__attribute__cloud__vpc__product_object_id

  dimension: entity__group__attribute__labels {
    hidden: yes
  }  # dimension entity__group__attribute__labels

  dimension: entity__group__email_addresses {
    hidden: yes
  }  # dimension entity__group__email_addresses

  dimension: entity__group__group_display_name {
    type: string
    sql: ${TABLE}.entity.group.group_display_name ;;
    group_label: "entity"
    label: "entity.group.group_display_name"
    view_label: "Entity"
    description: "Group display name. e.g. \"Finance\"."
  }  # dimension entity__group__group_display_name

  dimension: entity__group__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.product_object_id ;;
    group_label: "entity"
    label: "entity.group.product_object_id"
    view_label: "Entity"
    description: "Product globally unique user object identifier, such as an LDAP Object Identifier."
  }  # dimension entity__group__product_object_id

  dimension: entity__hostname {
    type: string
    sql: ${TABLE}.entity.hostname ;;
    group_label: "entity"
    label: "entity.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension entity__hostname

  dimension: entity__ip {
    hidden: yes
  }  # dimension entity__ip

  dimension: entity__ip_geo_artifact {
    hidden: yes
  }  # dimension entity__ip_geo_artifact

  dimension: entity__labels {
    hidden: yes
  }  # dimension entity__labels

  dimension: entity__location {
    hidden: yes
  }  # dimension entity__location

  dimension: entity__location__city {
    type: string
    sql: ${TABLE}.entity.location.city ;;
    group_label: "entity"
    label: "entity.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__location__city

  dimension: entity__location__country_or_region {
    type: string
    sql: ${TABLE}.entity.location.country_or_region ;;
    group_label: "entity"
    label: "entity.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__location__country_or_region

  dimension: entity__location__desk_name {
    type: string
    sql: ${TABLE}.entity.location.desk_name ;;
    group_label: "entity"
    label: "entity.location.desk_name"
    view_label: "Entity"
    description: "Desk name or individual location, typically for an employee in an office. (e.g. \"IN-BLR-BCPC-11-1121D\")."
  }  # dimension entity__location__desk_name

  dimension: entity__location__name {
    type: string
    sql: ${TABLE}.entity.location.name ;;
    group_label: "entity"
    label: "entity.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__location__name

  dimension: entity__location__region_latitude {
    type: number
    sql: ${TABLE}.entity.location.region_latitude ;;
    group_label: "entity"
    group_item_label: "entity.location.region_latitude [D]"
    label: "entity.location.region_latitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__location__region_latitude

  dimension: entity__location__region_longitude {
    type: number
    sql: ${TABLE}.entity.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.location.region_longitude [D]"
    label: "entity.location.region_longitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__location__region_longitude

  dimension: entity__location__location {
    type: location
    sql_latitude: ${TABLE}.entity.location.region_latitude ;;
    sql_longitude: ${TABLE}.entity.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.location.location [D][L]"
    label: "entity.location.location"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release [L]: This is a location field and can be used in maps."
  }  # dimension entity__location__location

  dimension: entity__location__state {
    type: string
    sql: ${TABLE}.entity.location.state ;;
    group_label: "entity"
    label: "entity.location.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__location__state

  dimension: entity__mac {
    hidden: yes
  }  # dimension entity__mac

  dimension: entity__namespace {
    type: string
    sql: ${TABLE}.entity.namespace ;;
    group_label: "entity"
    label: "entity.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension entity__namespace

  dimension: entity__object_reference {
    hidden: yes
  }  # dimension entity__object_reference

  dimension: entity__object_reference__id {
    type: string
    sql: ${TABLE}.entity.object_reference.id ;;
    group_label: "entity"
    label: "entity.object_reference.id"
    view_label: "Entity"
    description: "Full raw ID."
  }  # dimension entity__object_reference__id

  dimension: entity__object_reference__namespace {
    type: number
    sql: ${TABLE}.entity.object_reference.namespace ;;
    group_label: "entity"
    label: "entity.object_reference.namespace"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension entity__object_reference__namespace

  dimension: entity__object_reference__namespace_enum_name {
    type: string
    suggestions: ["MACHINE_INTELLIGENCE", "NORMALIZED_TELEMETRY", "RAW_TELEMETRY", "RULE_DETECTIONS", "SECURITY_COMMAND_CENTER", "SOAR_ALERT", "UNSPECIFIED", "UPPERCASE"]
    sql: CASE ${TABLE}.entity.object_reference.namespace WHEN 0 THEN 'NORMALIZED_TELEMETRY' WHEN 1 THEN 'RAW_TELEMETRY' WHEN 2 THEN 'RULE_DETECTIONS' WHEN 3 THEN 'UPPERCASE' WHEN 4 THEN 'MACHINE_INTELLIGENCE' WHEN 5 THEN 'SECURITY_COMMAND_CENTER' WHEN 6 THEN 'UNSPECIFIED' WHEN 7 THEN 'SOAR_ALERT' END ;;
    group_label: "entity"
    label: "entity.object_reference.namespace_enum_name"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension entity__object_reference__namespace_enum_name

  dimension: entity__platform {
    type: number
    sql: ${TABLE}.entity.platform ;;
    group_label: "entity"
    label: "entity.platform"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform

  dimension: entity__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "entity"
    label: "entity.platform_enum_name"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform_enum_name

  dimension: entity__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.platform_patch_level ;;
    group_label: "entity"
    label: "entity.platform_patch_level"
    view_label: "Entity"
    description: "Platform patch level. For example, \"Build 17134.48\""
  }  # dimension entity__platform_patch_level

  dimension: entity__platform_version {
    type: string
    sql: ${TABLE}.entity.platform_version ;;
    group_label: "entity"
    label: "entity.platform_version"
    view_label: "Entity"
    description: "Platform version. For example, \"Microsoft Windows 1803\"."
  }  # dimension entity__platform_version

  dimension: entity__port {
    type: number
    value_format: "#"
    sql: ${TABLE}.entity.port ;;
    group_label: "entity"
    label: "entity.port"
    view_label: "Entity"
    description: "Source or destination network port number when a specific network connection is described within an event."
  }  # dimension entity__port

  dimension: entity__process {
    hidden: yes
  }  # dimension entity__process

  dimension: entity__process__command_line {
    type: string
    sql: ${TABLE}.entity.process.command_line ;;
    group_label: "entity"
    label: "entity.process.command_line"
    view_label: "Entity"
    description: "The command line command that created the process."
  }  # dimension entity__process__command_line

  dimension: entity__registry {
    hidden: yes
  }  # dimension entity__registry

  dimension: entity__registry__registry_key {
    type: string
    sql: ${TABLE}.entity.registry.registry_key ;;
    group_label: "entity"
    label: "entity.registry.registry_key"
    view_label: "Entity"
    description: "Registry key associated with an application or system component (e.g., HKEY_, HKCU\Environment...)."
  }  # dimension entity__registry__registry_key

  dimension: entity__resource {
    hidden: yes
  }  # dimension entity__resource

  dimension: entity__resource__attribute {
    hidden: yes
  }  # dimension entity__resource__attribute

  dimension: entity__resource__attribute__cloud {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud

  dimension: entity__resource__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.resource.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment

  dimension: entity__resource__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.resource.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment_enum_name

  dimension: entity__resource__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud__project

  dimension: entity__resource__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.resource.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.id [D]"
    label: "entity.resource.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__id

  dimension: entity__resource__attribute__cloud__project__name {
    type: string
    sql: ${TABLE}.entity.resource.attribute.cloud.project.name ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.name [D]"
    label: "entity.resource.attribute.cloud.project.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__name

  dimension: entity__resource__attribute__cloud__project__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.project.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.resource_type [D]"
    label: "entity.resource.attribute.cloud.project.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__resource_type

  dimension: entity__resource__attribute__cloud__project__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "DATABASE", "DATASET", "DEVICE", "FIREWALL_RULE", "MAILBOX_FOLDER", "MUTEX", "PIPE", "SERVICE_ACCOUNT", "SETTING", "STORAGE_BUCKET", "STORAGE_OBJECT", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.project.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' END ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.resource_type_enum_name [D]"
    label: "entity.resource.attribute.cloud.project.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__resource_type_enum_name

  dimension_group: entity__resource__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.resource.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.resource.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.resource.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__resource__attribute__creation_time

  dimension: entity__resource__attribute__labels {
    hidden: yes
  }  # dimension entity__resource__attribute__labels

  dimension_group: entity__resource__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.resource.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.resource.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.resource.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__resource__attribute__last_update_time

  dimension: entity__resource__name {
    type: string
    sql: ${TABLE}.entity.resource.name ;;
    group_label: "entity"
    label: "entity.resource.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension entity__resource__name

  dimension: entity__resource__parent {
    type: string
    sql: ${TABLE}.entity.resource.parent ;;
    group_label: "entity"
    group_item_label: "entity.resource.parent [D]"
    label: "entity.resource.parent"
    view_label: "Entity"
    description: "The parent of the resource. For a database table, the parent is the database and for a storage object, the bucket name, etc.  Deprecated: use resource_ancestors.name. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__parent

  dimension: entity__resource__product_object_id {
    type: string
    sql: ${TABLE}.entity.resource.product_object_id ;;
    group_label: "entity"
    label: "entity.resource.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension entity__resource__product_object_id

  dimension: entity__resource__resource_subtype {
    type: string
    sql: ${TABLE}.entity.resource.resource_subtype ;;
    group_label: "entity"
    label: "entity.resource.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension entity__resource__resource_subtype

  dimension: entity__resource__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.resource_type ;;
    group_label: "entity"
    label: "entity.resource.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type

  dimension: entity__resource__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "DATABASE", "DATASET", "DEVICE", "FIREWALL_RULE", "MAILBOX_FOLDER", "MUTEX", "PIPE", "SERVICE_ACCOUNT", "SETTING", "STORAGE_BUCKET", "STORAGE_OBJECT", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' END ;;
    group_label: "entity"
    label: "entity.resource.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type_enum_name

  dimension: entity__resource__type {
    type: string
    sql: ${TABLE}.entity.resource.type ;;
    group_label: "entity"
    group_item_label: "entity.resource.type [D]"
    label: "entity.resource.type"
    view_label: "Entity"
    description: "Deprecated: use resource_type instead. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__type

  dimension: entity__url {
    type: string
    sql: ${TABLE}.entity.url ;;
    group_label: "entity"
    label: "entity.url"
    view_label: "Entity"
    description: "The URL."
  }  # dimension entity__url

  dimension: entity__user {
    hidden: yes
  }  # dimension entity__user

  dimension: entity__user__attribute {
    hidden: yes
  }  # dimension entity__user__attribute

  dimension: entity__user__attribute__cloud {
    hidden: yes
  }  # dimension entity__user__attribute__cloud

  dimension: entity__user__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.user.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.user.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment

  dimension: entity__user__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.user.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.user.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment_enum_name

  dimension: entity__user__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__user__attribute__cloud__project

  dimension: entity__user__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.user.attribute.cloud.project.id [D]"
    label: "entity.user.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__project__id

  dimension: entity__user__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.project.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.user.attribute.cloud.project.product_object_id [D]"
    label: "entity.user.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__project__product_object_id

  dimension: entity__user__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__user__attribute__cloud__vpc

  dimension: entity__user__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.vpc.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.user.attribute.cloud.vpc.product_object_id [D]"
    label: "entity.user.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__vpc__product_object_id

  dimension_group: entity__user__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__user__attribute__creation_time

  dimension: entity__user__attribute__labels {
    hidden: yes
  }  # dimension entity__user__attribute__labels

  dimension_group: entity__user__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__user__attribute__last_update_time

  dimension: entity__user__attribute__permissions {
    hidden: yes
  }  # dimension entity__user__attribute__permissions

  dimension: entity__user__attribute__roles {
    hidden: yes
  }  # dimension entity__user__attribute__roles

  dimension: entity__user__company_name {
    type: string
    sql: ${TABLE}.entity.user.company_name ;;
    group_label: "entity"
    label: "entity.user.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__user__company_name

  dimension: entity__user__department {
    hidden: yes
  }  # dimension entity__user__department

  dimension: entity__user__email_addresses {
    hidden: yes
  }  # dimension entity__user__email_addresses

  dimension: entity__user__employee_id {
    type: string
    sql: ${TABLE}.entity.user.employee_id ;;
    group_label: "entity"
    label: "entity.user.employee_id"
    view_label: "Entity"
    description: "Human capital management identifier."
  }  # dimension entity__user__employee_id

  dimension: entity__user__first_name {
    type: string
    sql: ${TABLE}.entity.user.first_name ;;
    group_label: "entity"
    label: "entity.user.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension entity__user__first_name

  dimension: entity__user__group_identifiers {
    hidden: yes
  }  # dimension entity__user__group_identifiers

  dimension_group: entity__user__hire_date {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.hire_date.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.hire_date.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.hire_date"
    view_label: "Entity"
    description: "User job employment hire date."
  }  # dimension entity__user__hire_date

  dimension: entity__user__last_name {
    type: string
    sql: ${TABLE}.entity.user.last_name ;;
    group_label: "entity"
    label: "entity.user.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension entity__user__last_name

  dimension: entity__user__managers {
    hidden: yes
  }  # dimension entity__user__managers

  dimension: entity__user__middle_name {
    type: string
    sql: ${TABLE}.entity.user.middle_name ;;
    group_label: "entity"
    label: "entity.user.middle_name"
    view_label: "Entity"
    description: "Middle name of the user."
  }  # dimension entity__user__middle_name

  dimension: entity__user__office_address {
    hidden: yes
  }  # dimension entity__user__office_address

  dimension: entity__user__office_address__city {
    type: string
    sql: ${TABLE}.entity.user.office_address.city ;;
    group_label: "entity"
    label: "entity.user.office_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__user__office_address__city

  dimension: entity__user__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__office_address__country_or_region

  dimension: entity__user__office_address__floor_name {
    type: string
    sql: ${TABLE}.entity.user.office_address.floor_name ;;
    group_label: "entity"
    label: "entity.user.office_address.floor_name"
    view_label: "Entity"
    description: "Floor name, number or a combination of the two for a building. (e.g. \"1-A\")."
  }  # dimension entity__user__office_address__floor_name

  dimension: entity__user__office_address__name {
    type: string
    sql: ${TABLE}.entity.user.office_address.name ;;
    group_label: "entity"
    label: "entity.user.office_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__office_address__name

  dimension: entity__user__office_address__state {
    type: string
    sql: ${TABLE}.entity.user.office_address.state ;;
    group_label: "entity"
    label: "entity.user.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__office_address__state

  dimension: entity__user__personal_address {
    hidden: yes
  }  # dimension entity__user__personal_address

  dimension: entity__user__personal_address__city {
    type: string
    sql: ${TABLE}.entity.user.personal_address.city ;;
    group_label: "entity"
    label: "entity.user.personal_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__user__personal_address__city

  dimension: entity__user__personal_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.personal_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.personal_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__personal_address__country_or_region

  dimension: entity__user__personal_address__name {
    type: string
    sql: ${TABLE}.entity.user.personal_address.name ;;
    group_label: "entity"
    label: "entity.user.personal_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__personal_address__name

  dimension: entity__user__personal_address__state {
    type: string
    sql: ${TABLE}.entity.user.personal_address.state ;;
    group_label: "entity"
    label: "entity.user.personal_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__personal_address__state

  dimension: entity__user__phone_numbers {
    hidden: yes
  }  # dimension entity__user__phone_numbers

  dimension: entity__user__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.product_object_id ;;
    group_label: "entity"
    label: "entity.user.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension entity__user__product_object_id

  dimension: entity__user__role_description {
    type: string
    sql: ${TABLE}.entity.user.role_description ;;
    group_label: "entity"
    group_item_label: "entity.user.role_description [D]"
    label: "entity.user.role_description"
    view_label: "Entity"
    description: "System role description for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_description

  dimension: entity__user__role_name {
    type: string
    sql: ${TABLE}.entity.user.role_name ;;
    group_label: "entity"
    group_item_label: "entity.user.role_name [D]"
    label: "entity.user.role_name"
    view_label: "Entity"
    description: "System role name for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_name

  dimension_group: entity__user__termination_date {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.termination_date.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.termination_date.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.termination_date"
    view_label: "Entity"
    description: "User job employment termination date."
  }  # dimension entity__user__termination_date

  dimension: entity__user__time_off {
    hidden: yes
  }  # dimension entity__user__time_off

  dimension: entity__user__title {
    type: string
    sql: ${TABLE}.entity.user.title ;;
    group_label: "entity"
    label: "entity.user.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension entity__user__title

  dimension: entity__user__user_authentication_status {
    type: number
    sql: ${TABLE}.entity.user.user_authentication_status ;;
    group_label: "entity"
    label: "entity.user.user_authentication_status"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status

  dimension: entity__user__user_authentication_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DELETED", "NO_ACTIVE_CREDENTIALS", "SUSPENDED", "UNKNOWN_AUTHENTICATION_STATUS"]
    sql: CASE ${TABLE}.entity.user.user_authentication_status WHEN 0 THEN 'UNKNOWN_AUTHENTICATION_STATUS' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'SUSPENDED' WHEN 3 THEN 'NO_ACTIVE_CREDENTIALS' WHEN 4 THEN 'DELETED' END ;;
    group_label: "entity"
    label: "entity.user.user_authentication_status_enum_name"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status_enum_name

  dimension: entity__user__user_display_name {
    type: string
    sql: ${TABLE}.entity.user.user_display_name ;;
    group_label: "entity"
    label: "entity.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__user__user_display_name

  dimension: entity__user__user_role {
    type: number
    sql: ${TABLE}.entity.user.user_role ;;
    group_label: "entity"
    group_item_label: "entity.user.user_role [D]"
    label: "entity.user.user_role"
    view_label: "Entity"
    description: "System role for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__user_role

  dimension: entity__user__user_role_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "UNKNOWN_ROLE"]
    sql: CASE ${TABLE}.entity.user.user_role WHEN 0 THEN 'UNKNOWN_ROLE' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    group_item_label: "entity.user.user_role_enum_name [D]"
    label: "entity.user.user_role_enum_name"
    view_label: "Entity"
    description: "System role for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__user_role_enum_name

  dimension: entity__user__userid {
    type: string
    sql: ${TABLE}.entity.user.userid ;;
    group_label: "entity"
    label: "entity.user.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension entity__user__userid

  dimension: entity__user__windows_sid {
    type: string
    sql: ${TABLE}.entity.user.windows_sid ;;
    group_label: "entity"
    label: "entity.user.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension entity__user__windows_sid

  dimension: entity__user_management_chain {
    hidden: yes
  }  # dimension entity__user_management_chain

  dimension: metadata {
    hidden: yes
  }  # dimension metadata

  dimension_group: metadata__collected_timestamp {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.collected_timestamp.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.collected_timestamp.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.collected_timestamp"
    view_label: "Entity"
    description: "GMT timestamp when the entity information was collected by the vendor's local collection infrastructure."
  }  # dimension metadata__collected_timestamp

  dimension_group: metadata__creation_timestamp {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.creation_timestamp.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.creation_timestamp.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.creation_timestamp"
    view_label: "Entity"
    description: "GMT timestamp when the entity described by the product_entity_id was created on the system where data was collected."
  }  # dimension metadata__creation_timestamp

  dimension: metadata__description {
    type: string
    sql: ${TABLE}.metadata.description ;;
    group_label: "metadata"
    label: "metadata.description"
    view_label: "Entity"
    description: "Human-readable description of the entity."
  }  # dimension metadata__description

  dimension: metadata__entity_type {
    type: number
    sql: ${TABLE}.metadata.entity_type ;;
    group_label: "metadata"
    label: "metadata.entity_type"
    view_label: "Entity"
    description: "Entity type. If an entity has multiple possible types, this specifies the most specific type."
  }  # dimension metadata__entity_type

  dimension: metadata__entity_type_enum_name {
    type: string
    suggestions: ["ASSET", "DOMAIN_NAME", "FILE", "GROUP", "IP_ADDRESS", "METRIC", "MUTEX", "RESOURCE", "UNKNOWN_ENTITYTYPE", "URL", "USER"]
    sql: CASE ${TABLE}.metadata.entity_type WHEN 0 THEN 'UNKNOWN_ENTITYTYPE' WHEN 1 THEN 'ASSET' WHEN 10000 THEN 'USER' WHEN 10001 THEN 'GROUP' WHEN 2 THEN 'RESOURCE' WHEN 3 THEN 'IP_ADDRESS' WHEN 4 THEN 'FILE' WHEN 5 THEN 'DOMAIN_NAME' WHEN 6 THEN 'URL' WHEN 7 THEN 'MUTEX' WHEN 8 THEN 'METRIC' END ;;
    group_label: "metadata"
    label: "metadata.entity_type_enum_name"
    view_label: "Entity"
    description: "Entity type. If an entity has multiple possible types, this specifies the most specific type."
  }  # dimension metadata__entity_type_enum_name

  dimension: metadata__event_metadata {
    hidden: yes
  }  # dimension metadata__event_metadata

  dimension: metadata__event_metadata__base_labels {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels

  dimension: metadata__event_metadata__base_labels__log_types {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels__log_types

  dimension: metadata__event_metadata__base_labels__namespaces {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels__namespaces

  dimension_group: metadata__interval {
    type: duration
    intervals: [ second, minute, hour ]
    sql_start: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.interval.start_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.interval.start_time.nanos,0) / 1000) as INT64)) ;;
    sql_end: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.interval.end_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.interval.end_time.nanos,0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.interval"
    view_label: "Entity"
    description: "Valid existence time range for the version of the entity represented by this entity data."
  }  # dimension metadata__interval

  dimension: metadata__product_entity_id {
    type: string
    sql: ${TABLE}.metadata.product_entity_id ;;
    group_label: "metadata"
    label: "metadata.product_entity_id"
    view_label: "Entity"
    description: "A vendor-specific identifier that uniquely identifies the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension metadata__product_entity_id

  dimension: metadata__product_name {
    type: string
    sql: ${TABLE}.metadata.product_name ;;
    group_label: "metadata"
    label: "metadata.product_name"
    view_label: "Entity"
    description: "Product name that produced the entity information."
  }  # dimension metadata__product_name

  dimension: metadata__product_version {
    type: string
    sql: ${TABLE}.metadata.product_version ;;
    group_label: "metadata"
    label: "metadata.product_version"
    view_label: "Entity"
    description: "Version of the product that produced the entity information."
  }  # dimension metadata__product_version

  dimension: metadata__source_labels {
    hidden: yes
  }  # dimension metadata__source_labels

  dimension: metadata__source_type {
    type: number
    sql: ${TABLE}.metadata.source_type ;;
    group_label: "metadata"
    label: "metadata.source_type"
    view_label: "Entity"
    description: "The source of the entity."
  }  # dimension metadata__source_type

  dimension: metadata__source_type_enum_name {
    type: string
    suggestions: ["DERIVED_CONTEXT", "ENTITY_CONTEXT", "GLOBAL_CONTEXT", "SOURCE_TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.metadata.source_type WHEN 0 THEN 'SOURCE_TYPE_UNSPECIFIED' WHEN 1 THEN 'ENTITY_CONTEXT' WHEN 2 THEN 'DERIVED_CONTEXT' WHEN 3 THEN 'GLOBAL_CONTEXT' END ;;
    group_label: "metadata"
    label: "metadata.source_type_enum_name"
    view_label: "Entity"
    description: "The source of the entity."
  }  # dimension metadata__source_type_enum_name

  dimension: metadata__threat {
    hidden: yes
  }  # dimension metadata__threat

  dimension: metadata__vendor_name {
    type: string
    sql: ${TABLE}.metadata.vendor_name ;;
    group_label: "metadata"
    label: "metadata.vendor_name"
    view_label: "Entity"
    description: "Vendor name of the product that produced the entity information."
  }  # dimension metadata__vendor_name

  dimension: relations {
    hidden: yes
  }  # dimension relations

}  # view entity_graph

view: entity_graph__additional__fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "additional"
    label: "additional.fields.key"
    view_label: "Entity"
  }  # dimension key

  dimension: value {
    hidden: yes
  }  # dimension value

  dimension: value__number_value {
    type: number
    sql: ${TABLE}.value.number_value ;;
    group_label: "additional"
    label: "additional.fields.value.number_value"
    view_label: "Entity"
  }  # dimension value__number_value

  dimension: value__string_value {
    type: string
    sql: ${TABLE}.value.string_value ;;
    group_label: "additional"
    label: "additional.fields.value.string_value"
    view_label: "Entity"
  }  # dimension value__string_value

}  # view entity_graph__additional__fields

view: entity_graph__entity__artifact__network__email__to {
  dimension: entity_graph__entity__artifact__network__email__to {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.artifact.network.email.to"
    view_label: "Entity"
    description: "A list of 'to' addresses."
  }  # dimension entity_graph__entity__artifact__network__email__to
}  # view entity_graph__entity__artifact__network__email__to

view: entity_graph__entity__asset__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.asset.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.asset.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__asset__attribute__labels

view: entity_graph__entity__asset__hardware {
  dimension: cpu_model {
    type: string
    sql: ${TABLE}.cpu_model ;;
    group_label: "entity"
    label: "entity.asset.hardware.cpu_model"
    view_label: "Entity"
    description: "Model description of the hardware CPU (e.g. \"2.8 GHz Quad-Core Intel Core i5\")."
  }  # dimension cpu_model

  dimension: cpu_platform {
    type: string
    sql: ${TABLE}.cpu_platform ;;
    group_label: "entity"
    label: "entity.asset.hardware.cpu_platform"
    view_label: "Entity"
    description: "Platform of the hardware CPU (e.g. \"Intel Broadwell\")."
  }  # dimension cpu_platform

  dimension: manufacturer {
    type: string
    sql: ${TABLE}.manufacturer ;;
    group_label: "entity"
    label: "entity.asset.hardware.manufacturer"
    view_label: "Entity"
    description: "Hardware manufacturer."
  }  # dimension manufacturer

  dimension: model {
    type: string
    sql: ${TABLE}.model ;;
    group_label: "entity"
    label: "entity.asset.hardware.model"
    view_label: "Entity"
    description: "Hardware model."
  }  # dimension model

  dimension: ram {
    type: number
    sql: ${TABLE}.ram ;;
    group_label: "entity"
    label: "entity.asset.hardware.ram"
    view_label: "Entity"
    description: "Amount of the hardware ramdom access memory (RAM) in Mb."
  }  # dimension ram

  dimension: serial_number {
    type: string
    sql: ${TABLE}.serial_number ;;
    group_label: "entity"
    label: "entity.asset.hardware.serial_number"
    view_label: "Entity"
    description: "Hardware serial number."
  }  # dimension serial_number

}  # view entity_graph__entity__asset__hardware

view: entity_graph__entity__asset__ip {
  dimension: entity_graph__entity__asset__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__ip
}  # view entity_graph__entity__asset__ip

view: entity_graph__entity__asset__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.asset.labels.key [D]"
    label: "entity.asset.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.asset.labels.value [D]"
    label: "entity.asset.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__asset__labels

view: entity_graph__entity__asset__mac {
  dimension: entity_graph__entity__asset__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__mac
}  # view entity_graph__entity__asset__mac

view: entity_graph__entity__asset__nat_ip {
  dimension: entity_graph__entity__asset__nat_ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.nat_ip"
    view_label: "Entity"
    description: "List of NAT IP addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__nat_ip
}  # view entity_graph__entity__asset__nat_ip

view: entity_graph__entity__asset__software__permissions {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.asset.software.permissions.description"
    view_label: "Entity"
    description: "Description of the permission (e.g. 'Ability to update detect rules')."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.software.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__entity__asset__software__permissions

view: entity_graph__entity__asset__software {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.software.name"
    view_label: "Entity"
    description: "The name of the software."
  }  # dimension name

  dimension: permissions {
    hidden: yes
  }  # dimension permissions

  dimension: version {
    type: string
    sql: ${TABLE}.version ;;
    group_label: "entity"
    label: "entity.asset.software.version"
    view_label: "Entity"
    description: "The version of the software."
  }  # dimension version

}  # view entity_graph__entity__asset__software

view: entity_graph__entity__asset__vulnerabilities__about__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.asset.vulnerabilities.about.labels.key [D]"
    label: "entity.asset.vulnerabilities.about.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.asset.vulnerabilities.about.labels.value [D]"
    label: "entity.asset.vulnerabilities.about.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__asset__vulnerabilities__about__labels

view: entity_graph__entity__asset__vulnerabilities {
  dimension: about {
    hidden: yes
  }  # dimension about

  dimension: about__labels {
    hidden: yes
  }  # dimension about__labels

  dimension: about__namespace {
    type: string
    sql: ${TABLE}.about.namespace ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.about.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension about__namespace

  dimension: cve_description {
    type: string
    sql: ${TABLE}.cve_description ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cve_description"
    view_label: "Entity"
    description: "Common Vulnerabilities and Exposures Description. <a href=\"https://cve.mitre.org/about/faqs.html#what_is_cve_record\">https://cve.mitre.org/about/faqs.html#what_is_cve_record</a>"
  }  # dimension cve_description

  dimension: cve_id {
    type: string
    sql: ${TABLE}.cve_id ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cve_id"
    view_label: "Entity"
    description: "Common Vulnerabilities and Exposures Id.<a href=\"https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures\">https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures</a> <a href=\"https://cve.mitre.org/about/faqs.html#what_is_cve_id\">https://cve.mitre.org/about/faqs.html#what_is_cve_id</a>"
  }  # dimension cve_id

  dimension: cvss_base_score {
    type: number
    sql: ${TABLE}.cvss_base_score ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_base_score"
    view_label: "Entity"
    description: "CVSS Base Score in the range of 0.0 to 10.0. Useful for sorting."
  }  # dimension cvss_base_score

  dimension: cvss_vector {
    type: string
    sql: ${TABLE}.cvss_vector ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_vector"
    view_label: "Entity"
    description: "Vector of CVSS properties (e.g. \"AV:L/AC:H/Au:N/C:N/I:P/A:C\") Can be linked to via:<a href=\"https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator?vector=VALUE\"> https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator?vector=VALUE</a>"
  }  # dimension cvss_vector

  dimension: cvss_version {
    type: string
    sql: ${TABLE}.cvss_version ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_version"
    view_label: "Entity"
    description: "Version of CVSS Vector/Score."
  }  # dimension cvss_version

  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.description"
    view_label: "Entity"
    description: "Description of the vulnerability."
  }  # dimension description

  dimension_group: entity__asset__vulnerabilities__first_found {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.first_found.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.first_found.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.first_found"
    view_label: "Entity"
    description: "Products that maintain a history of vuln scans should populate first_found with the time that a scan first detected the vulnerability on this asset."
  }  # dimension entity__asset__vulnerabilities__first_found

  dimension_group: entity__asset__vulnerabilities__last_found {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.last_found.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.last_found.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.last_found"
    view_label: "Entity"
    description: "Products that maintain a history of vuln scans should populate last_found with the time that a scan last detected the vulnerability on this asset."
  }  # dimension entity__asset__vulnerabilities__last_found

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.name"
    view_label: "Entity"
    description: "Name of the vulnerability (e.g. \"Unsupported OS Version detected\")."
  }  # dimension name

  dimension_group: entity__asset__vulnerabilities__scan_end_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.scan_end_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.scan_end_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.scan_end_time"
    view_label: "Entity"
    description: "If the vulnerability was discovered during an asset scan, then this field should be populated with the time the scan ended. This field can be left unset if the end time is not available or not applicable."
  }  # dimension entity__asset__vulnerabilities__scan_end_time

  dimension_group: entity__asset__vulnerabilities__scan_start_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.scan_start_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.scan_start_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.scan_start_time"
    view_label: "Entity"
    description: "If the vulnerability was discovered during an asset scan, then this field should be populated with the time the scan started. This field can be left unset if the start time is not available or not applicable."
  }  # dimension entity__asset__vulnerabilities__scan_start_time

  dimension: severity {
    type: number
    sql: ${TABLE}.severity ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity"
    view_label: "Entity"
    description: "The severity of the vulnerability."
  }  # dimension severity

  dimension: severity_enum_name {
    type: string
    suggestions: ["CRITICAL", "HIGH", "LOW", "MEDIUM", "UNKNOWN_SEVERITY"]
    sql: CASE ${TABLE}.severity WHEN 0 THEN 'UNKNOWN_SEVERITY' WHEN 1 THEN 'LOW' WHEN 2 THEN 'MEDIUM' WHEN 3 THEN 'HIGH' WHEN 4 THEN 'CRITICAL' END ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity_enum_name"
    view_label: "Entity"
    description: "The severity of the vulnerability."
  }  # dimension severity_enum_name

  dimension: severity_details {
    type: string
    sql: ${TABLE}.severity_details ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity_details"
    view_label: "Entity"
    description: "Vendor-specific severity"
  }  # dimension severity_details

  dimension: vendor {
    type: string
    sql: ${TABLE}.vendor ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.vendor"
    view_label: "Entity"
    description: "Vendor of scan that discovered vulnerability."
  }  # dimension vendor

  dimension: vendor_knowledge_base_article_id {
    type: string
    sql: ${TABLE}.vendor_knowledge_base_article_id ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.vendor_knowledge_base_article_id"
    view_label: "Entity"
    description: "Vendor specific knowledge base article (e.g. \"KBXXXXXX\" from Microsoft). <a href=\"https://en.wikipedia.org/wiki/Microsoft_Knowledge_Base\">https://en.wikipedia.org/wiki/Microsoft_Knowledge_Base</a> <a href=\"https://access.redhat.com/knowledgebase\">https://access.redhat.com/knowledgebase</a>"
  }  # dimension vendor_knowledge_base_article_id

}  # view entity_graph__entity__asset__vulnerabilities

view: entity_graph__entity__domain__admin__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.admin.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.admin.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__admin__attribute__labels

view: entity_graph__entity__domain__billing__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.billing.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.billing.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__billing__attribute__labels

view: entity_graph__entity__domain__name_server {
  dimension: entity_graph__entity__domain__name_server {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.domain.name_server"
    view_label: "Entity"
    description: "Repeated list of name servers."
  }  # dimension entity_graph__entity__domain__name_server
}  # view entity_graph__entity__domain__name_server

view: entity_graph__entity__domain__registrant__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.registrant.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.registrant.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__registrant__attribute__labels

view: entity_graph__entity__domain__registrant__email_addresses {
  dimension: entity_graph__entity__domain__registrant__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.domain.registrant.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__domain__registrant__email_addresses
}  # view entity_graph__entity__domain__registrant__email_addresses

view: entity_graph__entity__domain__tech__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.tech.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.tech.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__tech__attribute__labels

view: entity_graph__entity__file__names {
  dimension: entity_graph__entity__file__names {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.file.names"
    view_label: "Entity"
    description: "Names fields."
  }  # dimension entity_graph__entity__file__names
}  # view entity_graph__entity__file__names

view: entity_graph__entity__file__pe_file__resource {
  dimension: entropy {
    type: number
    sql: ${TABLE}.entropy ;;
    group_label: "entity"
    label: "entity.file.pe_file.resource.entropy"
    view_label: "Entity"
    description: "Entropy of the resource."
  }  # dimension entropy

}  # view entity_graph__entity__file__pe_file__resource

view: entity_graph__entity__group__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.group.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.group.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__group__attribute__labels

view: entity_graph__entity__group__email_addresses {
  dimension: entity_graph__entity__group__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.group.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the group."
  }  # dimension entity_graph__entity__group__email_addresses
}  # view entity_graph__entity__group__email_addresses

view: entity_graph__entity__ip {
  dimension: entity_graph__entity__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with a network connection."
  }  # dimension entity_graph__entity__ip
}  # view entity_graph__entity__ip

view: entity_graph__entity__ip_geo_artifact {
  dimension: ip {
    type: string
    sql: ${TABLE}.ip ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.ip"
    view_label: "Entity"
    description: "IP address of the artifact."
  }  # dimension ip

  dimension: location {
    hidden: yes
  }  # dimension location

  dimension: location__city {
    type: string
    sql: ${TABLE}.location.city ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension location__city

  dimension: location__country_or_region {
    type: string
    sql: ${TABLE}.location.country_or_region ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension location__country_or_region

  dimension: location__region_coordinates {
    type: location
    sql_latitude: ${TABLE}.location.region_coordinates.latitude ;;
    sql_longitude: ${TABLE}.location.region_coordinates.longitude ;;
    group_label: "entity"
    group_item_label: "entity.ip_geo_artifact.location.region_coordinates [L]"
    label: "entity.ip_geo_artifact.location.region_coordinates"
    view_label: "Entity"
    description: "Coordinates for the associated region. See <a href=\"https://cloud.google.com/vision/docs/reference/rest/v1/LatLng\">https://cloud.google.com/vision/docs/reference/rest/v1/LatLng</a> for a description of the fields. [L]: This is a location field and can be used in maps."
  }  # dimension location__region_coordinates

  dimension: network {
    hidden: yes
  }  # dimension network

  dimension: network__asn {
    type: string
    sql: ${TABLE}.network.asn ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.network.asn"
    view_label: "Entity"
    description: "Autonomous system number."
  }  # dimension network__asn

  dimension: network__organization_name {
    type: string
    sql: ${TABLE}.network.organization_name ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.network.organization_name"
    view_label: "Entity"
    description: "Organization name (e.g Google)."
  }  # dimension network__organization_name

}  # view entity_graph__entity__ip_geo_artifact

view: entity_graph__entity__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.labels.key [D]"
    label: "entity.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.labels.value [D]"
    label: "entity.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__labels

view: entity_graph__entity__mac {
  dimension: entity_graph__entity__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with a device."
  }  # dimension entity_graph__entity__mac
}  # view entity_graph__entity__mac

view: entity_graph__entity__resource__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.resource.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.resource.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__resource__attribute__labels

view: entity_graph__entity__user__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.user.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.user.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__user__attribute__labels

view: entity_graph__entity__user__attribute__permissions {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.description"
    view_label: "Entity"
    description: "Description of the permission (e.g. 'Ability to update detect rules')."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.type"
    view_label: "Entity"
    description: "Type of the permission."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMIN_READ", "ADMIN_WRITE", "DATA_READ", "DATA_WRITE", "UNKNOWN_PERMISSION_TYPE"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'UNKNOWN_PERMISSION_TYPE' WHEN 1 THEN 'ADMIN_WRITE' WHEN 2 THEN 'ADMIN_READ' WHEN 3 THEN 'DATA_WRITE' WHEN 4 THEN 'DATA_READ' END ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.type_enum_name"
    view_label: "Entity"
    description: "Type of the permission."
  }  # dimension type_enum_name

}  # view entity_graph__entity__user__attribute__permissions

view: entity_graph__entity__user__attribute__roles {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.description"
    view_label: "Entity"
    description: "System role description for user."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.type"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'TYPE_UNSPECIFIED' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.type_enum_name"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type_enum_name

}  # view entity_graph__entity__user__attribute__roles

view: entity_graph__entity__user__department {
  dimension: entity_graph__entity__user__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__entity__user__department
}  # view entity_graph__entity__user__department

view: entity_graph__entity__user__email_addresses {
  dimension: entity_graph__entity__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__user__email_addresses
}  # view entity_graph__entity__user__email_addresses

view: entity_graph__entity__user__group_identifiers {
  dimension: entity_graph__entity__user__group_identifiers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.group_identifiers"
    view_label: "Entity"
    description: "Product object identifiers of the group(s) the user belongs to A vendor-specific identifier to uniquely identify the group(s) the user belongs to (a GUID, LDAP OID, or similar)."
  }  # dimension entity_graph__entity__user__group_identifiers
}  # view entity_graph__entity__user__group_identifiers

view: entity_graph__entity__user__managers__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__user__managers__attribute__labels

view: entity_graph__entity__user__managers__attribute__roles {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.type"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'TYPE_UNSPECIFIED' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.type_enum_name"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type_enum_name

}  # view entity_graph__entity__user__managers__attribute__roles

view: entity_graph__entity__user__managers__department {
  dimension: entity_graph__entity__user__managers__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__entity__user__managers__department
}  # view entity_graph__entity__user__managers__department

view: entity_graph__entity__user__managers__email_addresses {
  dimension: entity_graph__entity__user__managers__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__user__managers__email_addresses
}  # view entity_graph__entity__user__managers__email_addresses

view: entity_graph__entity__user__managers__group_identifiers {
  dimension: entity_graph__entity__user__managers__group_identifiers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.group_identifiers"
    view_label: "Entity"
    description: "Product object identifiers of the group(s) the user belongs to A vendor-specific identifier to uniquely identify the group(s) the user belongs to (a GUID, LDAP OID, or similar)."
  }  # dimension entity_graph__entity__user__managers__group_identifiers
}  # view entity_graph__entity__user__managers__group_identifiers

view: entity_graph__entity__user__managers__phone_numbers {
  dimension: entity_graph__entity__user__managers__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__entity__user__managers__phone_numbers
}  # view entity_graph__entity__user__managers__phone_numbers

view: entity_graph__entity__user__managers {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__labels {
    hidden: yes
  }  # dimension attribute__labels

  dimension: attribute__roles {
    hidden: yes
  }  # dimension attribute__roles

  dimension: company_name {
    type: string
    sql: ${TABLE}.company_name ;;
    group_label: "entity"
    label: "entity.user.managers.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension company_name

  dimension: department {
    hidden: yes
  }  # dimension department

  dimension: email_addresses {
    hidden: yes
  }  # dimension email_addresses

  dimension: employee_id {
    type: string
    sql: ${TABLE}.employee_id ;;
    group_label: "entity"
    label: "entity.user.managers.employee_id"
    view_label: "Entity"
    description: "Human capital management identifier."
  }  # dimension employee_id

  dimension: first_name {
    type: string
    sql: ${TABLE}.first_name ;;
    group_label: "entity"
    label: "entity.user.managers.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension first_name

  dimension: group_identifiers {
    hidden: yes
  }  # dimension group_identifiers

  dimension: last_name {
    type: string
    sql: ${TABLE}.last_name ;;
    group_label: "entity"
    label: "entity.user.managers.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension last_name

  dimension: personal_address {
    hidden: yes
  }  # dimension personal_address

  dimension: personal_address__city {
    type: string
    sql: ${TABLE}.personal_address.city ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension personal_address__city

  dimension: personal_address__country_or_region {
    type: string
    sql: ${TABLE}.personal_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension personal_address__country_or_region

  dimension: personal_address__name {
    type: string
    sql: ${TABLE}.personal_address.name ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension personal_address__name

  dimension: personal_address__state {
    type: string
    sql: ${TABLE}.personal_address.state ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension personal_address__state

  dimension: phone_numbers {
    hidden: yes
  }  # dimension phone_numbers

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "entity"
    label: "entity.user.managers.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension product_object_id

  dimension: title {
    type: string
    sql: ${TABLE}.title ;;
    group_label: "entity"
    label: "entity.user.managers.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension title

  dimension: user_display_name {
    type: string
    sql: ${TABLE}.user_display_name ;;
    group_label: "entity"
    label: "entity.user.managers.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension user_display_name

  dimension: userid {
    type: string
    sql: ${TABLE}.userid ;;
    group_label: "entity"
    label: "entity.user.managers.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension userid

  dimension: windows_sid {
    type: string
    sql: ${TABLE}.windows_sid ;;
    group_label: "entity"
    label: "entity.user.managers.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension windows_sid

}  # view entity_graph__entity__user__managers

view: entity_graph__entity__user__phone_numbers {
  dimension: entity_graph__entity__user__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__entity__user__phone_numbers
}  # view entity_graph__entity__user__phone_numbers

view: entity_graph__entity__user__time_off {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.time_off.description"
    view_label: "Entity"
    description: "Description of the leave if available (e.g. 'Vacation')."
  }  # dimension description

  dimension_group: entity__user__time_off__interval {
    type: duration
    intervals: [ second, minute, hour ]
    sql_start: TIMESTAMP_MICROS(IFNULL(${TABLE}.interval.start_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.interval.start_time.nanos,0) / 1000) as INT64)) ;;
    sql_end: TIMESTAMP_MICROS(IFNULL(${TABLE}.interval.end_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.interval.end_time.nanos,0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.time_off.interval"
    view_label: "Entity"
    description: "Interval duration of the leave."
  }  # dimension entity__user__time_off__interval

}  # view entity_graph__entity__user__time_off

view: entity_graph__entity__user_management_chain__department {
  dimension: entity_graph__entity__user_management_chain__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user_management_chain.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__entity__user_management_chain__department
}  # view entity_graph__entity__user_management_chain__department

view: entity_graph__entity__user_management_chain__email_addresses {
  dimension: entity_graph__entity__user_management_chain__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user_management_chain.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__user_management_chain__email_addresses
}  # view entity_graph__entity__user_management_chain__email_addresses

view: entity_graph__entity__user_management_chain {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__cloud {
    hidden: yes
  }  # dimension attribute__cloud

  dimension: attribute__cloud__project {
    hidden: yes
  }  # dimension attribute__cloud__project

  dimension: attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.project.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.user_management_chain.attribute.cloud.project.product_object_id [D]"
    label: "entity.user_management_chain.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__project__product_object_id

  dimension: attribute__cloud__vpc {
    hidden: yes
  }  # dimension attribute__cloud__vpc

  dimension: attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.vpc.product_object_id ;;
    group_label: "entity"
    group_item_label: "entity.user_management_chain.attribute.cloud.vpc.product_object_id [D]"
    label: "entity.user_management_chain.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__vpc__product_object_id

  dimension: department {
    hidden: yes
  }  # dimension department

  dimension: email_addresses {
    hidden: yes
  }  # dimension email_addresses

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "entity"
    label: "entity.user_management_chain.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension product_object_id

  dimension: title {
    type: string
    sql: ${TABLE}.title ;;
    group_label: "entity"
    label: "entity.user_management_chain.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension title

  dimension: userid {
    type: string
    sql: ${TABLE}.userid ;;
    group_label: "entity"
    label: "entity.user_management_chain.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension userid

}  # view entity_graph__entity__user_management_chain

view: entity_graph__metadata__event_metadata__base_labels__log_types {
  dimension: entity_graph__metadata__event_metadata__base_labels__log_types {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.log_types"
    view_label: "Entity"
    description: "All the LogType labels. We use string to log types to avoid moving LogType proto, which contains customer info, to external."
  }  # dimension entity_graph__metadata__event_metadata__base_labels__log_types
}  # view entity_graph__metadata__event_metadata__base_labels__log_types

view: entity_graph__metadata__event_metadata__base_labels__namespaces {
  dimension: entity_graph__metadata__event_metadata__base_labels__namespaces {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.namespaces"
    view_label: "Entity"
    description: "All the namespaces."
  }  # dimension entity_graph__metadata__event_metadata__base_labels__namespaces
}  # view entity_graph__metadata__event_metadata__base_labels__namespaces

view: entity_graph__metadata__source_labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.source_labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.source_labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__source_labels

view: entity_graph__metadata__threat__about__ip {
  dimension: entity_graph__metadata__threat__about__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with a network connection."
  }  # dimension entity_graph__metadata__threat__about__ip
}  # view entity_graph__metadata__threat__about__ip

view: entity_graph__metadata__threat__about__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.labels.key [D]"
    label: "metadata.threat.about.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.labels.value [D]"
    label: "metadata.threat.about.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__metadata__threat__about__labels

view: entity_graph__metadata__threat__about__user__email_addresses {
  dimension: entity_graph__metadata__threat__about__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__metadata__threat__about__user__email_addresses
}  # view entity_graph__metadata__threat__about__user__email_addresses

view: entity_graph__metadata__threat__about__user_management_chain {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__cloud {
    hidden: yes
  }  # dimension attribute__cloud

  dimension: attribute__cloud__project {
    hidden: yes
  }  # dimension attribute__cloud__project

  dimension: attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.project.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.user_management_chain.attribute.cloud.project.product_object_id [D]"
    label: "metadata.threat.about.user_management_chain.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__project__product_object_id

  dimension: attribute__cloud__vpc {
    hidden: yes
  }  # dimension attribute__cloud__vpc

  dimension: attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.vpc.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.user_management_chain.attribute.cloud.vpc.product_object_id [D]"
    label: "metadata.threat.about.user_management_chain.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__vpc__product_object_id

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "metadata"
    label: "metadata.threat.about.user_management_chain.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension product_object_id

}  # view entity_graph__metadata__threat__about__user_management_chain

view: entity_graph__metadata__threat__action {
  dimension: entity_graph__metadata__threat__action {
    type: number
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.action"
    view_label: "Entity"
    description: "Actions taken for this event."
  }  # dimension entity_graph__metadata__threat__action
}  # view entity_graph__metadata__threat__action

view: entity_graph__metadata__threat__action_enum_name {
  dimension: entity_graph__metadata__threat__action_enum_name {
    type: string
    suggestions: ["ALLOW", "ALLOW_WITH_MODIFICATION", "BLOCK", "CHALLENGE", "FAIL", "QUARANTINE", "UNKNOWN_ACTION"]
    sql: CASE ${TABLE} WHEN 0 THEN 'UNKNOWN_ACTION' WHEN 1 THEN 'ALLOW' WHEN 2 THEN 'BLOCK' WHEN 3 THEN 'ALLOW_WITH_MODIFICATION' WHEN 4 THEN 'QUARANTINE' WHEN 5 THEN 'FAIL' WHEN 6 THEN 'CHALLENGE' END ;;
    group_label: "metadata"
    label: "metadata.threat.action_enum_name"
    view_label: "Entity"
    description: "Actions taken for this event."
  }  # dimension entity_graph__metadata__threat__action_enum_name
}  # view entity_graph__metadata__threat__action_enum_name

view: entity_graph__metadata__threat__category {
  dimension: entity_graph__metadata__threat__category {
    type: number
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.category"
    view_label: "Entity"
    description: "The security category."
  }  # dimension entity_graph__metadata__threat__category
}  # view entity_graph__metadata__threat__category

view: entity_graph__metadata__threat__category_enum_name {
  dimension: entity_graph__metadata__threat__category_enum_name {
    type: string
    suggestions: ["ACL_VIOLATION", "AUTH_VIOLATION", "DATA_AT_REST", "DATA_DESTRUCTION", "DATA_EXFILTRATION", "EXPLOIT", "MAIL_PHISHING", "MAIL_SPAM", "MAIL_SPOOFING", "NETWORK_CATEGORIZED_CONTENT", "NETWORK_COMMAND_AND_CONTROL", "NETWORK_DENIAL_OF_SERVICE", "NETWORK_MALICIOUS", "NETWORK_RECON", "NETWORK_SUSPICIOUS", "PHISHING", "POLICY_VIOLATION", "SOCIAL_ENGINEERING", "SOFTWARE_MALICIOUS", "SOFTWARE_PUA", "SOFTWARE_SUSPICIOUS", "TOR_EXIT_NODE", "UNKNOWN_CATEGORY"]
    sql: CASE ${TABLE} WHEN 0 THEN 'UNKNOWN_CATEGORY' WHEN 10000 THEN 'SOFTWARE_MALICIOUS' WHEN 10100 THEN 'SOFTWARE_SUSPICIOUS' WHEN 10200 THEN 'SOFTWARE_PUA' WHEN 20000 THEN 'NETWORK_MALICIOUS' WHEN 20100 THEN 'NETWORK_SUSPICIOUS' WHEN 20200 THEN 'NETWORK_CATEGORIZED_CONTENT' WHEN 20300 THEN 'NETWORK_DENIAL_OF_SERVICE' WHEN 20400 THEN 'NETWORK_RECON' WHEN 20500 THEN 'NETWORK_COMMAND_AND_CONTROL' WHEN 30000 THEN 'ACL_VIOLATION' WHEN 40000 THEN 'AUTH_VIOLATION' WHEN 50000 THEN 'EXPLOIT' WHEN 60000 THEN 'DATA_EXFILTRATION' WHEN 60100 THEN 'DATA_AT_REST' WHEN 60200 THEN 'DATA_DESTRUCTION' WHEN 60300 THEN 'TOR_EXIT_NODE' WHEN 70000 THEN 'MAIL_SPAM' WHEN 70100 THEN 'MAIL_PHISHING' WHEN 70200 THEN 'MAIL_SPOOFING' WHEN 80000 THEN 'POLICY_VIOLATION' WHEN 90001 THEN 'SOCIAL_ENGINEERING' WHEN 90002 THEN 'PHISHING' END ;;
    group_label: "metadata"
    label: "metadata.threat.category_enum_name"
    view_label: "Entity"
    description: "The security category."
  }  # dimension entity_graph__metadata__threat__category_enum_name
}  # view entity_graph__metadata__threat__category_enum_name

view: entity_graph__metadata__threat__category_details {
  dimension: entity_graph__metadata__threat__category_details {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.category_details"
    view_label: "Entity"
    description: "For vendor-specific categories. For web categorization, put type in here such as \"gambling\", \"porn\", etc."
  }  # dimension entity_graph__metadata__threat__category_details
}  # view entity_graph__metadata__threat__category_details

view: entity_graph__metadata__threat__detection_fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.threat.detection_fields.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.threat.detection_fields.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__threat__detection_fields

view: entity_graph__metadata__threat__rule_labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.threat.rule_labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.threat.rule_labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__threat__rule_labels

view: entity_graph__metadata__threat {
  dimension: about {
    hidden: yes
  }  # dimension about

  dimension: about__asset {
    hidden: yes
  }  # dimension about__asset

  dimension: about__asset__attribute {
    hidden: yes
  }  # dimension about__asset__attribute

  dimension: about__asset__attribute__cloud {
    hidden: yes
  }  # dimension about__asset__attribute__cloud

  dimension: about__asset__attribute__cloud__project {
    hidden: yes
  }  # dimension about__asset__attribute__cloud__project

  dimension: about__asset__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.about.asset.attribute.cloud.project.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.asset.attribute.cloud.project.product_object_id [D]"
    label: "metadata.threat.about.asset.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__asset__attribute__cloud__project__product_object_id

  dimension: about__asset__attribute__cloud__vpc {
    hidden: yes
  }  # dimension about__asset__attribute__cloud__vpc

  dimension: about__asset__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.about.asset.attribute.cloud.vpc.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.asset.attribute.cloud.vpc.product_object_id [D]"
    label: "metadata.threat.about.asset.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__asset__attribute__cloud__vpc__product_object_id

  dimension: about__asset__hostname {
    type: string
    sql: ${TABLE}.about.asset.hostname ;;
    group_label: "metadata"
    label: "metadata.threat.about.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension about__asset__hostname

  dimension: about__asset__product_object_id {
    type: string
    sql: ${TABLE}.about.asset.product_object_id ;;
    group_label: "metadata"
    label: "metadata.threat.about.asset.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID  or similar)."
  }  # dimension about__asset__product_object_id

  dimension: about__cloud {
    hidden: yes
  }  # dimension about__cloud

  dimension: about__cloud__project {
    hidden: yes
  }  # dimension about__cloud__project

  dimension: about__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.about.cloud.project.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.cloud.project.product_object_id [D]"
    label: "metadata.threat.about.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__cloud__project__product_object_id

  dimension: about__cloud__vpc {
    hidden: yes
  }  # dimension about__cloud__vpc

  dimension: about__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.about.cloud.vpc.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.cloud.vpc.product_object_id [D]"
    label: "metadata.threat.about.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__cloud__vpc__product_object_id

  dimension: about__file {
    hidden: yes
  }  # dimension about__file

  dimension: about__file__md5 {
    type: string
    sql: ${TABLE}.about.file.md5 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.md5"
    view_label: "Entity"
    description: "The MD5 hash of the file."
  }  # dimension about__file__md5

  dimension: about__file__sha1 {
    type: string
    sql: ${TABLE}.about.file.sha1 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.sha1"
    view_label: "Entity"
    description: "The SHA1 hash of the file."
  }  # dimension about__file__sha1

  dimension: about__file__sha256 {
    type: string
    sql: ${TABLE}.about.file.sha256 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.sha256"
    view_label: "Entity"
    description: "The SHA256 hash of the file."
  }  # dimension about__file__sha256

  dimension: about__group {
    hidden: yes
  }  # dimension about__group

  dimension: about__group__attribute {
    hidden: yes
  }  # dimension about__group__attribute

  dimension: about__group__attribute__cloud {
    hidden: yes
  }  # dimension about__group__attribute__cloud

  dimension: about__group__attribute__cloud__project {
    hidden: yes
  }  # dimension about__group__attribute__cloud__project

  dimension: about__group__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.about.group.attribute.cloud.project.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.group.attribute.cloud.project.product_object_id [D]"
    label: "metadata.threat.about.group.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__group__attribute__cloud__project__product_object_id

  dimension: about__group__attribute__cloud__vpc {
    hidden: yes
  }  # dimension about__group__attribute__cloud__vpc

  dimension: about__group__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.about.group.attribute.cloud.vpc.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.group.attribute.cloud.vpc.product_object_id [D]"
    label: "metadata.threat.about.group.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__group__attribute__cloud__vpc__product_object_id

  dimension: about__group__product_object_id {
    type: string
    sql: ${TABLE}.about.group.product_object_id ;;
    group_label: "metadata"
    label: "metadata.threat.about.group.product_object_id"
    view_label: "Entity"
    description: "Product globally unique user object identifier, such as an LDAP Object Identifier."
  }  # dimension about__group__product_object_id

  dimension: about__hostname {
    type: string
    sql: ${TABLE}.about.hostname ;;
    group_label: "metadata"
    label: "metadata.threat.about.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension about__hostname

  dimension: about__ip {
    hidden: yes
  }  # dimension about__ip

  dimension: about__labels {
    hidden: yes
  }  # dimension about__labels

  dimension: about__namespace {
    type: string
    sql: ${TABLE}.about.namespace ;;
    group_label: "metadata"
    label: "metadata.threat.about.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension about__namespace

  dimension: about__object_reference {
    hidden: yes
  }  # dimension about__object_reference

  dimension: about__object_reference__id {
    type: string
    sql: ${TABLE}.about.object_reference.id ;;
    group_label: "metadata"
    label: "metadata.threat.about.object_reference.id"
    view_label: "Entity"
    description: "Full raw ID."
  }  # dimension about__object_reference__id

  dimension: about__object_reference__namespace {
    type: number
    sql: ${TABLE}.about.object_reference.namespace ;;
    group_label: "metadata"
    label: "metadata.threat.about.object_reference.namespace"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension about__object_reference__namespace

  dimension: about__object_reference__namespace_enum_name {
    type: string
    suggestions: ["MACHINE_INTELLIGENCE", "NORMALIZED_TELEMETRY", "RAW_TELEMETRY", "RULE_DETECTIONS", "SECURITY_COMMAND_CENTER", "SOAR_ALERT", "UNSPECIFIED", "UPPERCASE"]
    sql: CASE ${TABLE}.about.object_reference.namespace WHEN 0 THEN 'NORMALIZED_TELEMETRY' WHEN 1 THEN 'RAW_TELEMETRY' WHEN 2 THEN 'RULE_DETECTIONS' WHEN 3 THEN 'UPPERCASE' WHEN 4 THEN 'MACHINE_INTELLIGENCE' WHEN 5 THEN 'SECURITY_COMMAND_CENTER' WHEN 6 THEN 'UNSPECIFIED' WHEN 7 THEN 'SOAR_ALERT' END ;;
    group_label: "metadata"
    label: "metadata.threat.about.object_reference.namespace_enum_name"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension about__object_reference__namespace_enum_name

  dimension: about__resource {
    hidden: yes
  }  # dimension about__resource

  dimension: about__resource__product_object_id {
    type: string
    sql: ${TABLE}.about.resource.product_object_id ;;
    group_label: "metadata"
    label: "metadata.threat.about.resource.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension about__resource__product_object_id

  dimension: about__url {
    type: string
    sql: ${TABLE}.about.url ;;
    group_label: "metadata"
    label: "metadata.threat.about.url"
    view_label: "Entity"
    description: "The URL."
  }  # dimension about__url

  dimension: about__user {
    hidden: yes
  }  # dimension about__user

  dimension: about__user__attribute {
    hidden: yes
  }  # dimension about__user__attribute

  dimension: about__user__attribute__cloud {
    hidden: yes
  }  # dimension about__user__attribute__cloud

  dimension: about__user__attribute__cloud__project {
    hidden: yes
  }  # dimension about__user__attribute__cloud__project

  dimension: about__user__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.about.user.attribute.cloud.project.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.user.attribute.cloud.project.product_object_id [D]"
    label: "metadata.threat.about.user.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__user__attribute__cloud__project__product_object_id

  dimension: about__user__attribute__cloud__vpc {
    hidden: yes
  }  # dimension about__user__attribute__cloud__vpc

  dimension: about__user__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.about.user.attribute.cloud.vpc.product_object_id ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.user.attribute.cloud.vpc.product_object_id [D]"
    label: "metadata.threat.about.user.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension about__user__attribute__cloud__vpc__product_object_id

  dimension: about__user__email_addresses {
    hidden: yes
  }  # dimension about__user__email_addresses

  dimension: about__user__product_object_id {
    type: string
    sql: ${TABLE}.about.user.product_object_id ;;
    group_label: "metadata"
    label: "metadata.threat.about.user.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension about__user__product_object_id

  dimension: about__user__user_display_name {
    type: string
    sql: ${TABLE}.about.user.user_display_name ;;
    group_label: "metadata"
    label: "metadata.threat.about.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension about__user__user_display_name

  dimension: about__user_management_chain {
    hidden: yes
  }  # dimension about__user_management_chain

  dimension: action {
    hidden: yes
  }  # dimension action

  dimension: action_enum_name {
    hidden: yes
  }  # dimension action_enum_name

  dimension: action_details {
    type: string
    sql: ${TABLE}.action_details ;;
    group_label: "metadata"
    label: "metadata.threat.action_details"
    view_label: "Entity"
    description: "The detail of the action taken as provided by the vendor."
  }  # dimension action_details

  dimension: category {
    hidden: yes
  }  # dimension category

  dimension: category_enum_name {
    hidden: yes
  }  # dimension category_enum_name

  dimension: category_details {
    hidden: yes
  }  # dimension category_details

  dimension: confidence {
    type: number
    sql: ${TABLE}.confidence ;;
    group_label: "metadata"
    label: "metadata.threat.confidence"
    view_label: "Entity"
    description: "The confidence level of the result as estimated by the product."
  }  # dimension confidence

  dimension: confidence_enum_name {
    type: string
    suggestions: ["HIGH_CONFIDENCE", "LOW_CONFIDENCE", "MEDIUM_CONFIDENCE", "UNKNOWN_CONFIDENCE"]
    sql: CASE ${TABLE}.confidence WHEN 0 THEN 'UNKNOWN_CONFIDENCE' WHEN 200 THEN 'LOW_CONFIDENCE' WHEN 300 THEN 'MEDIUM_CONFIDENCE' WHEN 400 THEN 'HIGH_CONFIDENCE' END ;;
    group_label: "metadata"
    label: "metadata.threat.confidence_enum_name"
    view_label: "Entity"
    description: "The confidence level of the result as estimated by the product."
  }  # dimension confidence_enum_name

  dimension: confidence_details {
    type: string
    sql: ${TABLE}.confidence_details ;;
    group_label: "metadata"
    label: "metadata.threat.confidence_details"
    view_label: "Entity"
    description: "Additional detail with regards to the confidence of a security event as estimated by the product vendor."
  }  # dimension confidence_details

  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "metadata"
    label: "metadata.threat.description"
    view_label: "Entity"
    description: "A human readable description (e.g. \"user password was wrong\")"
  }  # dimension description

  dimension: detection_fields {
    hidden: yes
  }  # dimension detection_fields

  dimension: rule_id {
    type: string
    sql: ${TABLE}.rule_id ;;
    group_label: "metadata"
    label: "metadata.threat.rule_id"
    view_label: "Entity"
    description: "A vendor-specific ID and name for a rule, varying by observerer type (e.g. \"08123\", \"5d2b44d0-5ef6-40f5-a704-47d61d3babbe\")."
  }  # dimension rule_id

  dimension: rule_labels {
    hidden: yes
  }  # dimension rule_labels

  dimension: rule_name {
    type: string
    sql: ${TABLE}.rule_name ;;
    group_label: "metadata"
    label: "metadata.threat.rule_name"
    view_label: "Entity"
    description: "Name of the security rule (e.g. \"BlockInboundToOracle\")."
  }  # dimension rule_name

  dimension: rule_type {
    type: string
    sql: ${TABLE}.rule_type ;;
    group_label: "metadata"
    label: "metadata.threat.rule_type"
    view_label: "Entity"
    description: "The type of security rule."
  }  # dimension rule_type

  dimension: severity {
    type: number
    sql: ${TABLE}.severity ;;
    group_label: "metadata"
    label: "metadata.threat.severity"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity

  dimension: severity_enum_name {
    type: string
    suggestions: ["CRITICAL", "ERROR", "HIGH", "INFORMATIONAL", "LOW", "MEDIUM", "UNKNOWN_SEVERITY"]
    sql: CASE ${TABLE}.severity WHEN 0 THEN 'UNKNOWN_SEVERITY' WHEN 100 THEN 'INFORMATIONAL' WHEN 150 THEN 'ERROR' WHEN 200 THEN 'LOW' WHEN 300 THEN 'MEDIUM' WHEN 400 THEN 'HIGH' WHEN 500 THEN 'CRITICAL' END ;;
    group_label: "metadata"
    label: "metadata.threat.severity_enum_name"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity_enum_name

  dimension: severity_details {
    type: string
    sql: ${TABLE}.severity_details ;;
    group_label: "metadata"
    label: "metadata.threat.severity_details"
    view_label: "Entity"
    description: "Vendor-specific severity."
  }  # dimension severity_details

  dimension: summary {
    type: string
    sql: ${TABLE}.summary ;;
    group_label: "metadata"
    label: "metadata.threat.summary"
    view_label: "Entity"
    description: "A human readable summary (e.g. \"failed login occurred\")"
  }  # dimension summary

  dimension: threat_feed_name {
    type: string
    sql: ${TABLE}.threat_feed_name ;;
    group_label: "metadata"
    label: "metadata.threat.threat_feed_name"
    view_label: "Entity"
    description: "Vendor feed name for a threat indicator feed."
  }  # dimension threat_feed_name

  dimension: threat_id {
    type: string
    sql: ${TABLE}.threat_id ;;
    group_label: "metadata"
    label: "metadata.threat.threat_id"
    view_label: "Entity"
    description: "Vendor-specific ID for a threat."
  }  # dimension threat_id

  dimension: threat_name {
    type: string
    sql: ${TABLE}.threat_name ;;
    group_label: "metadata"
    label: "metadata.threat.threat_name"
    view_label: "Entity"
    description: "A vendor-assigned classification common across multiple customers (e.g. \"W32/File-A\", \"Slammer\")."
  }  # dimension threat_name

  dimension: threat_status {
    type: number
    sql: ${TABLE}.threat_status ;;
    group_label: "metadata"
    label: "metadata.threat.threat_status"
    view_label: "Entity"
    description: "Current status of the threat"
  }  # dimension threat_status

  dimension: threat_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "CLEARED", "FALSE_POSITIVE", "THREAT_STATUS_UNSPECIFIED"]
    sql: CASE ${TABLE}.threat_status WHEN 0 THEN 'THREAT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'CLEARED' WHEN 3 THEN 'FALSE_POSITIVE' END ;;
    group_label: "metadata"
    label: "metadata.threat.threat_status_enum_name"
    view_label: "Entity"
    description: "Current status of the threat"
  }  # dimension threat_status_enum_name

  dimension: url_back_to_product {
    type: string
    sql: ${TABLE}.url_back_to_product ;;
    group_label: "metadata"
    label: "metadata.threat.url_back_to_product"
    view_label: "Entity"
    description: "URL that takes the user to the source product console for this event."
  }  # dimension url_back_to_product

}  # view entity_graph__metadata__threat

view: entity_graph__relations__entity__asset__hardware {
  dimension: cpu_clock_speed {
    type: number
    sql: ${TABLE}.cpu_clock_speed ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_clock_speed"
    view_label: "Entity"
    description: "Clock speed of the hardware CPU in MHz."
  }  # dimension cpu_clock_speed

  dimension: cpu_model {
    type: string
    sql: ${TABLE}.cpu_model ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_model"
    view_label: "Entity"
    description: "Model description of the hardware CPU (e.g. \"2.8 GHz Quad-Core Intel Core i5\")."
  }  # dimension cpu_model

  dimension: cpu_number_cores {
    type: number
    sql: ${TABLE}.cpu_number_cores ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_number_cores"
    view_label: "Entity"
    description: "Number of CPU cores."
  }  # dimension cpu_number_cores

  dimension: cpu_platform {
    type: string
    sql: ${TABLE}.cpu_platform ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_platform"
    view_label: "Entity"
    description: "Platform of the hardware CPU (e.g. \"Intel Broadwell\")."
  }  # dimension cpu_platform

  dimension: manufacturer {
    type: string
    sql: ${TABLE}.manufacturer ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.manufacturer"
    view_label: "Entity"
    description: "Hardware manufacturer."
  }  # dimension manufacturer

  dimension: model {
    type: string
    sql: ${TABLE}.model ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.model"
    view_label: "Entity"
    description: "Hardware model."
  }  # dimension model

  dimension: ram {
    type: number
    sql: ${TABLE}.ram ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.ram"
    view_label: "Entity"
    description: "Amount of the hardware ramdom access memory (RAM) in Mb."
  }  # dimension ram

  dimension: serial_number {
    type: string
    sql: ${TABLE}.serial_number ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.serial_number"
    view_label: "Entity"
    description: "Hardware serial number."
  }  # dimension serial_number

}  # view entity_graph__relations__entity__asset__hardware

view: entity_graph__relations__entity__asset__ip {
  dimension: entity_graph__relations__entity__asset__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.asset.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with an asset."
  }  # dimension entity_graph__relations__entity__asset__ip
}  # view entity_graph__relations__entity__asset__ip

view: entity_graph__relations__entity__asset__mac {
  dimension: entity_graph__relations__entity__asset__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.asset.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with an asset."
  }  # dimension entity_graph__relations__entity__asset__mac
}  # view entity_graph__relations__entity__asset__mac

view: entity_graph__relations__entity__asset__software {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.asset.software.name"
    view_label: "Entity"
    description: "The name of the software."
  }  # dimension name

}  # view entity_graph__relations__entity__asset__software

view: entity_graph__relations__entity__ip {
  dimension: entity_graph__relations__entity__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with a network connection."
  }  # dimension entity_graph__relations__entity__ip
}  # view entity_graph__relations__entity__ip

view: entity_graph__relations__entity__ip_geo_artifact {
  dimension: location {
    hidden: yes
  }  # dimension location

  dimension: location__country_or_region {
    type: string
    sql: ${TABLE}.location.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.ip_geo_artifact.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension location__country_or_region

}  # view entity_graph__relations__entity__ip_geo_artifact

view: entity_graph__relations__entity__ip_location {
  dimension: country_or_region {
    type: string
    sql: ${TABLE}.country_or_region ;;
    group_label: "relations"
    group_item_label: "relations.entity.ip_location.country_or_region [D]"
    label: "relations.entity.ip_location.country_or_region"
    view_label: "Entity"
    description: "The country or region. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension country_or_region

}  # view entity_graph__relations__entity__ip_location

view: entity_graph__relations__entity__resource__attribute__permissions {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__relations__entity__resource__attribute__permissions

view: entity_graph__relations__entity__user__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__relations__entity__user__attribute__labels

view: entity_graph__relations__entity__user__attribute__roles {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.roles.description"
    view_label: "Entity"
    description: "System role description for user."
  }  # dimension description

}  # view entity_graph__relations__entity__user__attribute__roles

view: entity_graph__relations__entity__user__email_addresses {
  dimension: entity_graph__relations__entity__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__relations__entity__user__email_addresses
}  # view entity_graph__relations__entity__user__email_addresses

view: entity_graph__relations__entity__user__phone_numbers {
  dimension: entity_graph__relations__entity__user__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__relations__entity__user__phone_numbers
}  # view entity_graph__relations__entity__user__phone_numbers

view: entity_graph__relations__entity__user_management_chain__department {
  dimension: entity_graph__relations__entity__user_management_chain__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user_management_chain.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__relations__entity__user_management_chain__department
}  # view entity_graph__relations__entity__user_management_chain__department

view: entity_graph__relations__entity__user_management_chain {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__cloud {
    hidden: yes
  }  # dimension attribute__cloud

  dimension: attribute__cloud__project {
    hidden: yes
  }  # dimension attribute__cloud__project

  dimension: attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.project.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.user_management_chain.attribute.cloud.project.product_object_id [D]"
    label: "relations.entity.user_management_chain.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__project__product_object_id

  dimension: attribute__cloud__vpc {
    hidden: yes
  }  # dimension attribute__cloud__vpc

  dimension: attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.attribute.cloud.vpc.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.user_management_chain.attribute.cloud.vpc.product_object_id [D]"
    label: "relations.entity.user_management_chain.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension attribute__cloud__vpc__product_object_id

  dimension: department {
    hidden: yes
  }  # dimension department

  dimension: office_address {
    hidden: yes
  }  # dimension office_address

  dimension: office_address__country_or_region {
    type: string
    sql: ${TABLE}.office_address.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.user_management_chain.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension office_address__country_or_region

  dimension: personal_address {
    hidden: yes
  }  # dimension personal_address

  dimension: personal_address__country_or_region {
    type: string
    sql: ${TABLE}.personal_address.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.user_management_chain.personal_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension personal_address__country_or_region

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.user_management_chain.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension product_object_id

}  # view entity_graph__relations__entity__user_management_chain

view: entity_graph__relations {
  dimension: direction {
    type: number
    sql: ${TABLE}.direction ;;
    group_label: "relations"
    label: "relations.direction"
    view_label: "Entity"
    description: "Directionality of relationship between primary entity (a) and the related entity (b)."
  }  # dimension direction

  dimension: direction_enum_name {
    type: string
    suggestions: ["BIDIRECTIONAL", "DIRECTIONALITY_UNSPECIFIED", "UNIDIRECTIONAL"]
    sql: CASE ${TABLE}.direction WHEN 0 THEN 'DIRECTIONALITY_UNSPECIFIED' WHEN 1 THEN 'BIDIRECTIONAL' WHEN 2 THEN 'UNIDIRECTIONAL' END ;;
    group_label: "relations"
    label: "relations.direction_enum_name"
    view_label: "Entity"
    description: "Directionality of relationship between primary entity (a) and the related entity (b)."
  }  # dimension direction_enum_name

  dimension: entity {
    hidden: yes
  }  # dimension entity

  dimension: entity__asset {
    hidden: yes
  }  # dimension entity__asset

  dimension: entity__asset__asset_id {
    type: string
    sql: ${TABLE}.entity.asset.asset_id ;;
    group_label: "relations"
    label: "relations.entity.asset.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset__asset_id

  dimension: entity__asset__attribute {
    hidden: yes
  }  # dimension entity__asset__attribute

  dimension: entity__asset__attribute__cloud {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud

  dimension: entity__asset__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__project

  dimension: entity__asset__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.asset.attribute.cloud.project.product_object_id [D]"
    label: "relations.entity.asset.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__product_object_id

  dimension: entity__asset__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__vpc

  dimension: entity__asset__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.asset.attribute.cloud.vpc.product_object_id [D]"
    label: "relations.entity.asset.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__product_object_id

  dimension_group: relations__entity__asset__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension relations__entity__asset__attribute__creation_time

  dimension: entity__asset__category {
    type: string
    sql: ${TABLE}.entity.asset.category ;;
    group_label: "relations"
    label: "relations.entity.asset.category"
    view_label: "Entity"
    description: "The category of the asset (e.g. \"End User Asset\", \"Workstation\", \"Server\")."
  }  # dimension entity__asset__category

  dimension_group: relations__entity__asset__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    group_item_label: "relations.entity.asset.creation_time [D]"
    label: "relations.entity.asset.creation_time"
    view_label: "Entity"
    description: "Time the asset was created or provisioned. Deprecate: creation_time should be populated in Attribute as generic metadata. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension relations__entity__asset__creation_time

  dimension: entity__asset__deployment_status {
    type: number
    sql: ${TABLE}.entity.asset.deployment_status ;;
    group_label: "relations"
    label: "relations.entity.asset.deployment_status"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status

  dimension: entity__asset__deployment_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DECOMISSIONED", "DEPLOYMENT_STATUS_UNSPECIFIED", "PENDING_DECOMISSION"]
    sql: CASE ${TABLE}.entity.asset.deployment_status WHEN 0 THEN 'DEPLOYMENT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'PENDING_DECOMISSION' WHEN 3 THEN 'DECOMISSIONED' END ;;
    group_label: "relations"
    label: "relations.entity.asset.deployment_status_enum_name"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status_enum_name

  dimension_group: relations__entity__asset__first_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.first_discover_time"
    view_label: "Entity"
    description: "Time the asset was first discovered (by asset management/discoverability software)."
  }  # dimension relations__entity__asset__first_discover_time

  dimension: entity__asset__hardware {
    hidden: yes
  }  # dimension entity__asset__hardware

  dimension: entity__asset__hostname {
    type: string
    sql: ${TABLE}.entity.asset.hostname ;;
    group_label: "relations"
    label: "relations.entity.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension entity__asset__hostname

  dimension: entity__asset__ip {
    hidden: yes
  }  # dimension entity__asset__ip

  dimension_group: relations__entity__asset__last_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.last_discover_time"
    view_label: "Entity"
    description: "Time the asset was last discovered (by asset management/discoverability software)."
  }  # dimension relations__entity__asset__last_discover_time

  dimension: entity__asset__mac {
    hidden: yes
  }  # dimension entity__asset__mac

  dimension: entity__asset__network_domain {
    type: string
    sql: ${TABLE}.entity.asset.network_domain ;;
    group_label: "relations"
    label: "relations.entity.asset.network_domain"
    view_label: "Entity"
    description: "The network domain of the asset (e.g. \"corp.acme.com\")"
  }  # dimension entity__asset__network_domain

  dimension: entity__asset__platform_software {
    hidden: yes
  }  # dimension entity__asset__platform_software

  dimension: entity__asset__platform_software__platform {
    type: number
    sql: ${TABLE}.entity.asset.platform_software.platform ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform

  dimension: entity__asset__platform_software__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.asset.platform_software.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_enum_name"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform_enum_name

  dimension: entity__asset__platform_software__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_patch_level ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_patch_level"
    view_label: "Entity"
    description: "The platform software patch level ( e.g. \"Build 17134.48\", \"SP1\")."
  }  # dimension entity__asset__platform_software__platform_patch_level

  dimension: entity__asset__platform_software__platform_version {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_version ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_version"
    view_label: "Entity"
    description: "The platform software version ( e.g. \"Microsoft Windows 1803\")."
  }  # dimension entity__asset__platform_software__platform_version

  dimension: entity__asset__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.asset.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID  or similar)."
  }  # dimension entity__asset__product_object_id

  dimension: entity__asset__software {
    hidden: yes
  }  # dimension entity__asset__software

  dimension_group: relations__entity__asset__system_last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.system_last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.system_last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.system_last_update_time"
    view_label: "Entity"
    description: "Time the asset system or OS was last updated. For all other operations that are not system updates (such as resizing a vm, etc.) use Attribute.last_update_time."
  }  # dimension relations__entity__asset__system_last_update_time

  dimension: entity__asset__type {
    type: number
    sql: ${TABLE}.entity.asset.type ;;
    group_label: "relations"
    label: "relations.entity.asset.type"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type

  dimension: entity__asset__type_enum_name {
    type: string
    suggestions: ["IOT", "LAPTOP", "MOBILE", "NETWORK_ATTACHED_STORAGE", "PRINTER", "ROLE_UNSPECIFIED", "SCANNER", "SERVER", "TAPE_LIBRARY", "WORKSTATION"]
    sql: CASE ${TABLE}.entity.asset.type WHEN 0 THEN 'ROLE_UNSPECIFIED' WHEN 1 THEN 'WORKSTATION' WHEN 2 THEN 'LAPTOP' WHEN 3 THEN 'IOT' WHEN 4 THEN 'NETWORK_ATTACHED_STORAGE' WHEN 5 THEN 'PRINTER' WHEN 6 THEN 'SCANNER' WHEN 7 THEN 'SERVER' WHEN 8 THEN 'TAPE_LIBRARY' WHEN 9 THEN 'MOBILE' END ;;
    group_label: "relations"
    label: "relations.entity.asset.type_enum_name"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type_enum_name

  dimension: entity__cloud {
    hidden: yes
  }  # dimension entity__cloud

  dimension: entity__cloud__project {
    hidden: yes
  }  # dimension entity__cloud__project

  dimension: entity__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.cloud.project.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.cloud.project.product_object_id [D]"
    label: "relations.entity.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__cloud__project__product_object_id

  dimension: entity__cloud__vpc {
    hidden: yes
  }  # dimension entity__cloud__vpc

  dimension: entity__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.cloud.vpc.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.cloud.vpc.product_object_id [D]"
    label: "relations.entity.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__cloud__vpc__product_object_id

  dimension: entity__group {
    hidden: yes
  }  # dimension entity__group

  dimension: entity__group__attribute {
    hidden: yes
  }  # dimension entity__group__attribute

  dimension: entity__group__attribute__cloud {
    hidden: yes
  }  # dimension entity__group__attribute__cloud

  dimension: entity__group__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__group__attribute__cloud__project

  dimension: entity__group__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.attribute.cloud.project.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.group.attribute.cloud.project.product_object_id [D]"
    label: "relations.entity.group.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__group__attribute__cloud__project__product_object_id

  dimension: entity__group__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__group__attribute__cloud__vpc

  dimension: entity__group__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.attribute.cloud.vpc.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.group.attribute.cloud.vpc.product_object_id [D]"
    label: "relations.entity.group.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__group__attribute__cloud__vpc__product_object_id

  dimension: entity__group__group_display_name {
    type: string
    sql: ${TABLE}.entity.group.group_display_name ;;
    group_label: "relations"
    label: "relations.entity.group.group_display_name"
    view_label: "Entity"
    description: "Group display name. e.g. \"Finance\"."
  }  # dimension entity__group__group_display_name

  dimension: entity__group__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.group.product_object_id"
    view_label: "Entity"
    description: "Product globally unique user object identifier, such as an LDAP Object Identifier."
  }  # dimension entity__group__product_object_id

  dimension: entity__hostname {
    type: string
    sql: ${TABLE}.entity.hostname ;;
    group_label: "relations"
    label: "relations.entity.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension entity__hostname

  dimension: entity__ip {
    hidden: yes
  }  # dimension entity__ip

  dimension: entity__ip_geo_artifact {
    hidden: yes
  }  # dimension entity__ip_geo_artifact

  dimension: entity__ip_location {
    hidden: yes
  }  # dimension entity__ip_location

  dimension: entity__location {
    hidden: yes
  }  # dimension entity__location

  dimension: entity__location__name {
    type: string
    sql: ${TABLE}.entity.location.name ;;
    group_label: "relations"
    label: "relations.entity.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__location__name

  dimension: entity__namespace {
    type: string
    sql: ${TABLE}.entity.namespace ;;
    group_label: "relations"
    label: "relations.entity.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension entity__namespace

  dimension: entity__object_reference {
    hidden: yes
  }  # dimension entity__object_reference

  dimension: entity__object_reference__id {
    type: string
    sql: ${TABLE}.entity.object_reference.id ;;
    group_label: "relations"
    label: "relations.entity.object_reference.id"
    view_label: "Entity"
    description: "Full raw ID."
  }  # dimension entity__object_reference__id

  dimension: entity__object_reference__namespace {
    type: number
    sql: ${TABLE}.entity.object_reference.namespace ;;
    group_label: "relations"
    label: "relations.entity.object_reference.namespace"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension entity__object_reference__namespace

  dimension: entity__object_reference__namespace_enum_name {
    type: string
    suggestions: ["MACHINE_INTELLIGENCE", "NORMALIZED_TELEMETRY", "RAW_TELEMETRY", "RULE_DETECTIONS", "SECURITY_COMMAND_CENTER", "SOAR_ALERT", "UNSPECIFIED", "UPPERCASE"]
    sql: CASE ${TABLE}.entity.object_reference.namespace WHEN 0 THEN 'NORMALIZED_TELEMETRY' WHEN 1 THEN 'RAW_TELEMETRY' WHEN 2 THEN 'RULE_DETECTIONS' WHEN 3 THEN 'UPPERCASE' WHEN 4 THEN 'MACHINE_INTELLIGENCE' WHEN 5 THEN 'SECURITY_COMMAND_CENTER' WHEN 6 THEN 'UNSPECIFIED' WHEN 7 THEN 'SOAR_ALERT' END ;;
    group_label: "relations"
    label: "relations.entity.object_reference.namespace_enum_name"
    view_label: "Entity"
    description: "Namespace the id belongs to."
  }  # dimension entity__object_reference__namespace_enum_name

  dimension: entity__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.platform_patch_level ;;
    group_label: "relations"
    label: "relations.entity.platform_patch_level"
    view_label: "Entity"
    description: "Platform patch level. For example, \"Build 17134.48\""
  }  # dimension entity__platform_patch_level

  dimension: entity__platform_version {
    type: string
    sql: ${TABLE}.entity.platform_version ;;
    group_label: "relations"
    label: "relations.entity.platform_version"
    view_label: "Entity"
    description: "Platform version. For example, \"Microsoft Windows 1803\"."
  }  # dimension entity__platform_version

  dimension: entity__resource {
    hidden: yes
  }  # dimension entity__resource

  dimension: entity__resource__attribute {
    hidden: yes
  }  # dimension entity__resource__attribute

  dimension: entity__resource__attribute__cloud {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud

  dimension: entity__resource__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.environment ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment

  dimension: entity__resource__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment_enum_name

  dimension: entity__resource__attribute__permissions {
    hidden: yes
  }  # dimension entity__resource__attribute__permissions

  dimension: entity__resource__name {
    type: string
    sql: ${TABLE}.entity.resource.name ;;
    group_label: "relations"
    label: "relations.entity.resource.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension entity__resource__name

  dimension: entity__resource__product_object_id {
    type: string
    sql: ${TABLE}.entity.resource.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.resource.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension entity__resource__product_object_id

  dimension: entity__resource__resource_subtype {
    type: string
    sql: ${TABLE}.entity.resource.resource_subtype ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension entity__resource__resource_subtype

  dimension: entity__resource__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.resource_type ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type

  dimension: entity__resource__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "DATABASE", "DATASET", "DEVICE", "FIREWALL_RULE", "MAILBOX_FOLDER", "MUTEX", "PIPE", "SERVICE_ACCOUNT", "SETTING", "STORAGE_BUCKET", "STORAGE_OBJECT", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' END ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type_enum_name

  dimension: entity__user {
    hidden: yes
  }  # dimension entity__user

  dimension: entity__user__account_type {
    type: number
    sql: ${TABLE}.entity.user.account_type ;;
    group_label: "relations"
    label: "relations.entity.user.account_type"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type

  dimension: entity__user__account_type_enum_name {
    type: string
    suggestions: ["ACCOUNT_TYPE_UNSPECIFIED", "CLOUD_ACCOUNT_TYPE", "DEFAULT_ACCOUNT_TYPE", "DOMAIN_ACCOUNT_TYPE", "LOCAL_ACCOUNT_TYPE", "SERVICE_ACCOUNT_TYPE"]
    sql: CASE ${TABLE}.entity.user.account_type WHEN 0 THEN 'ACCOUNT_TYPE_UNSPECIFIED' WHEN 1 THEN 'DOMAIN_ACCOUNT_TYPE' WHEN 2 THEN 'LOCAL_ACCOUNT_TYPE' WHEN 3 THEN 'CLOUD_ACCOUNT_TYPE' WHEN 4 THEN 'SERVICE_ACCOUNT_TYPE' WHEN 5 THEN 'DEFAULT_ACCOUNT_TYPE' END ;;
    group_label: "relations"
    label: "relations.entity.user.account_type_enum_name"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type_enum_name

  dimension: entity__user__attribute {
    hidden: yes
  }  # dimension entity__user__attribute

  dimension: entity__user__attribute__cloud {
    hidden: yes
  }  # dimension entity__user__attribute__cloud

  dimension: entity__user__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.user.attribute.cloud.environment ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment

  dimension: entity__user__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.user.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment_enum_name

  dimension: entity__user__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__user__attribute__cloud__project

  dimension: entity__user__attribute__cloud__project__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.project.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.user.attribute.cloud.project.product_object_id [D]"
    label: "relations.entity.user.attribute.cloud.project.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__project__product_object_id

  dimension: entity__user__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__user__attribute__cloud__vpc

  dimension: entity__user__attribute__cloud__vpc__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.vpc.product_object_id ;;
    group_label: "relations"
    group_item_label: "relations.entity.user.attribute.cloud.vpc.product_object_id [D]"
    label: "relations.entity.user.attribute.cloud.vpc.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar) [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__vpc__product_object_id

  dimension: entity__user__attribute__labels {
    hidden: yes
  }  # dimension entity__user__attribute__labels

  dimension: entity__user__attribute__roles {
    hidden: yes
  }  # dimension entity__user__attribute__roles

  dimension: entity__user__company_name {
    type: string
    sql: ${TABLE}.entity.user.company_name ;;
    group_label: "relations"
    label: "relations.entity.user.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__user__company_name

  dimension: entity__user__email_addresses {
    hidden: yes
  }  # dimension entity__user__email_addresses

  dimension: entity__user__first_name {
    type: string
    sql: ${TABLE}.entity.user.first_name ;;
    group_label: "relations"
    label: "relations.entity.user.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension entity__user__first_name

  dimension: entity__user__last_name {
    type: string
    sql: ${TABLE}.entity.user.last_name ;;
    group_label: "relations"
    label: "relations.entity.user.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension entity__user__last_name

  dimension: entity__user__office_address {
    hidden: yes
  }  # dimension entity__user__office_address

  dimension: entity__user__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.office_address.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__office_address__country_or_region

  dimension: entity__user__office_address__name {
    type: string
    sql: ${TABLE}.entity.user.office_address.name ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__office_address__name

  dimension: entity__user__office_address__state {
    type: string
    sql: ${TABLE}.entity.user.office_address.state ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__office_address__state

  dimension: entity__user__phone_numbers {
    hidden: yes
  }  # dimension entity__user__phone_numbers

  dimension: entity__user__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.user.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension entity__user__product_object_id

  dimension: entity__user__role_description {
    type: string
    sql: ${TABLE}.entity.user.role_description ;;
    group_label: "relations"
    group_item_label: "relations.entity.user.role_description [D]"
    label: "relations.entity.user.role_description"
    view_label: "Entity"
    description: "System role description for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_description

  dimension: entity__user__title {
    type: string
    sql: ${TABLE}.entity.user.title ;;
    group_label: "relations"
    label: "relations.entity.user.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension entity__user__title

  dimension: entity__user__user_authentication_status {
    type: number
    sql: ${TABLE}.entity.user.user_authentication_status ;;
    group_label: "relations"
    label: "relations.entity.user.user_authentication_status"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status

  dimension: entity__user__user_authentication_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DELETED", "NO_ACTIVE_CREDENTIALS", "SUSPENDED", "UNKNOWN_AUTHENTICATION_STATUS"]
    sql: CASE ${TABLE}.entity.user.user_authentication_status WHEN 0 THEN 'UNKNOWN_AUTHENTICATION_STATUS' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'SUSPENDED' WHEN 3 THEN 'NO_ACTIVE_CREDENTIALS' WHEN 4 THEN 'DELETED' END ;;
    group_label: "relations"
    label: "relations.entity.user.user_authentication_status_enum_name"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status_enum_name

  dimension: entity__user__user_display_name {
    type: string
    sql: ${TABLE}.entity.user.user_display_name ;;
    group_label: "relations"
    label: "relations.entity.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__user__user_display_name

  dimension: entity__user__userid {
    type: string
    sql: ${TABLE}.entity.user.userid ;;
    group_label: "relations"
    label: "relations.entity.user.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension entity__user__userid

  dimension: entity__user__windows_sid {
    type: string
    sql: ${TABLE}.entity.user.windows_sid ;;
    group_label: "relations"
    label: "relations.entity.user.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension entity__user__windows_sid

  dimension: entity__user_management_chain {
    hidden: yes
  }  # dimension entity__user_management_chain

  dimension: entity_type {
    type: number
    sql: ${TABLE}.entity_type ;;
    group_label: "relations"
    label: "relations.entity_type"
    view_label: "Entity"
    description: "Type of the related entity (b) in this relationship."
  }  # dimension entity_type

  dimension: entity_type_enum_name {
    type: string
    suggestions: ["ASSET", "DOMAIN_NAME", "FILE", "GROUP", "IP_ADDRESS", "METRIC", "MUTEX", "RESOURCE", "UNKNOWN_ENTITYTYPE", "URL", "USER"]
    sql: CASE ${TABLE}.entity_type WHEN 0 THEN 'UNKNOWN_ENTITYTYPE' WHEN 1 THEN 'ASSET' WHEN 10000 THEN 'USER' WHEN 10001 THEN 'GROUP' WHEN 2 THEN 'RESOURCE' WHEN 3 THEN 'IP_ADDRESS' WHEN 4 THEN 'FILE' WHEN 5 THEN 'DOMAIN_NAME' WHEN 6 THEN 'URL' WHEN 7 THEN 'MUTEX' WHEN 8 THEN 'METRIC' END ;;
    group_label: "relations"
    label: "relations.entity_type_enum_name"
    view_label: "Entity"
    description: "Type of the related entity (b) in this relationship."
  }  # dimension entity_type_enum_name

  dimension: relationship {
    type: number
    sql: ${TABLE}.relationship ;;
    group_label: "relations"
    label: "relations.relationship"
    view_label: "Entity"
    description: "Type of relationship."
  }  # dimension relationship

  dimension: relationship_enum_name {
    type: string
    suggestions: ["ADMINISTERS", "CONTACTS", "DOWNLOADED_FROM", "EXECUTES", "MEMBER", "OWNS", "RELATIONSHIP_UNSPECIFIED"]
    sql: CASE ${TABLE}.relationship WHEN 0 THEN 'RELATIONSHIP_UNSPECIFIED' WHEN 1 THEN 'OWNS' WHEN 2 THEN 'ADMINISTERS' WHEN 3 THEN 'MEMBER' WHEN 4 THEN 'EXECUTES' WHEN 5 THEN 'DOWNLOADED_FROM' WHEN 6 THEN 'CONTACTS' END ;;
    group_label: "relations"
    label: "relations.relationship_enum_name"
    view_label: "Entity"
    description: "Type of relationship."
  }  # dimension relationship_enum_name

}  # view entity_graph__relations

explore: entity_graph {
  ### BEGIN googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_explore_preamble.lkml 
  label: "Entity Graph"

  required_access_grants: [
    has_chronicle_explores_enabled
  ]

  conditionally_filter: {
    filters: {
      field: entity_graph.time_filter
      value: "last 24 hours"
    }
  }

  fields: [ALL_FIELDS*,]
  sql_always_where: {% condition entity_graph.time_filter %}  _PARTITIONTIME {% endcondition %}
    AND {% condition entity_graph.time_filter %} ${metadata__collected_timestamp_raw} {% endcondition %};;

  ### END googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_explore_preamble.lkml
  join: entity_graph__additional__fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.additional}.fields) as entity_graph__additional__fields ;;
    view_label: "Entity"
  }  # join entity_graph__additional__fields

  join: entity_graph__entity__artifact__network__email__to {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.artifact.network.email.to) as entity_graph__entity__artifact__network__email__to ;;
    view_label: "Entity"
  }  # join entity_graph__entity__artifact__network__email__to

  join: entity_graph__entity__asset__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.attribute.labels) as entity_graph__entity__asset__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__attribute__labels

  join: entity_graph__entity__asset__hardware {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.hardware) as entity_graph__entity__asset__hardware ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__hardware

  join: entity_graph__entity__asset__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.ip) as entity_graph__entity__asset__ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__ip

  join: entity_graph__entity__asset__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.labels) as entity_graph__entity__asset__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__labels

  join: entity_graph__entity__asset__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.mac) as entity_graph__entity__asset__mac ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__mac

  join: entity_graph__entity__asset__nat_ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.nat_ip) as entity_graph__entity__asset__nat_ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__nat_ip

  join: entity_graph__entity__asset__software {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.software) as entity_graph__entity__asset__software ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__software

  join: entity_graph__entity__asset__software__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__asset__software.permissions}) as entity_graph__entity__asset__software__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__software__permissions

  join: entity_graph__entity__asset__vulnerabilities {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.vulnerabilities) as entity_graph__entity__asset__vulnerabilities ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__vulnerabilities

  join: entity_graph__entity__asset__vulnerabilities__about__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__asset__vulnerabilities.about}.labels) as entity_graph__entity__asset__vulnerabilities__about__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__vulnerabilities__about__labels

  join: entity_graph__entity__domain__admin__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.admin.attribute.labels) as entity_graph__entity__domain__admin__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__admin__attribute__labels

  join: entity_graph__entity__domain__billing__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.billing.attribute.labels) as entity_graph__entity__domain__billing__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__billing__attribute__labels

  join: entity_graph__entity__domain__name_server {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.name_server) as entity_graph__entity__domain__name_server ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__name_server

  join: entity_graph__entity__domain__registrant__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.registrant.attribute.labels) as entity_graph__entity__domain__registrant__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__registrant__attribute__labels

  join: entity_graph__entity__domain__registrant__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.registrant.email_addresses) as entity_graph__entity__domain__registrant__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__registrant__email_addresses

  join: entity_graph__entity__domain__tech__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.tech.attribute.labels) as entity_graph__entity__domain__tech__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__tech__attribute__labels

  join: entity_graph__entity__file__names {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.file.names) as entity_graph__entity__file__names ;;
    view_label: "Entity"
  }  # join entity_graph__entity__file__names

  join: entity_graph__entity__file__pe_file__resource {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.file.pe_file.resource) as entity_graph__entity__file__pe_file__resource ;;
    view_label: "Entity"
  }  # join entity_graph__entity__file__pe_file__resource

  join: entity_graph__entity__group__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.group.attribute.labels) as entity_graph__entity__group__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__group__attribute__labels

  join: entity_graph__entity__group__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.group.email_addresses) as entity_graph__entity__group__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__group__email_addresses

  join: entity_graph__entity__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.ip) as entity_graph__entity__ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__ip

  join: entity_graph__entity__ip_geo_artifact {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.ip_geo_artifact) as entity_graph__entity__ip_geo_artifact ;;
    view_label: "Entity"
  }  # join entity_graph__entity__ip_geo_artifact

  join: entity_graph__entity__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.labels) as entity_graph__entity__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__labels

  join: entity_graph__entity__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.mac) as entity_graph__entity__mac ;;
    view_label: "Entity"
  }  # join entity_graph__entity__mac

  join: entity_graph__entity__resource__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.resource.attribute.labels) as entity_graph__entity__resource__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__resource__attribute__labels

  join: entity_graph__entity__user__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.labels) as entity_graph__entity__user__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__labels

  join: entity_graph__entity__user__attribute__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.permissions) as entity_graph__entity__user__attribute__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__permissions

  join: entity_graph__entity__user__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.roles) as entity_graph__entity__user__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__roles

  join: entity_graph__entity__user__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.department) as entity_graph__entity__user__department ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__department

  join: entity_graph__entity__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.email_addresses) as entity_graph__entity__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__email_addresses

  join: entity_graph__entity__user__group_identifiers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.group_identifiers) as entity_graph__entity__user__group_identifiers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__group_identifiers

  join: entity_graph__entity__user__managers {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.managers) as entity_graph__entity__user__managers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers

  join: entity_graph__entity__user__managers__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.attribute}.labels) as entity_graph__entity__user__managers__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__attribute__labels

  join: entity_graph__entity__user__managers__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.attribute}.roles) as entity_graph__entity__user__managers__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__attribute__roles

  join: entity_graph__entity__user__managers__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.department}) as entity_graph__entity__user__managers__department ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__department

  join: entity_graph__entity__user__managers__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.email_addresses}) as entity_graph__entity__user__managers__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__email_addresses

  join: entity_graph__entity__user__managers__group_identifiers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.group_identifiers}) as entity_graph__entity__user__managers__group_identifiers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__group_identifiers

  join: entity_graph__entity__user__managers__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.phone_numbers}) as entity_graph__entity__user__managers__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__phone_numbers

  join: entity_graph__entity__user__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.phone_numbers) as entity_graph__entity__user__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__phone_numbers

  join: entity_graph__entity__user__time_off {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.time_off) as entity_graph__entity__user__time_off ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__time_off

  join: entity_graph__entity__user_management_chain {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user_management_chain) as entity_graph__entity__user_management_chain ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user_management_chain

  join: entity_graph__entity__user_management_chain__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user_management_chain.department}) as entity_graph__entity__user_management_chain__department ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user_management_chain__department

  join: entity_graph__entity__user_management_chain__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user_management_chain.email_addresses}) as entity_graph__entity__user_management_chain__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user_management_chain__email_addresses

  join: entity_graph__metadata__event_metadata__base_labels__log_types {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.event_metadata.base_labels.log_types) as entity_graph__metadata__event_metadata__base_labels__log_types ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__event_metadata__base_labels__log_types

  join: entity_graph__metadata__event_metadata__base_labels__namespaces {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.event_metadata.base_labels.namespaces) as entity_graph__metadata__event_metadata__base_labels__namespaces ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__event_metadata__base_labels__namespaces

  join: entity_graph__metadata__source_labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.source_labels) as entity_graph__metadata__source_labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__source_labels

  join: entity_graph__metadata__threat {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.threat) as entity_graph__metadata__threat ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat

  join: entity_graph__metadata__threat__about__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.ip) as entity_graph__metadata__threat__about__ip ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__ip

  join: entity_graph__metadata__threat__about__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.labels) as entity_graph__metadata__threat__about__labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__labels

  join: entity_graph__metadata__threat__about__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.user.email_addresses) as entity_graph__metadata__threat__about__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__user__email_addresses

  join: entity_graph__metadata__threat__about__user_management_chain {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.user_management_chain) as entity_graph__metadata__threat__about__user_management_chain ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__user_management_chain

  join: entity_graph__metadata__threat__action {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.action}) as entity_graph__metadata__threat__action ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__action

  join: entity_graph__metadata__threat__action_enum_name {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.action}) as entity_graph__metadata__threat__action_enum_name ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__action_enum_name

  join: entity_graph__metadata__threat__category {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category}) as entity_graph__metadata__threat__category ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category

  join: entity_graph__metadata__threat__category_enum_name {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category}) as entity_graph__metadata__threat__category_enum_name ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category_enum_name

  join: entity_graph__metadata__threat__category_details {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category_details}) as entity_graph__metadata__threat__category_details ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category_details

  join: entity_graph__metadata__threat__detection_fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.detection_fields}) as entity_graph__metadata__threat__detection_fields ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__detection_fields

  join: entity_graph__metadata__threat__rule_labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.rule_labels}) as entity_graph__metadata__threat__rule_labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__rule_labels

  join: entity_graph__relations {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.relations}) as entity_graph__relations ;;
    view_label: "Entity"
  }  # join entity_graph__relations

  join: entity_graph__relations__entity__asset__hardware {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.hardware) as entity_graph__relations__entity__asset__hardware ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__hardware

  join: entity_graph__relations__entity__asset__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.ip) as entity_graph__relations__entity__asset__ip ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__ip

  join: entity_graph__relations__entity__asset__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.mac) as entity_graph__relations__entity__asset__mac ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__mac

  join: entity_graph__relations__entity__asset__software {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.software) as entity_graph__relations__entity__asset__software ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__software

  join: entity_graph__relations__entity__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.ip) as entity_graph__relations__entity__ip ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__ip

  join: entity_graph__relations__entity__ip_geo_artifact {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.ip_geo_artifact) as entity_graph__relations__entity__ip_geo_artifact ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__ip_geo_artifact

  join: entity_graph__relations__entity__ip_location {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.ip_location) as entity_graph__relations__entity__ip_location ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__ip_location

  join: entity_graph__relations__entity__resource__attribute__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.resource.attribute.permissions) as entity_graph__relations__entity__resource__attribute__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__resource__attribute__permissions

  join: entity_graph__relations__entity__user__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.attribute.labels) as entity_graph__relations__entity__user__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__attribute__labels

  join: entity_graph__relations__entity__user__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.attribute.roles) as entity_graph__relations__entity__user__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__attribute__roles

  join: entity_graph__relations__entity__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.email_addresses) as entity_graph__relations__entity__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__email_addresses

  join: entity_graph__relations__entity__user__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.phone_numbers) as entity_graph__relations__entity__user__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__phone_numbers

  join: entity_graph__relations__entity__user_management_chain {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user_management_chain) as entity_graph__relations__entity__user_management_chain ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user_management_chain

  join: entity_graph__relations__entity__user_management_chain__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations__entity__user_management_chain.department}) as entity_graph__relations__entity__user_management_chain__department ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user_management_chain__department

}  # explore entity_graph

