# Copyright Google Inc 2023 and onwards.
# This file was generated by proto2lkml. Do not modify it.
# Source: googlex/security/malachite/proto/external/entity.proto
### BEGIN googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_preamble.lkml 
include: "/chronicle_features.lkml"

### END googlex/security/malachite/dashboards/lookml/entity_graph/entity_graph_preamble.lkml 
view: entity_graph {
  sql_table_name: `@{ENTITY_GRAPH}`;;

  dimension: primary_key {
    primary_key: yes
    hidden: yes
    sql: CONCAT(IFNULL(${TABLE}.metadata.product_entity_id, ""), 
                IFNULL(${TABLE}.metadata.creation_timestamp.seconds,0), 
                IFNULL(${TABLE}.metadata.creation_timestamp.nanos,0), 
                IFNULL(${TABLE}.metadata.entity_type,0), 
                IFNULL(${TABLE}.metadata.vendor_name,""), 
                IFNULL(${TABLE}.metadata.product_name,""));;
  }

  measure: count {
    description: "Count of entities; COUNT(DISTINCT ...) is used."
    type: count
    view_label: "Entity"
  }

  measure: count_all {
    description: "Count of all entities; COUNT(DISTINCT ...) is not used."
    type: number
    sql: count(*) ;;
    label: "Count (all)"
    view_label: "Entity"
  }


  filter: time_filter {
    label: "metadata.collected_timestamp"
    type: date_time
    view_label: "Entity"
    description: "Filter on collected_timestamp"
  }

  dimension_group: _partitiondate {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}._PARTITIONDATE ;;
    view_label: "Entity"
  }

  dimension_group: _partitiontime {
    type: time
    timeframes: [
      raw,
      date,
      week,
      month,
      quarter,
      year
    ]
    convert_tz: no
    datatype: date
    sql: ${TABLE}._PARTITIONTIME ;;
    view_label: "Entity"
  }

  dimension: additional {
    hidden: yes
  }  # dimension additional

  dimension: additional__fields {
    hidden: yes
  }  # dimension additional__fields

  dimension: entity {
    hidden: yes
  }  # dimension entity

  dimension: entity__administrative_domain {
    type: string
    sql: ${TABLE}.entity.administrative_domain ;;
    group_label: "entity"
    label: "entity.administrative_domain"
    view_label: "Entity"
    description: "Domain which the device belongs to (for example, the Microsoft Windows domain)."
  }  # dimension entity__administrative_domain

  dimension: entity__application {
    type: string
    sql: ${TABLE}.entity.application ;;
    group_label: "entity"
    label: "entity.application"
    view_label: "Entity"
    description: "The name of an application or service. Some SSO solutions only capture the name of a target application such as \"Atlassian\" or \"Chronicle\"."
  }  # dimension entity__application

  dimension: entity__asset {
    hidden: yes
  }  # dimension entity__asset

  dimension: entity__asset__asset_id {
    type: string
    sql: ${TABLE}.entity.asset.asset_id ;;
    group_label: "entity"
    label: "entity.asset.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset__asset_id

  dimension: entity__asset__attribute {
    hidden: yes
  }  # dimension entity__asset__attribute

  dimension: entity__asset__attribute__cloud {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud

  dimension: entity__asset__attribute__cloud__availability_zone {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.availability_zone ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.availability_zone"
    view_label: "Entity"
    description: "The cloud environment availability zone (different from region which is location.name)."
  }  # dimension entity__asset__attribute__cloud__availability_zone

  dimension: entity__asset__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__asset__attribute__cloud__environment

  dimension: entity__asset__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.asset.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__asset__attribute__cloud__environment_enum_name

  dimension: entity__asset__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__project

  dimension: entity__asset__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.id [D]"
    label: "entity.asset.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__id

  dimension: entity__asset__attribute__cloud__project__name {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.project.name ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.name [D]"
    label: "entity.asset.attribute.cloud.project.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__name

  dimension: entity__asset__attribute__cloud__project__resource_type {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.project.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.resource_type [D]"
    label: "entity.asset.attribute.cloud.project.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__resource_type

  dimension: entity__asset__attribute__cloud__project__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.project.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.project.resource_type_enum_name [D]"
    label: "entity.asset.attribute.cloud.project.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__project__resource_type_enum_name

  dimension: entity__asset__attribute__cloud__vpc {
    hidden: yes
  }  # dimension entity__asset__attribute__cloud__vpc

  dimension: entity__asset__attribute__cloud__vpc__name {
    type: string
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.name ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.name [D]"
    label: "entity.asset.attribute.cloud.vpc.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__name

  dimension: entity__asset__attribute__cloud__vpc__resource_type {
    type: number
    sql: ${TABLE}.entity.asset.attribute.cloud.vpc.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.resource_type [D]"
    label: "entity.asset.attribute.cloud.vpc.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__resource_type

  dimension: entity__asset__attribute__cloud__vpc__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.asset.attribute.cloud.vpc.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "entity"
    group_item_label: "entity.asset.attribute.cloud.vpc.resource_type_enum_name [D]"
    label: "entity.asset.attribute.cloud.vpc.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__attribute__cloud__vpc__resource_type_enum_name

  dimension_group: entity__asset__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__asset__attribute__creation_time

  dimension: entity__asset__attribute__labels {
    hidden: yes
  }  # dimension entity__asset__attribute__labels

  dimension_group: entity__asset__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__asset__attribute__last_update_time

  dimension: entity__asset__category {
    type: string
    sql: ${TABLE}.entity.asset.category ;;
    group_label: "entity"
    label: "entity.asset.category"
    view_label: "Entity"
    description: "The category of the asset (e.g. \"End User Asset\", \"Workstation\", \"Server\")."
  }  # dimension entity__asset__category

  dimension_group: entity__asset__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    group_item_label: "entity.asset.creation_time [D]"
    label: "entity.asset.creation_time"
    view_label: "Entity"
    description: "Time the asset was created or provisioned. Deprecate: creation_time should be populated in Attribute as generic metadata. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__creation_time

  dimension: entity__asset__deployment_status {
    type: number
    sql: ${TABLE}.entity.asset.deployment_status ;;
    group_label: "entity"
    label: "entity.asset.deployment_status"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status

  dimension: entity__asset__deployment_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DECOMISSIONED", "DEPLOYMENT_STATUS_UNSPECIFIED", "PENDING_DECOMISSION"]
    sql: CASE ${TABLE}.entity.asset.deployment_status WHEN 0 THEN 'DEPLOYMENT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'PENDING_DECOMISSION' WHEN 3 THEN 'DECOMISSIONED' END ;;
    group_label: "entity"
    label: "entity.asset.deployment_status_enum_name"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status_enum_name

  dimension_group: entity__asset__first_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.first_discover_time"
    view_label: "Entity"
    description: "Time the asset was first discovered (by asset management/discoverability software)."
  }  # dimension entity__asset__first_discover_time

  dimension_group: entity__asset__first_seen_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_seen_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_seen_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.first_seen_time"
    view_label: "Entity"
    description: "The first observed time for an asset. The value is calculated on the basis of the first time the identifier was observed."
  }  # dimension entity__asset__first_seen_time

  dimension: entity__asset__hardware {
    hidden: yes
  }  # dimension entity__asset__hardware

  dimension: entity__asset__hostname {
    type: string
    sql: ${TABLE}.entity.asset.hostname ;;
    group_label: "entity"
    label: "entity.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension entity__asset__hostname

  dimension: entity__asset__ip {
    hidden: yes
  }  # dimension entity__asset__ip

  dimension: entity__asset__labels {
    hidden: yes
  }  # dimension entity__asset__labels

  dimension_group: entity__asset__last_boot_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_boot_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_boot_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.last_boot_time"
    view_label: "Entity"
    description: "Time the asset was last boot started."
  }  # dimension entity__asset__last_boot_time

  dimension_group: entity__asset__last_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.last_discover_time"
    view_label: "Entity"
    description: "Time the asset was last discovered (by asset management/discoverability software)."
  }  # dimension entity__asset__last_discover_time

  dimension: entity__asset__location {
    hidden: yes
  }  # dimension entity__asset__location

  dimension: entity__asset__location__city {
    type: string
    sql: ${TABLE}.entity.asset.location.city ;;
    group_label: "entity"
    label: "entity.asset.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__asset__location__city

  dimension: entity__asset__location__country_or_region {
    type: string
    sql: ${TABLE}.entity.asset.location.country_or_region ;;
    group_label: "entity"
    label: "entity.asset.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__asset__location__country_or_region

  dimension: entity__asset__location__floor_name {
    type: string
    sql: ${TABLE}.entity.asset.location.floor_name ;;
    group_label: "entity"
    label: "entity.asset.location.floor_name"
    view_label: "Entity"
    description: "Floor name, number or a combination of the two for a building. (e.g. \"1-A\")."
  }  # dimension entity__asset__location__floor_name

  dimension: entity__asset__location__name {
    type: string
    sql: ${TABLE}.entity.asset.location.name ;;
    group_label: "entity"
    label: "entity.asset.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__asset__location__name

  dimension: entity__asset__location__region_latitude {
    type: number
    sql: ${TABLE}.entity.asset.location.region_latitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.region_latitude [D]"
    label: "entity.asset.location.region_latitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__location__region_latitude

  dimension: entity__asset__location__region_longitude {
    type: number
    sql: ${TABLE}.entity.asset.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.region_longitude [D]"
    label: "entity.asset.location.region_longitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__asset__location__region_longitude

  dimension: entity__asset__location__location {
    type: location
    sql_latitude: ${TABLE}.entity.asset.location.region_latitude ;;
    sql_longitude: ${TABLE}.entity.asset.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.asset.location.location [D][L]"
    label: "entity.asset.location.location"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release [L]: This is a location field and can be used in maps."
  }  # dimension entity__asset__location__location

  dimension: entity__asset__location__state {
    type: string
    sql: ${TABLE}.entity.asset.location.state ;;
    group_label: "entity"
    label: "entity.asset.location.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__asset__location__state

  dimension: entity__asset__mac {
    hidden: yes
  }  # dimension entity__asset__mac

  dimension: entity__asset__nat_ip {
    hidden: yes
  }  # dimension entity__asset__nat_ip

  dimension: entity__asset__network_domain {
    type: string
    sql: ${TABLE}.entity.asset.network_domain ;;
    group_label: "entity"
    label: "entity.asset.network_domain"
    view_label: "Entity"
    description: "The network domain of the asset (e.g. \"corp.acme.com\")"
  }  # dimension entity__asset__network_domain

  dimension: entity__asset__platform_software {
    hidden: yes
  }  # dimension entity__asset__platform_software

  dimension: entity__asset__platform_software__platform {
    type: number
    sql: ${TABLE}.entity.asset.platform_software.platform ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform

  dimension: entity__asset__platform_software__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.asset.platform_software.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_enum_name"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform_enum_name

  dimension: entity__asset__platform_software__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_patch_level ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_patch_level"
    view_label: "Entity"
    description: "The platform software patch level ( e.g. \"Build 17134.48\", \"SP1\")."
  }  # dimension entity__asset__platform_software__platform_patch_level

  dimension: entity__asset__platform_software__platform_version {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_version ;;
    group_label: "entity"
    label: "entity.asset.platform_software.platform_version"
    view_label: "Entity"
    description: "The platform software version ( e.g. \"Microsoft Windows 1803\")."
  }  # dimension entity__asset__platform_software__platform_version

  dimension: entity__asset__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.product_object_id ;;
    group_label: "entity"
    label: "entity.asset.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID  or similar)."
  }  # dimension entity__asset__product_object_id

  dimension: entity__asset__software {
    hidden: yes
  }  # dimension entity__asset__software

  dimension_group: entity__asset__system_last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.system_last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.system_last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.system_last_update_time"
    view_label: "Entity"
    description: "Time the asset system or OS was last updated. For all other operations that are not system updates (such as resizing a vm, etc.) use Attribute.last_update_time."
  }  # dimension entity__asset__system_last_update_time

  dimension: entity__asset__type {
    type: number
    sql: ${TABLE}.entity.asset.type ;;
    group_label: "entity"
    label: "entity.asset.type"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type

  dimension: entity__asset__type_enum_name {
    type: string
    suggestions: ["IOT", "LAPTOP", "MOBILE", "NETWORK_ATTACHED_STORAGE", "PRINTER", "ROLE_UNSPECIFIED", "SCANNER", "SERVER", "TAPE_LIBRARY", "WORKSTATION"]
    sql: CASE ${TABLE}.entity.asset.type WHEN 0 THEN 'ROLE_UNSPECIFIED' WHEN 1 THEN 'WORKSTATION' WHEN 2 THEN 'LAPTOP' WHEN 3 THEN 'IOT' WHEN 4 THEN 'NETWORK_ATTACHED_STORAGE' WHEN 5 THEN 'PRINTER' WHEN 6 THEN 'SCANNER' WHEN 7 THEN 'SERVER' WHEN 8 THEN 'TAPE_LIBRARY' WHEN 9 THEN 'MOBILE' END ;;
    group_label: "entity"
    label: "entity.asset.type_enum_name"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type_enum_name

  dimension: entity__asset__vulnerabilities {
    hidden: yes
  }  # dimension entity__asset__vulnerabilities

  dimension: entity__asset_id {
    type: string
    sql: ${TABLE}.entity.asset_id ;;
    group_label: "entity"
    label: "entity.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset_id

  dimension: entity__domain {
    hidden: yes
  }  # dimension entity__domain

  dimension: entity__domain__admin {
    hidden: yes
  }  # dimension entity__domain__admin

  dimension: entity__domain__admin__attribute {
    hidden: yes
  }  # dimension entity__domain__admin__attribute

  dimension: entity__domain__admin__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__admin__attribute__labels

  dimension: entity__domain__admin__office_address {
    hidden: yes
  }  # dimension entity__domain__admin__office_address

  dimension: entity__domain__admin__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.admin.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.admin.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__admin__office_address__country_or_region

  dimension_group: entity__domain__audit_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.audit_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.audit_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.audit_update_time"
    view_label: "Entity"
    description: "Audit updated time."
  }  # dimension entity__domain__audit_update_time

  dimension: entity__domain__billing {
    hidden: yes
  }  # dimension entity__domain__billing

  dimension: entity__domain__billing__attribute {
    hidden: yes
  }  # dimension entity__domain__billing__attribute

  dimension: entity__domain__billing__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__billing__attribute__labels

  dimension: entity__domain__billing__office_address {
    hidden: yes
  }  # dimension entity__domain__billing__office_address

  dimension: entity__domain__billing__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.billing.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.billing.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__billing__office_address__country_or_region

  dimension: entity__domain__contact_email {
    type: string
    sql: ${TABLE}.entity.domain.contact_email ;;
    group_label: "entity"
    label: "entity.domain.contact_email"
    view_label: "Entity"
    description: "Contact email address."
  }  # dimension entity__domain__contact_email

  dimension_group: entity__domain__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.creation_time"
    view_label: "Entity"
    description: "Domain creation time."
  }  # dimension entity__domain__creation_time

  dimension_group: entity__domain__expiration_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.expiration_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.expiration_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.expiration_time"
    view_label: "Entity"
    description: "Expiration time."
  }  # dimension entity__domain__expiration_time

  dimension_group: entity__domain__first_seen_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.first_seen_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.first_seen_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.first_seen_time"
    view_label: "Entity"
    description: "First seen timestamp of the domain in the customer's environment."
  }  # dimension entity__domain__first_seen_time

  dimension: entity__domain__iana_registrar_id {
    type: number
    sql: ${TABLE}.entity.domain.iana_registrar_id ;;
    group_label: "entity"
    label: "entity.domain.iana_registrar_id"
    view_label: "Entity"
    description: "IANA Registrar ID.  See <a href=\"https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml\">https://www.iana.org/assignments/registrar-ids/registrar-ids.xhtml</a>"
  }  # dimension entity__domain__iana_registrar_id

  dimension: entity__domain__name {
    type: string
    sql: ${TABLE}.entity.domain.name ;;
    group_label: "entity"
    label: "entity.domain.name"
    view_label: "Entity"
    description: "The domain name."
  }  # dimension entity__domain__name

  dimension: entity__domain__name_server {
    hidden: yes
  }  # dimension entity__domain__name_server

  dimension: entity__domain__registrant {
    hidden: yes
  }  # dimension entity__domain__registrant

  dimension: entity__domain__registrant__attribute {
    hidden: yes
  }  # dimension entity__domain__registrant__attribute

  dimension: entity__domain__registrant__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__registrant__attribute__labels

  dimension: entity__domain__registrant__company_name {
    type: string
    sql: ${TABLE}.entity.domain.registrant.company_name ;;
    group_label: "entity"
    label: "entity.domain.registrant.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__domain__registrant__company_name

  dimension: entity__domain__registrant__email_addresses {
    hidden: yes
  }  # dimension entity__domain__registrant__email_addresses

  dimension: entity__domain__registrant__office_address {
    hidden: yes
  }  # dimension entity__domain__registrant__office_address

  dimension: entity__domain__registrant__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.registrant.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.registrant.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__registrant__office_address__country_or_region

  dimension: entity__domain__registrant__office_address__state {
    type: string
    sql: ${TABLE}.entity.domain.registrant.office_address.state ;;
    group_label: "entity"
    label: "entity.domain.registrant.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__domain__registrant__office_address__state

  dimension: entity__domain__registrant__user_display_name {
    type: string
    sql: ${TABLE}.entity.domain.registrant.user_display_name ;;
    group_label: "entity"
    label: "entity.domain.registrant.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__domain__registrant__user_display_name

  dimension: entity__domain__registrar {
    type: string
    sql: ${TABLE}.entity.domain.registrar ;;
    group_label: "entity"
    label: "entity.domain.registrar"
    view_label: "Entity"
    description: "Registrar name - e.g. \"Wild West Domains, Inc. (R120-LROR)\", \"GoDaddy.com, LLC\", \"PDR LTD. D/B/A PUBLICDOMAINREGISTRY.COM\", etc."
  }  # dimension entity__domain__registrar

  dimension: entity__domain__registry_data_raw_text {
    type: string
    sql: ${TABLE}.entity.domain.registry_data_raw_text ;;
    group_label: "entity"
    label: "entity.domain.registry_data_raw_text"
    view_label: "Entity"
    description: "Registry Data raw text"
  }  # dimension entity__domain__registry_data_raw_text

  dimension: entity__domain__status {
    type: string
    sql: ${TABLE}.entity.domain.status ;;
    group_label: "entity"
    label: "entity.domain.status"
    view_label: "Entity"
    description: "Domain status. See <a href=\"https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en\">https://www.icann.org/resources/pages/epp-status-codes-2014-06-16-en</a> for meanings of possible values"
  }  # dimension entity__domain__status

  dimension: entity__domain__tech {
    hidden: yes
  }  # dimension entity__domain__tech

  dimension: entity__domain__tech__attribute {
    hidden: yes
  }  # dimension entity__domain__tech__attribute

  dimension: entity__domain__tech__attribute__labels {
    hidden: yes
  }  # dimension entity__domain__tech__attribute__labels

  dimension: entity__domain__tech__office_address {
    hidden: yes
  }  # dimension entity__domain__tech__office_address

  dimension: entity__domain__tech__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.domain.tech.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.domain.tech.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__domain__tech__office_address__country_or_region

  dimension_group: entity__domain__update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.domain.update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.domain.update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.domain.update_time"
    view_label: "Entity"
    description: "Last updated time."
  }  # dimension entity__domain__update_time

  dimension: entity__domain__whois_record_raw_text {
    type: string
    sql: ${TABLE}.entity.domain.whois_record_raw_text ;;
    group_label: "entity"
    label: "entity.domain.whois_record_raw_text"
    view_label: "Entity"
    description: "unix epoch of the time when the domaintools first catches the record, or the time when domaintools catch the record changes. domaintools_time_ms is also used as the bigtable timestamp."
  }  # dimension entity__domain__whois_record_raw_text

  dimension: entity__domain__whois_server {
    type: string
    sql: ${TABLE}.entity.domain.whois_server ;;
    group_label: "entity"
    label: "entity.domain.whois_server"
    view_label: "Entity"
    description: "Whois server name."
  }  # dimension entity__domain__whois_server

  dimension: entity__file {
    hidden: yes
  }  # dimension entity__file

  dimension: entity__file__file_type {
    type: number
    sql: ${TABLE}.entity.file.file_type ;;
    group_label: "entity"
    label: "entity.file.file_type"
    view_label: "Entity"
    description: "FileType field."
  }  # dimension entity__file__file_type

  dimension: entity__file__file_type_enum_name {
    type: string
    suggestions: ["FILE_TYPE_ACE", "FILE_TYPE_ANDROID", "FILE_TYPE_APPLE", "FILE_TYPE_APPLEDOUBLE", "FILE_TYPE_APPLESCRIPT", "FILE_TYPE_APPLESCRIPT_COMPILED", "FILE_TYPE_APPLESINGLE", "FILE_TYPE_APPLE_PLIST", "FILE_TYPE_ARC", "FILE_TYPE_ARJ", "FILE_TYPE_ASD", "FILE_TYPE_ASF", "FILE_TYPE_AVI", "FILE_TYPE_AWK", "FILE_TYPE_BLACKHOLE", "FILE_TYPE_BMP", "FILE_TYPE_BZIP", "FILE_TYPE_C", "FILE_TYPE_CAB", "FILE_TYPE_CAP", "FILE_TYPE_CHM", "FILE_TYPE_COFF", "FILE_TYPE_COOKIE", "FILE_TYPE_CPP", "FILE_TYPE_CRX", "FILE_TYPE_DEB", "FILE_TYPE_DIB", "FILE_TYPE_DIVX", "FILE_TYPE_DMG", "FILE_TYPE_DOC", "FILE_TYPE_DOCX", "FILE_TYPE_DOS_COM", "FILE_TYPE_DOS_EXE", "FILE_TYPE_DYALOG", "FILE_TYPE_DZIP", "FILE_TYPE_EBOOK", "FILE_TYPE_ELF", "FILE_TYPE_EMAIL_TYPE", "FILE_TYPE_EMF", "FILE_TYPE_EOT", "FILE_TYPE_EPS", "FILE_TYPE_FLA", "FILE_TYPE_FLAC", "FILE_TYPE_FLC", "FILE_TYPE_FLI", "FILE_TYPE_FLV", "FILE_TYPE_FORTRAN", "FILE_TYPE_FPX", "FILE_TYPE_GIF", "FILE_TYPE_GIMP", "FILE_TYPE_GUL", "FILE_TYPE_GZIP", "FILE_TYPE_HTML", "FILE_TYPE_HWP", "FILE_TYPE_ICO", "FILE_TYPE_IN_DESIGN", "FILE_TYPE_IPHONE", "FILE_TYPE_ISOIMAGE", "FILE_TYPE_JAR", "FILE_TYPE_JAVA", "FILE_TYPE_JAVASCRIPT", "FILE_TYPE_JAVA_BYTECODE", "FILE_TYPE_JNG", "FILE_TYPE_JPEG", "FILE_TYPE_KGB", "FILE_TYPE_LATEX", "FILE_TYPE_LINUX", "FILE_TYPE_LINUX_KERNEL", "FILE_TYPE_LNK", "FILE_TYPE_MACH_O", "FILE_TYPE_MACINTOSH", "FILE_TYPE_MACINTOSH_HFS", "FILE_TYPE_MACINTOSH_LIB", "FILE_TYPE_MIDI", "FILE_TYPE_MOV", "FILE_TYPE_MP3", "FILE_TYPE_MP4", "FILE_TYPE_MPEG", "FILE_TYPE_MSCOMPRESS", "FILE_TYPE_MSI", "FILE_TYPE_NE_DLL", "FILE_TYPE_NE_EXE", "FILE_TYPE_ODF", "FILE_TYPE_ODG", "FILE_TYPE_ODP", "FILE_TYPE_ODS", "FILE_TYPE_ODT", "FILE_TYPE_OGG", "FILE_TYPE_OUTLOOK", "FILE_TYPE_PALMOS", "FILE_TYPE_PASCAL", "FILE_TYPE_PDF", "FILE_TYPE_PERL", "FILE_TYPE_PE_DLL", "FILE_TYPE_PE_EXE", "FILE_TYPE_PHP", "FILE_TYPE_PKG", "FILE_TYPE_PNG", "FILE_TYPE_POWERSHELL", "FILE_TYPE_PPSX", "FILE_TYPE_PPT", "FILE_TYPE_PPTX", "FILE_TYPE_PS", "FILE_TYPE_PSD", "FILE_TYPE_PYTHON", "FILE_TYPE_QUICKTIME", "FILE_TYPE_RAR", "FILE_TYPE_RM", "FILE_TYPE_ROM", "FILE_TYPE_RPM", "FILE_TYPE_RTF", "FILE_TYPE_RUBY", "FILE_TYPE_RZIP", "FILE_TYPE_SCRIPT", "FILE_TYPE_SEVENZIP", "FILE_TYPE_SHELLSCRIPT", "FILE_TYPE_SVG", "FILE_TYPE_SWF", "FILE_TYPE_SYMBIAN", "FILE_TYPE_T3GP", "FILE_TYPE_TAR", "FILE_TYPE_TARGA", "FILE_TYPE_TEXT", "FILE_TYPE_TIFF", "FILE_TYPE_TORRENT", "FILE_TYPE_TTF", "FILE_TYPE_UNSPECIFIED", "FILE_TYPE_VBA", "FILE_TYPE_WAV", "FILE_TYPE_WEBP", "FILE_TYPE_WINCE", "FILE_TYPE_WMA", "FILE_TYPE_WMV", "FILE_TYPE_WOFF", "FILE_TYPE_XLS", "FILE_TYPE_XLSX", "FILE_TYPE_XML", "FILE_TYPE_XPI", "FILE_TYPE_XWD", "FILE_TYPE_ZIP", "FILE_TYPE_ZLIB"]
    sql: CASE ${TABLE}.entity.file.file_type WHEN 0 THEN 'FILE_TYPE_UNSPECIFIED' WHEN 1 THEN 'FILE_TYPE_PE_EXE' WHEN 2 THEN 'FILE_TYPE_PE_DLL' WHEN 3 THEN 'FILE_TYPE_MSI' WHEN 10 THEN 'FILE_TYPE_NE_EXE' WHEN 11 THEN 'FILE_TYPE_NE_DLL' WHEN 20 THEN 'FILE_TYPE_DOS_EXE' WHEN 21 THEN 'FILE_TYPE_DOS_COM' WHEN 30 THEN 'FILE_TYPE_COFF' WHEN 31 THEN 'FILE_TYPE_ELF' WHEN 32 THEN 'FILE_TYPE_LINUX_KERNEL' WHEN 33 THEN 'FILE_TYPE_RPM' WHEN 34 THEN 'FILE_TYPE_LINUX' WHEN 35 THEN 'FILE_TYPE_MACH_O' WHEN 36 THEN 'FILE_TYPE_JAVA_BYTECODE' WHEN 37 THEN 'FILE_TYPE_DMG' WHEN 38 THEN 'FILE_TYPE_DEB' WHEN 39 THEN 'FILE_TYPE_PKG' WHEN 50 THEN 'FILE_TYPE_LNK' WHEN 100 THEN 'FILE_TYPE_JPEG' WHEN 101 THEN 'FILE_TYPE_TIFF' WHEN 102 THEN 'FILE_TYPE_GIF' WHEN 103 THEN 'FILE_TYPE_PNG' WHEN 104 THEN 'FILE_TYPE_BMP' WHEN 105 THEN 'FILE_TYPE_GIMP' WHEN 106 THEN 'FILE_TYPE_IN_DESIGN' WHEN 107 THEN 'FILE_TYPE_PSD' WHEN 108 THEN 'FILE_TYPE_TARGA' WHEN 109 THEN 'FILE_TYPE_XWD' WHEN 110 THEN 'FILE_TYPE_DIB' WHEN 111 THEN 'FILE_TYPE_JNG' WHEN 112 THEN 'FILE_TYPE_ICO' WHEN 113 THEN 'FILE_TYPE_FPX' WHEN 114 THEN 'FILE_TYPE_EPS' WHEN 115 THEN 'FILE_TYPE_SVG' WHEN 116 THEN 'FILE_TYPE_EMF' WHEN 117 THEN 'FILE_TYPE_WEBP' WHEN 150 THEN 'FILE_TYPE_OGG' WHEN 151 THEN 'FILE_TYPE_FLC' WHEN 152 THEN 'FILE_TYPE_FLI' WHEN 153 THEN 'FILE_TYPE_MP3' WHEN 154 THEN 'FILE_TYPE_FLAC' WHEN 155 THEN 'FILE_TYPE_WAV' WHEN 156 THEN 'FILE_TYPE_MIDI' WHEN 157 THEN 'FILE_TYPE_AVI' WHEN 158 THEN 'FILE_TYPE_MPEG' WHEN 159 THEN 'FILE_TYPE_QUICKTIME' WHEN 160 THEN 'FILE_TYPE_ASF' WHEN 161 THEN 'FILE_TYPE_DIVX' WHEN 162 THEN 'FILE_TYPE_FLV' WHEN 163 THEN 'FILE_TYPE_WMA' WHEN 164 THEN 'FILE_TYPE_WMV' WHEN 165 THEN 'FILE_TYPE_RM' WHEN 166 THEN 'FILE_TYPE_MOV' WHEN 167 THEN 'FILE_TYPE_MP4' WHEN 168 THEN 'FILE_TYPE_T3GP' WHEN 200 THEN 'FILE_TYPE_PDF' WHEN 201 THEN 'FILE_TYPE_PS' WHEN 202 THEN 'FILE_TYPE_DOC' WHEN 203 THEN 'FILE_TYPE_DOCX' WHEN 204 THEN 'FILE_TYPE_PPT' WHEN 205 THEN 'FILE_TYPE_PPTX' WHEN 209 THEN 'FILE_TYPE_PPSX' WHEN 206 THEN 'FILE_TYPE_XLS' WHEN 207 THEN 'FILE_TYPE_XLSX' WHEN 208 THEN 'FILE_TYPE_RTF' WHEN 250 THEN 'FILE_TYPE_ODP' WHEN 251 THEN 'FILE_TYPE_ODS' WHEN 252 THEN 'FILE_TYPE_ODT' WHEN 253 THEN 'FILE_TYPE_HWP' WHEN 254 THEN 'FILE_TYPE_GUL' WHEN 255 THEN 'FILE_TYPE_ODF' WHEN 256 THEN 'FILE_TYPE_ODG' WHEN 260 THEN 'FILE_TYPE_EBOOK' WHEN 261 THEN 'FILE_TYPE_LATEX' WHEN 262 THEN 'FILE_TYPE_TTF' WHEN 263 THEN 'FILE_TYPE_EOT' WHEN 264 THEN 'FILE_TYPE_WOFF' WHEN 265 THEN 'FILE_TYPE_CHM' WHEN 300 THEN 'FILE_TYPE_ZIP' WHEN 301 THEN 'FILE_TYPE_GZIP' WHEN 302 THEN 'FILE_TYPE_BZIP' WHEN 303 THEN 'FILE_TYPE_RZIP' WHEN 304 THEN 'FILE_TYPE_DZIP' WHEN 305 THEN 'FILE_TYPE_SEVENZIP' WHEN 306 THEN 'FILE_TYPE_CAB' WHEN 307 THEN 'FILE_TYPE_JAR' WHEN 308 THEN 'FILE_TYPE_RAR' WHEN 309 THEN 'FILE_TYPE_MSCOMPRESS' WHEN 310 THEN 'FILE_TYPE_ACE' WHEN 311 THEN 'FILE_TYPE_ARC' WHEN 312 THEN 'FILE_TYPE_ARJ' WHEN 313 THEN 'FILE_TYPE_ASD' WHEN 314 THEN 'FILE_TYPE_BLACKHOLE' WHEN 315 THEN 'FILE_TYPE_KGB' WHEN 316 THEN 'FILE_TYPE_ZLIB' WHEN 317 THEN 'FILE_TYPE_TAR' WHEN 400 THEN 'FILE_TYPE_TEXT' WHEN 401 THEN 'FILE_TYPE_SCRIPT' WHEN 402 THEN 'FILE_TYPE_PHP' WHEN 403 THEN 'FILE_TYPE_PYTHON' WHEN 404 THEN 'FILE_TYPE_PERL' WHEN 405 THEN 'FILE_TYPE_RUBY' WHEN 406 THEN 'FILE_TYPE_C' WHEN 407 THEN 'FILE_TYPE_CPP' WHEN 408 THEN 'FILE_TYPE_JAVA' WHEN 409 THEN 'FILE_TYPE_SHELLSCRIPT' WHEN 410 THEN 'FILE_TYPE_PASCAL' WHEN 411 THEN 'FILE_TYPE_AWK' WHEN 412 THEN 'FILE_TYPE_DYALOG' WHEN 413 THEN 'FILE_TYPE_FORTRAN' WHEN 414 THEN 'FILE_TYPE_JAVASCRIPT' WHEN 415 THEN 'FILE_TYPE_POWERSHELL' WHEN 416 THEN 'FILE_TYPE_VBA' WHEN 500 THEN 'FILE_TYPE_SYMBIAN' WHEN 501 THEN 'FILE_TYPE_PALMOS' WHEN 502 THEN 'FILE_TYPE_WINCE' WHEN 503 THEN 'FILE_TYPE_ANDROID' WHEN 504 THEN 'FILE_TYPE_IPHONE' WHEN 600 THEN 'FILE_TYPE_HTML' WHEN 601 THEN 'FILE_TYPE_XML' WHEN 602 THEN 'FILE_TYPE_SWF' WHEN 603 THEN 'FILE_TYPE_FLA' WHEN 604 THEN 'FILE_TYPE_COOKIE' WHEN 605 THEN 'FILE_TYPE_TORRENT' WHEN 606 THEN 'FILE_TYPE_EMAIL_TYPE' WHEN 607 THEN 'FILE_TYPE_OUTLOOK' WHEN 700 THEN 'FILE_TYPE_CAP' WHEN 800 THEN 'FILE_TYPE_ISOIMAGE' WHEN 1000 THEN 'FILE_TYPE_APPLE' WHEN 1001 THEN 'FILE_TYPE_MACINTOSH' WHEN 1002 THEN 'FILE_TYPE_APPLESINGLE' WHEN 1003 THEN 'FILE_TYPE_APPLEDOUBLE' WHEN 1004 THEN 'FILE_TYPE_MACINTOSH_HFS' WHEN 1005 THEN 'FILE_TYPE_APPLE_PLIST' WHEN 1006 THEN 'FILE_TYPE_MACINTOSH_LIB' WHEN 1007 THEN 'FILE_TYPE_APPLESCRIPT' WHEN 1008 THEN 'FILE_TYPE_APPLESCRIPT_COMPILED' WHEN 1100 THEN 'FILE_TYPE_CRX' WHEN 1101 THEN 'FILE_TYPE_XPI' WHEN 1200 THEN 'FILE_TYPE_ROM' END ;;
    group_label: "entity"
    label: "entity.file.file_type_enum_name"
    view_label: "Entity"
    description: "FileType field."
  }  # dimension entity__file__file_type_enum_name

  dimension_group: entity__file__first_seen_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.file.first_seen_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.file.first_seen_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.file.first_seen_time"
    view_label: "Entity"
    description: "Timestamp the file was first seen in the customer's environment."
  }  # dimension entity__file__first_seen_time

  dimension: entity__file__full_path {
    type: string
    sql: ${TABLE}.entity.file.full_path ;;
    group_label: "entity"
    label: "entity.file.full_path"
    view_label: "Entity"
    description: "The full path identifying the location of the file on the system."
  }  # dimension entity__file__full_path

  dimension: entity__file__md5 {
    type: string
    sql: ${TABLE}.entity.file.md5 ;;
    group_label: "entity"
    label: "entity.file.md5"
    view_label: "Entity"
    description: "The MD5 hash of the file."
  }  # dimension entity__file__md5

  dimension: entity__file__mime_type {
    type: string
    sql: ${TABLE}.entity.file.mime_type ;;
    group_label: "entity"
    label: "entity.file.mime_type"
    view_label: "Entity"
    description: "The MIME (Multipurpose Internet Mail Extensions) type of the file, for example \"PE\", \"PDF\", \"powershell script\", etc."
  }  # dimension entity__file__mime_type

  dimension: entity__file__names {
    hidden: yes
  }  # dimension entity__file__names

  dimension: entity__file__sha1 {
    type: string
    sql: ${TABLE}.entity.file.sha1 ;;
    group_label: "entity"
    label: "entity.file.sha1"
    view_label: "Entity"
    description: "The SHA1 hash of the file."
  }  # dimension entity__file__sha1

  dimension: entity__file__sha256 {
    type: string
    sql: ${TABLE}.entity.file.sha256 ;;
    group_label: "entity"
    label: "entity.file.sha256"
    view_label: "Entity"
    description: "The SHA256 hash of the file."
  }  # dimension entity__file__sha256

  dimension: entity__file__size {
    type: number
    sql: ${TABLE}.entity.file.size ;;
    group_label: "entity"
    label: "entity.file.size"
    view_label: "Entity"
    description: "The size of the file in bytes."
  }  # dimension entity__file__size

  dimension: entity__file__ssdeep {
    type: string
    sql: ${TABLE}.entity.file.ssdeep ;;
    group_label: "entity"
    label: "entity.file.ssdeep"
    view_label: "Entity"
    description: "Ssdeep of the file"
  }  # dimension entity__file__ssdeep

  dimension: entity__file__stat_nlink {
    type: number
    sql: ${TABLE}.entity.file.stat_nlink ;;
    group_label: "entity"
    label: "entity.file.stat_nlink"
    view_label: "Entity"
    description: "Number of links to file."
  }  # dimension entity__file__stat_nlink

  dimension: entity__file__vhash {
    type: string
    sql: ${TABLE}.entity.file.vhash ;;
    group_label: "entity"
    label: "entity.file.vhash"
    view_label: "Entity"
    description: "Vhash of the file."
  }  # dimension entity__file__vhash

  dimension: entity__group {
    hidden: yes
  }  # dimension entity__group

  dimension: entity__group__attribute {
    hidden: yes
  }  # dimension entity__group__attribute

  dimension: entity__group__attribute__labels {
    hidden: yes
  }  # dimension entity__group__attribute__labels

  dimension: entity__group__email_addresses {
    hidden: yes
  }  # dimension entity__group__email_addresses

  dimension: entity__group__group_display_name {
    type: string
    sql: ${TABLE}.entity.group.group_display_name ;;
    group_label: "entity"
    label: "entity.group.group_display_name"
    view_label: "Entity"
    description: "Group display name. e.g. \"Finance\"."
  }  # dimension entity__group__group_display_name

  dimension: entity__group__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.product_object_id ;;
    group_label: "entity"
    label: "entity.group.product_object_id"
    view_label: "Entity"
    description: "Product globally unique user object identifier, such as an LDAP Object Identifier."
  }  # dimension entity__group__product_object_id

  dimension: entity__hostname {
    type: string
    sql: ${TABLE}.entity.hostname ;;
    group_label: "entity"
    label: "entity.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension entity__hostname

  dimension: entity__investigation {
    hidden: yes
  }  # dimension entity__investigation

  dimension: entity__investigation__risk_score {
    type: number
    sql: ${TABLE}.entity.investigation.risk_score ;;
    group_label: "entity"
    label: "entity.investigation.risk_score"
    view_label: "Entity"
    description: "Risk score for a finding set by an analyst."
  }  # dimension entity__investigation__risk_score

  dimension: entity__ip {
    hidden: yes
  }  # dimension entity__ip

  dimension: entity__ip_geo_artifact {
    hidden: yes
  }  # dimension entity__ip_geo_artifact

  dimension: entity__labels {
    hidden: yes
  }  # dimension entity__labels

  dimension: entity__location {
    hidden: yes
  }  # dimension entity__location

  dimension: entity__location__city {
    type: string
    sql: ${TABLE}.entity.location.city ;;
    group_label: "entity"
    label: "entity.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__location__city

  dimension: entity__location__country_or_region {
    type: string
    sql: ${TABLE}.entity.location.country_or_region ;;
    group_label: "entity"
    label: "entity.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__location__country_or_region

  dimension: entity__location__desk_name {
    type: string
    sql: ${TABLE}.entity.location.desk_name ;;
    group_label: "entity"
    label: "entity.location.desk_name"
    view_label: "Entity"
    description: "Desk name or individual location, typically for an employee in an office. (e.g. \"IN-BLR-BCPC-11-1121D\")."
  }  # dimension entity__location__desk_name

  dimension: entity__location__name {
    type: string
    sql: ${TABLE}.entity.location.name ;;
    group_label: "entity"
    label: "entity.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__location__name

  dimension: entity__location__region_latitude {
    type: number
    sql: ${TABLE}.entity.location.region_latitude ;;
    group_label: "entity"
    group_item_label: "entity.location.region_latitude [D]"
    label: "entity.location.region_latitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__location__region_latitude

  dimension: entity__location__region_longitude {
    type: number
    sql: ${TABLE}.entity.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.location.region_longitude [D]"
    label: "entity.location.region_longitude"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__location__region_longitude

  dimension: entity__location__location {
    type: location
    sql_latitude: ${TABLE}.entity.location.region_latitude ;;
    sql_longitude: ${TABLE}.entity.location.region_longitude ;;
    group_label: "entity"
    group_item_label: "entity.location.location [D][L]"
    label: "entity.location.location"
    view_label: "Entity"
    description: "Deprecated: use region_coordinates. [D]: This field is deprecated and will be removed in a future release [L]: This is a location field and can be used in maps."
  }  # dimension entity__location__location

  dimension: entity__location__state {
    type: string
    sql: ${TABLE}.entity.location.state ;;
    group_label: "entity"
    label: "entity.location.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__location__state

  dimension: entity__mac {
    hidden: yes
  }  # dimension entity__mac

  dimension: entity__namespace {
    type: string
    sql: ${TABLE}.entity.namespace ;;
    group_label: "entity"
    label: "entity.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension entity__namespace

  dimension: entity__network {
    hidden: yes
  }  # dimension entity__network

  dimension: entity__network__http {
    hidden: yes
  }  # dimension entity__network__http

  dimension: entity__network__http__user_agent {
    type: string
    sql: ${TABLE}.entity.network.http.user_agent ;;
    group_label: "entity"
    label: "entity.network.http.user_agent"
    view_label: "Entity"
    description: "The User-Agent request header which includes the application type, operating system, software vendor or software version of the requesting software user agent."
  }  # dimension entity__network__http__user_agent

  dimension: entity__network__tls {
    hidden: yes
  }  # dimension entity__network__tls

  dimension: entity__network__tls__server {
    hidden: yes
  }  # dimension entity__network__tls__server

  dimension: entity__network__tls__server__certificate {
    hidden: yes
  }  # dimension entity__network__tls__server__certificate

  dimension_group: entity__network__tls__server__certificate__not_after {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.network.tls.server.certificate.not_after.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.network.tls.server.certificate.not_after.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.network.tls.server.certificate.not_after"
    view_label: "Entity"
    description: "Indicates when the certificate is no longer valid."
  }  # dimension entity__network__tls__server__certificate__not_after

  dimension_group: entity__network__tls__server__certificate__not_before {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.network.tls.server.certificate.not_before.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.network.tls.server.certificate.not_before.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.network.tls.server.certificate.not_before"
    view_label: "Entity"
    description: "Indicates when the certificate is first valid."
  }  # dimension entity__network__tls__server__certificate__not_before

  dimension: entity__network__tls__server__certificate__serial {
    type: string
    sql: ${TABLE}.entity.network.tls.server.certificate.serial ;;
    group_label: "entity"
    label: "entity.network.tls.server.certificate.serial"
    view_label: "Entity"
    description: "Certificate serial number."
  }  # dimension entity__network__tls__server__certificate__serial

  dimension: entity__network__tls__server__certificate__sha1 {
    type: string
    sql: ${TABLE}.entity.network.tls.server.certificate.sha1 ;;
    group_label: "entity"
    label: "entity.network.tls.server.certificate.sha1"
    view_label: "Entity"
    description: "The SHA1 hash of the certificate."
  }  # dimension entity__network__tls__server__certificate__sha1

  dimension: entity__network__tls__server__certificate__subject {
    type: string
    sql: ${TABLE}.entity.network.tls.server.certificate.subject ;;
    group_label: "entity"
    label: "entity.network.tls.server.certificate.subject"
    view_label: "Entity"
    description: "Subject of the certificate."
  }  # dimension entity__network__tls__server__certificate__subject

  dimension: entity__platform {
    type: number
    sql: ${TABLE}.entity.platform ;;
    group_label: "entity"
    label: "entity.platform"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform

  dimension: entity__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "entity"
    label: "entity.platform_enum_name"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform_enum_name

  dimension: entity__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.platform_patch_level ;;
    group_label: "entity"
    label: "entity.platform_patch_level"
    view_label: "Entity"
    description: "Platform patch level. For example, \"Build 17134.48\""
  }  # dimension entity__platform_patch_level

  dimension: entity__platform_version {
    type: string
    sql: ${TABLE}.entity.platform_version ;;
    group_label: "entity"
    label: "entity.platform_version"
    view_label: "Entity"
    description: "Platform version. For example, \"Microsoft Windows 1803\"."
  }  # dimension entity__platform_version

  dimension: entity__port {
    type: number
    value_format: "#"
    sql: ${TABLE}.entity.port ;;
    group_label: "entity"
    label: "entity.port"
    view_label: "Entity"
    description: "Source or destination network port number when a specific network connection is described within an event."
  }  # dimension entity__port

  dimension: entity__registry {
    hidden: yes
  }  # dimension entity__registry

  dimension: entity__registry__registry_key {
    type: string
    sql: ${TABLE}.entity.registry.registry_key ;;
    group_label: "entity"
    label: "entity.registry.registry_key"
    view_label: "Entity"
    description: "Registry key associated with an application or system component (e.g., HKEY_, HKCU\Environment...)."
  }  # dimension entity__registry__registry_key

  dimension: entity__registry__registry_value_name {
    type: string
    sql: ${TABLE}.entity.registry.registry_value_name ;;
    group_label: "entity"
    label: "entity.registry.registry_value_name"
    view_label: "Entity"
    description: "Name of the registry value associated with an application or system component (e.g. TEMP)."
  }  # dimension entity__registry__registry_value_name

  dimension: entity__resource {
    hidden: yes
  }  # dimension entity__resource

  dimension: entity__resource__attribute {
    hidden: yes
  }  # dimension entity__resource__attribute

  dimension: entity__resource__attribute__cloud {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud

  dimension: entity__resource__attribute__cloud__availability_zone {
    type: string
    sql: ${TABLE}.entity.resource.attribute.cloud.availability_zone ;;
    group_label: "entity"
    label: "entity.resource.attribute.cloud.availability_zone"
    view_label: "Entity"
    description: "The cloud environment availability zone (different from region which is location.name)."
  }  # dimension entity__resource__attribute__cloud__availability_zone

  dimension: entity__resource__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.resource.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment

  dimension: entity__resource__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.resource.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment_enum_name

  dimension: entity__resource__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud__project

  dimension: entity__resource__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.resource.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.id [D]"
    label: "entity.resource.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__id

  dimension: entity__resource__attribute__cloud__project__name {
    type: string
    sql: ${TABLE}.entity.resource.attribute.cloud.project.name ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.name [D]"
    label: "entity.resource.attribute.cloud.project.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__name

  dimension: entity__resource__attribute__cloud__project__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.project.resource_type ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.resource_type [D]"
    label: "entity.resource.attribute.cloud.project.resource_type"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__resource_type

  dimension: entity__resource__attribute__cloud__project__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.project.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "entity"
    group_item_label: "entity.resource.attribute.cloud.project.resource_type_enum_name [D]"
    label: "entity.resource.attribute.cloud.project.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__attribute__cloud__project__resource_type_enum_name

  dimension_group: entity__resource__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.resource.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.resource.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.resource.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__resource__attribute__creation_time

  dimension: entity__resource__attribute__labels {
    hidden: yes
  }  # dimension entity__resource__attribute__labels

  dimension_group: entity__resource__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.resource.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.resource.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.resource.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__resource__attribute__last_update_time

  dimension: entity__resource__attribute__permissions {
    hidden: yes
  }  # dimension entity__resource__attribute__permissions

  dimension: entity__resource__name {
    type: string
    sql: ${TABLE}.entity.resource.name ;;
    group_label: "entity"
    label: "entity.resource.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension entity__resource__name

  dimension: entity__resource__parent {
    type: string
    sql: ${TABLE}.entity.resource.parent ;;
    group_label: "entity"
    group_item_label: "entity.resource.parent [D]"
    label: "entity.resource.parent"
    view_label: "Entity"
    description: "The parent of the resource. For a database table, the parent is the database and for a storage object, the bucket name, etc.  Deprecated: use resource_ancestors.name. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__parent

  dimension: entity__resource__product_object_id {
    type: string
    sql: ${TABLE}.entity.resource.product_object_id ;;
    group_label: "entity"
    label: "entity.resource.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension entity__resource__product_object_id

  dimension: entity__resource__resource_subtype {
    type: string
    sql: ${TABLE}.entity.resource.resource_subtype ;;
    group_label: "entity"
    label: "entity.resource.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension entity__resource__resource_subtype

  dimension: entity__resource__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.resource_type ;;
    group_label: "entity"
    label: "entity.resource.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type

  dimension: entity__resource__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "entity"
    label: "entity.resource.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type_enum_name

  dimension: entity__resource__type {
    type: string
    sql: ${TABLE}.entity.resource.type ;;
    group_label: "entity"
    group_item_label: "entity.resource.type [D]"
    label: "entity.resource.type"
    view_label: "Entity"
    description: "Deprecated: use resource_type instead. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__type

  dimension: entity__resource_ancestors {
    hidden: yes
  }  # dimension entity__resource_ancestors

  dimension: entity__security_result {
    hidden: yes
  }  # dimension entity__security_result

  dimension: entity__url {
    type: string
    sql: ${TABLE}.entity.url ;;
    group_label: "entity"
    label: "entity.url"
    view_label: "Entity"
    description: "The URL."
  }  # dimension entity__url

  dimension: entity__user {
    hidden: yes
  }  # dimension entity__user

  dimension_group: entity__user__account_expiration_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.account_expiration_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.account_expiration_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.account_expiration_time"
    view_label: "Entity"
    description: "User account expiration timestamp."
  }  # dimension entity__user__account_expiration_time

  dimension_group: entity__user__account_lockout_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.account_lockout_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.account_lockout_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.account_lockout_time"
    view_label: "Entity"
    description: "User account lockout timestamp."
  }  # dimension entity__user__account_lockout_time

  dimension: entity__user__account_type {
    type: number
    sql: ${TABLE}.entity.user.account_type ;;
    group_label: "entity"
    label: "entity.user.account_type"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type

  dimension: entity__user__account_type_enum_name {
    type: string
    suggestions: ["ACCOUNT_TYPE_UNSPECIFIED", "CLOUD_ACCOUNT_TYPE", "DEFAULT_ACCOUNT_TYPE", "DOMAIN_ACCOUNT_TYPE", "LOCAL_ACCOUNT_TYPE", "SERVICE_ACCOUNT_TYPE"]
    sql: CASE ${TABLE}.entity.user.account_type WHEN 0 THEN 'ACCOUNT_TYPE_UNSPECIFIED' WHEN 1 THEN 'DOMAIN_ACCOUNT_TYPE' WHEN 2 THEN 'LOCAL_ACCOUNT_TYPE' WHEN 3 THEN 'CLOUD_ACCOUNT_TYPE' WHEN 4 THEN 'SERVICE_ACCOUNT_TYPE' WHEN 5 THEN 'DEFAULT_ACCOUNT_TYPE' END ;;
    group_label: "entity"
    label: "entity.user.account_type_enum_name"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type_enum_name

  dimension: entity__user__attribute {
    hidden: yes
  }  # dimension entity__user__attribute

  dimension: entity__user__attribute__cloud {
    hidden: yes
  }  # dimension entity__user__attribute__cloud

  dimension: entity__user__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.user.attribute.cloud.environment ;;
    group_label: "entity"
    label: "entity.user.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment

  dimension: entity__user__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.user.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "entity"
    label: "entity.user.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment_enum_name

  dimension: entity__user__attribute__cloud__project {
    hidden: yes
  }  # dimension entity__user__attribute__cloud__project

  dimension: entity__user__attribute__cloud__project__id {
    type: string
    sql: ${TABLE}.entity.user.attribute.cloud.project.id ;;
    group_label: "entity"
    group_item_label: "entity.user.attribute.cloud.project.id [D]"
    label: "entity.user.attribute.cloud.project.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__attribute__cloud__project__id

  dimension_group: entity__user__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension entity__user__attribute__creation_time

  dimension: entity__user__attribute__labels {
    hidden: yes
  }  # dimension entity__user__attribute__labels

  dimension_group: entity__user__attribute__last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.attribute.last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.attribute.last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.attribute.last_update_time"
    view_label: "Entity"
    description: "Time the resource or entity was last updated."
  }  # dimension entity__user__attribute__last_update_time

  dimension: entity__user__attribute__permissions {
    hidden: yes
  }  # dimension entity__user__attribute__permissions

  dimension: entity__user__attribute__roles {
    hidden: yes
  }  # dimension entity__user__attribute__roles

  dimension: entity__user__company_name {
    type: string
    sql: ${TABLE}.entity.user.company_name ;;
    group_label: "entity"
    label: "entity.user.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__user__company_name

  dimension: entity__user__department {
    hidden: yes
  }  # dimension entity__user__department

  dimension: entity__user__email_addresses {
    hidden: yes
  }  # dimension entity__user__email_addresses

  dimension: entity__user__employee_id {
    type: string
    sql: ${TABLE}.entity.user.employee_id ;;
    group_label: "entity"
    label: "entity.user.employee_id"
    view_label: "Entity"
    description: "Human capital management identifier."
  }  # dimension entity__user__employee_id

  dimension: entity__user__first_name {
    type: string
    sql: ${TABLE}.entity.user.first_name ;;
    group_label: "entity"
    label: "entity.user.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension entity__user__first_name

  dimension: entity__user__group_identifiers {
    hidden: yes
  }  # dimension entity__user__group_identifiers

  dimension_group: entity__user__hire_date {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.hire_date.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.hire_date.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.hire_date"
    view_label: "Entity"
    description: "User job employment hire date."
  }  # dimension entity__user__hire_date

  dimension_group: entity__user__last_bad_password_attempt_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.last_bad_password_attempt_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.last_bad_password_attempt_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.last_bad_password_attempt_time"
    view_label: "Entity"
    description: "User last bad password attempt timestamp."
  }  # dimension entity__user__last_bad_password_attempt_time

  dimension_group: entity__user__last_login_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.last_login_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.last_login_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.last_login_time"
    view_label: "Entity"
    description: "User last login timestamp."
  }  # dimension entity__user__last_login_time

  dimension: entity__user__last_name {
    type: string
    sql: ${TABLE}.entity.user.last_name ;;
    group_label: "entity"
    label: "entity.user.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension entity__user__last_name

  dimension_group: entity__user__last_password_change_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.last_password_change_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.last_password_change_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.last_password_change_time"
    view_label: "Entity"
    description: "User last password change timestamp."
  }  # dimension entity__user__last_password_change_time

  dimension: entity__user__managers {
    hidden: yes
  }  # dimension entity__user__managers

  dimension: entity__user__middle_name {
    type: string
    sql: ${TABLE}.entity.user.middle_name ;;
    group_label: "entity"
    label: "entity.user.middle_name"
    view_label: "Entity"
    description: "Middle name of the user."
  }  # dimension entity__user__middle_name

  dimension: entity__user__office_address {
    hidden: yes
  }  # dimension entity__user__office_address

  dimension: entity__user__office_address__city {
    type: string
    sql: ${TABLE}.entity.user.office_address.city ;;
    group_label: "entity"
    label: "entity.user.office_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__user__office_address__city

  dimension: entity__user__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.office_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__office_address__country_or_region

  dimension: entity__user__office_address__floor_name {
    type: string
    sql: ${TABLE}.entity.user.office_address.floor_name ;;
    group_label: "entity"
    label: "entity.user.office_address.floor_name"
    view_label: "Entity"
    description: "Floor name, number or a combination of the two for a building. (e.g. \"1-A\")."
  }  # dimension entity__user__office_address__floor_name

  dimension: entity__user__office_address__name {
    type: string
    sql: ${TABLE}.entity.user.office_address.name ;;
    group_label: "entity"
    label: "entity.user.office_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__office_address__name

  dimension: entity__user__office_address__state {
    type: string
    sql: ${TABLE}.entity.user.office_address.state ;;
    group_label: "entity"
    label: "entity.user.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__office_address__state

  dimension: entity__user__personal_address {
    hidden: yes
  }  # dimension entity__user__personal_address

  dimension: entity__user__personal_address__city {
    type: string
    sql: ${TABLE}.entity.user.personal_address.city ;;
    group_label: "entity"
    label: "entity.user.personal_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension entity__user__personal_address__city

  dimension: entity__user__personal_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.personal_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.personal_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__personal_address__country_or_region

  dimension: entity__user__personal_address__name {
    type: string
    sql: ${TABLE}.entity.user.personal_address.name ;;
    group_label: "entity"
    label: "entity.user.personal_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__personal_address__name

  dimension: entity__user__personal_address__state {
    type: string
    sql: ${TABLE}.entity.user.personal_address.state ;;
    group_label: "entity"
    label: "entity.user.personal_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__personal_address__state

  dimension: entity__user__phone_numbers {
    hidden: yes
  }  # dimension entity__user__phone_numbers

  dimension: entity__user__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.product_object_id ;;
    group_label: "entity"
    label: "entity.user.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension entity__user__product_object_id

  dimension: entity__user__role_description {
    type: string
    sql: ${TABLE}.entity.user.role_description ;;
    group_label: "entity"
    group_item_label: "entity.user.role_description [D]"
    label: "entity.user.role_description"
    view_label: "Entity"
    description: "System role description for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_description

  dimension: entity__user__role_name {
    type: string
    sql: ${TABLE}.entity.user.role_name ;;
    group_label: "entity"
    group_item_label: "entity.user.role_name [D]"
    label: "entity.user.role_name"
    view_label: "Entity"
    description: "System role name for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_name

  dimension_group: entity__user__termination_date {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.termination_date.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.termination_date.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.termination_date"
    view_label: "Entity"
    description: "User job employment termination date."
  }  # dimension entity__user__termination_date

  dimension: entity__user__time_off {
    hidden: yes
  }  # dimension entity__user__time_off

  dimension: entity__user__title {
    type: string
    sql: ${TABLE}.entity.user.title ;;
    group_label: "entity"
    label: "entity.user.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension entity__user__title

  dimension: entity__user__user_authentication_status {
    type: number
    sql: ${TABLE}.entity.user.user_authentication_status ;;
    group_label: "entity"
    label: "entity.user.user_authentication_status"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status

  dimension: entity__user__user_authentication_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DELETED", "NO_ACTIVE_CREDENTIALS", "SUSPENDED", "UNKNOWN_AUTHENTICATION_STATUS"]
    sql: CASE ${TABLE}.entity.user.user_authentication_status WHEN 0 THEN 'UNKNOWN_AUTHENTICATION_STATUS' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'SUSPENDED' WHEN 3 THEN 'NO_ACTIVE_CREDENTIALS' WHEN 4 THEN 'DELETED' END ;;
    group_label: "entity"
    label: "entity.user.user_authentication_status_enum_name"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status_enum_name

  dimension: entity__user__user_display_name {
    type: string
    sql: ${TABLE}.entity.user.user_display_name ;;
    group_label: "entity"
    label: "entity.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__user__user_display_name

  dimension: entity__user__user_role {
    type: number
    sql: ${TABLE}.entity.user.user_role ;;
    group_label: "entity"
    group_item_label: "entity.user.user_role [D]"
    label: "entity.user.user_role"
    view_label: "Entity"
    description: "System role for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__user_role

  dimension: entity__user__user_role_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "UNKNOWN_ROLE"]
    sql: CASE ${TABLE}.entity.user.user_role WHEN 0 THEN 'UNKNOWN_ROLE' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    group_item_label: "entity.user.user_role_enum_name [D]"
    label: "entity.user.user_role_enum_name"
    view_label: "Entity"
    description: "System role for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__user_role_enum_name

  dimension: entity__user__userid {
    type: string
    sql: ${TABLE}.entity.user.userid ;;
    group_label: "entity"
    label: "entity.user.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension entity__user__userid

  dimension: entity__user__windows_sid {
    type: string
    sql: ${TABLE}.entity.user.windows_sid ;;
    group_label: "entity"
    label: "entity.user.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension entity__user__windows_sid

  dimension: metadata {
    hidden: yes
  }  # dimension metadata

  dimension_group: metadata__collected_timestamp {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.collected_timestamp.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.collected_timestamp.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.collected_timestamp"
    view_label: "Entity"
    description: "GMT timestamp when the entity information was collected by the vendor's local collection infrastructure."
  }  # dimension metadata__collected_timestamp

  dimension_group: metadata__creation_timestamp {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.creation_timestamp.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.creation_timestamp.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.creation_timestamp"
    view_label: "Entity"
    description: "GMT timestamp when the entity described by the product_entity_id was created on the system where data was collected."
  }  # dimension metadata__creation_timestamp

  dimension: metadata__description {
    type: string
    sql: ${TABLE}.metadata.description ;;
    group_label: "metadata"
    label: "metadata.description"
    view_label: "Entity"
    description: "Human-readable description of the entity."
  }  # dimension metadata__description

  dimension: metadata__entity_type {
    type: number
    sql: ${TABLE}.metadata.entity_type ;;
    group_label: "metadata"
    label: "metadata.entity_type"
    view_label: "Entity"
    description: "Entity type. If an entity has multiple possible types, this specifies the most specific type."
  }  # dimension metadata__entity_type

  dimension: metadata__entity_type_enum_name {
    type: string
    suggestions: ["ASSET", "DOMAIN_NAME", "FILE", "GROUP", "IP_ADDRESS", "METRIC", "MUTEX", "RESOURCE", "UNKNOWN_ENTITYTYPE", "URL", "USER"]
    sql: CASE ${TABLE}.metadata.entity_type WHEN 0 THEN 'UNKNOWN_ENTITYTYPE' WHEN 1 THEN 'ASSET' WHEN 10000 THEN 'USER' WHEN 10001 THEN 'GROUP' WHEN 2 THEN 'RESOURCE' WHEN 3 THEN 'IP_ADDRESS' WHEN 4 THEN 'FILE' WHEN 5 THEN 'DOMAIN_NAME' WHEN 6 THEN 'URL' WHEN 7 THEN 'MUTEX' WHEN 8 THEN 'METRIC' END ;;
    group_label: "metadata"
    label: "metadata.entity_type_enum_name"
    view_label: "Entity"
    description: "Entity type. If an entity has multiple possible types, this specifies the most specific type."
  }  # dimension metadata__entity_type_enum_name

  dimension: metadata__event_metadata {
    hidden: yes
  }  # dimension metadata__event_metadata

  dimension: metadata__event_metadata__base_labels {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels

  dimension: metadata__event_metadata__base_labels__ingestion_kv_labels {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels__ingestion_kv_labels

  dimension: metadata__event_metadata__base_labels__log_types {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels__log_types

  dimension: metadata__event_metadata__base_labels__namespaces {
    hidden: yes
  }  # dimension metadata__event_metadata__base_labels__namespaces

  dimension: metadata__feed {
    type: string
    sql: ${TABLE}.metadata.feed ;;
    group_label: "metadata"
    label: "metadata.feed"
    view_label: "Entity"
    description: "Vendor feed name for a threat indicator feed."
  }  # dimension metadata__feed

  dimension_group: metadata__interval {
    type: duration
    intervals: [ second, minute, hour ]
    sql_start: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.interval.start_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.interval.start_time.nanos,0) / 1000) as INT64)) ;;
    sql_end: TIMESTAMP_MICROS(IFNULL(${TABLE}.metadata.interval.end_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.metadata.interval.end_time.nanos,0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.interval"
    view_label: "Entity"
    description: "Valid existence time range for the version of the entity represented by this entity data."
  }  # dimension metadata__interval

  dimension: metadata__product_entity_id {
    type: string
    sql: ${TABLE}.metadata.product_entity_id ;;
    group_label: "metadata"
    label: "metadata.product_entity_id"
    view_label: "Entity"
    description: "A vendor-specific identifier that uniquely identifies the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension metadata__product_entity_id

  dimension: metadata__product_name {
    type: string
    sql: ${TABLE}.metadata.product_name ;;
    group_label: "metadata"
    label: "metadata.product_name"
    view_label: "Entity"
    description: "Product name that produced the entity information."
  }  # dimension metadata__product_name

  dimension: metadata__product_version {
    type: string
    sql: ${TABLE}.metadata.product_version ;;
    group_label: "metadata"
    label: "metadata.product_version"
    view_label: "Entity"
    description: "Version of the product that produced the entity information."
  }  # dimension metadata__product_version

  dimension: metadata__source_labels {
    hidden: yes
  }  # dimension metadata__source_labels

  dimension: metadata__source_type {
    type: number
    sql: ${TABLE}.metadata.source_type ;;
    group_label: "metadata"
    label: "metadata.source_type"
    view_label: "Entity"
    description: "The source of the entity."
  }  # dimension metadata__source_type

  dimension: metadata__source_type_enum_name {
    type: string
    suggestions: ["DERIVED_CONTEXT", "ENTITY_CONTEXT", "GLOBAL_CONTEXT", "SOURCE_TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.metadata.source_type WHEN 0 THEN 'SOURCE_TYPE_UNSPECIFIED' WHEN 1 THEN 'ENTITY_CONTEXT' WHEN 2 THEN 'DERIVED_CONTEXT' WHEN 3 THEN 'GLOBAL_CONTEXT' END ;;
    group_label: "metadata"
    label: "metadata.source_type_enum_name"
    view_label: "Entity"
    description: "The source of the entity."
  }  # dimension metadata__source_type_enum_name

  dimension: metadata__threat {
    hidden: yes
  }  # dimension metadata__threat

  dimension: metadata__vendor_name {
    type: string
    sql: ${TABLE}.metadata.vendor_name ;;
    group_label: "metadata"
    label: "metadata.vendor_name"
    view_label: "Entity"
    description: "Vendor name of the product that produced the entity information."
  }  # dimension metadata__vendor_name

  dimension: metric {
    hidden: yes
  }  # dimension metric

  dimension_group: metric__first_seen {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metric.first_seen.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metric.first_seen.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metric"
    label: "metric.first_seen"
    view_label: "Entity"
    description: "Timestamp of the first time the entity was seen in the environment."
  }  # dimension metric__first_seen

  dimension_group: metric__last_seen {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.metric.last_seen.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.metric.last_seen.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metric"
    label: "metric.last_seen"
    view_label: "Entity"
    description: "Time stamp of the last time last time the entity was seen in the environment."
  }  # dimension metric__last_seen

  dimension: metric__metric_name {
    type: number
    sql: ${TABLE}.metric.metric_name ;;
    group_label: "metric"
    label: "metric.metric_name"
    view_label: "Entity"
    description: "Name of the analytic."
  }  # dimension metric__metric_name

  dimension: metric__metric_name_enum_name {
    type: string
    suggestions: ["AUTH_ATTEMPTS_FAIL", "AUTH_ATTEMPTS_SUCCESS", "AUTH_ATTEMPTS_TOTAL", "DNS_BYTES_OUTBOUND", "DNS_QUERIES_FAIL", "DNS_QUERIES_SUCCESS", "DNS_QUERIES_TOTAL", "FILE_EXECUTIONS_FAIL", "FILE_EXECUTIONS_SUCCESS", "FILE_EXECUTIONS_TOTAL", "HTTP_QUERIES_FAIL", "HTTP_QUERIES_SUCCESS", "HTTP_QUERIES_TOTAL", "METRIC_NAME_UNSPECIFIED", "NETWORK_BYTES_INBOUND", "NETWORK_BYTES_OUTBOUND", "NETWORK_BYTES_TOTAL", "NETWORK_FLOWS_INBOUND", "NETWORK_FLOWS_OUTBOUND", "NETWORK_FLOWS_TOTAL", "WORKSPACE_AUTH_ATTEMPTS_TOTAL", "WORKSPACE_EMAILS_SENT_TOTAL", "WORKSPACE_NETWORK_BYTES_OUTBOUND", "WORKSPACE_NETWORK_BYTES_TOTAL", "WORKSPACE_TOTAL_CHANGE_ACTIONS", "WORKSPACE_TOTAL_DOWNLOAD_ACTIONS"]
    sql: CASE ${TABLE}.metric.metric_name WHEN 0 THEN 'METRIC_NAME_UNSPECIFIED' WHEN 1 THEN 'NETWORK_BYTES_INBOUND' WHEN 2 THEN 'NETWORK_BYTES_OUTBOUND' WHEN 3 THEN 'NETWORK_BYTES_TOTAL' WHEN 4 THEN 'AUTH_ATTEMPTS_SUCCESS' WHEN 5 THEN 'AUTH_ATTEMPTS_FAIL' WHEN 6 THEN 'AUTH_ATTEMPTS_TOTAL' WHEN 7 THEN 'DNS_BYTES_OUTBOUND' WHEN 8 THEN 'NETWORK_FLOWS_INBOUND' WHEN 9 THEN 'NETWORK_FLOWS_OUTBOUND' WHEN 10 THEN 'NETWORK_FLOWS_TOTAL' WHEN 11 THEN 'DNS_QUERIES_SUCCESS' WHEN 12 THEN 'DNS_QUERIES_FAIL' WHEN 13 THEN 'DNS_QUERIES_TOTAL' WHEN 14 THEN 'FILE_EXECUTIONS_SUCCESS' WHEN 15 THEN 'FILE_EXECUTIONS_FAIL' WHEN 16 THEN 'FILE_EXECUTIONS_TOTAL' WHEN 17 THEN 'HTTP_QUERIES_SUCCESS' WHEN 18 THEN 'HTTP_QUERIES_FAIL' WHEN 19 THEN 'HTTP_QUERIES_TOTAL' WHEN 20 THEN 'WORKSPACE_EMAILS_SENT_TOTAL' WHEN 21 THEN 'WORKSPACE_TOTAL_DOWNLOAD_ACTIONS' WHEN 22 THEN 'WORKSPACE_TOTAL_CHANGE_ACTIONS' WHEN 23 THEN 'WORKSPACE_AUTH_ATTEMPTS_TOTAL' WHEN 24 THEN 'WORKSPACE_NETWORK_BYTES_OUTBOUND' WHEN 25 THEN 'WORKSPACE_NETWORK_BYTES_TOTAL' END ;;
    group_label: "metric"
    label: "metric.metric_name_enum_name"
    view_label: "Entity"
    description: "Name of the analytic."
  }  # dimension metric__metric_name_enum_name

  dimension: metric__total_events {
    type: number
    sql: ${TABLE}.metric.total_events ;;
    group_label: "metric"
    label: "metric.total_events"
    view_label: "Entity"
    description: "Total number of events used to calculate the given precomputed metric."
  }  # dimension metric__total_events

  dimension: relations {
    hidden: yes
  }  # dimension relations

  dimension: risk_score {
    hidden: yes
  }  # dimension risk_score

  dimension: risk_score__risk_score {
    type: number
    sql: ${TABLE}.risk_score.risk_score ;;
    group_label: "risk_score"
    label: "risk_score.risk_score"
    view_label: "Entity"
    description: "Raw risk score for the entity."
  }  # dimension risk_score__risk_score

}  # view entity_graph

view: entity_graph__additional__fields__value__struct_value__fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "additional"
    label: "additional.fields.value.struct_value.fields.key"
    view_label: "Entity"
  }  # dimension key

}  # view entity_graph__additional__fields__value__struct_value__fields

view: entity_graph__additional__fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "additional"
    label: "additional.fields.key"
    view_label: "Entity"
  }  # dimension key

  dimension: value {
    hidden: yes
  }  # dimension value

  dimension: value__bool_value {
    type: yesno
    sql: ${TABLE}.value.bool_value ;;
    group_label: "additional"
    label: "additional.fields.value.bool_value"
    view_label: "Entity"
  }  # dimension value__bool_value

  dimension: value__null_value {
    type: number
    sql: ${TABLE}.value.null_value ;;
    group_label: "additional"
    label: "additional.fields.value.null_value"
    view_label: "Entity"
  }  # dimension value__null_value

  dimension: value__null_value_enum_name {
    type: string
    suggestions: ["NULL_VALUE"]
    sql: CASE ${TABLE}.value.null_value WHEN 0 THEN 'NULL_VALUE' END ;;
    group_label: "additional"
    label: "additional.fields.value.null_value_enum_name"
    view_label: "Entity"
  }  # dimension value__null_value_enum_name

  dimension: value__number_value {
    type: number
    sql: ${TABLE}.value.number_value ;;
    group_label: "additional"
    label: "additional.fields.value.number_value"
    view_label: "Entity"
  }  # dimension value__number_value

  dimension: value__string_value {
    type: string
    sql: ${TABLE}.value.string_value ;;
    group_label: "additional"
    label: "additional.fields.value.string_value"
    view_label: "Entity"
  }  # dimension value__string_value

  dimension: value__struct_value {
    hidden: yes
  }  # dimension value__struct_value

  dimension: value__struct_value__fields {
    hidden: yes
  }  # dimension value__struct_value__fields

}  # view entity_graph__additional__fields

view: entity_graph__entity__asset__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.asset.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.asset.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__asset__attribute__labels

view: entity_graph__entity__asset__hardware {
  dimension: cpu_model {
    type: string
    sql: ${TABLE}.cpu_model ;;
    group_label: "entity"
    label: "entity.asset.hardware.cpu_model"
    view_label: "Entity"
    description: "Model description of the hardware CPU (e.g. \"2.8 GHz Quad-Core Intel Core i5\")."
  }  # dimension cpu_model

  dimension: cpu_number_cores {
    type: number
    sql: ${TABLE}.cpu_number_cores ;;
    group_label: "entity"
    label: "entity.asset.hardware.cpu_number_cores"
    view_label: "Entity"
    description: "Number of CPU cores."
  }  # dimension cpu_number_cores

  dimension: cpu_platform {
    type: string
    sql: ${TABLE}.cpu_platform ;;
    group_label: "entity"
    label: "entity.asset.hardware.cpu_platform"
    view_label: "Entity"
    description: "Platform of the hardware CPU (e.g. \"Intel Broadwell\")."
  }  # dimension cpu_platform

  dimension: manufacturer {
    type: string
    sql: ${TABLE}.manufacturer ;;
    group_label: "entity"
    label: "entity.asset.hardware.manufacturer"
    view_label: "Entity"
    description: "Hardware manufacturer."
  }  # dimension manufacturer

  dimension: model {
    type: string
    sql: ${TABLE}.model ;;
    group_label: "entity"
    label: "entity.asset.hardware.model"
    view_label: "Entity"
    description: "Hardware model."
  }  # dimension model

  dimension: ram {
    type: number
    sql: ${TABLE}.ram ;;
    group_label: "entity"
    label: "entity.asset.hardware.ram"
    view_label: "Entity"
    description: "Amount of the hardware ramdom access memory (RAM) in Mb."
  }  # dimension ram

  dimension: serial_number {
    type: string
    sql: ${TABLE}.serial_number ;;
    group_label: "entity"
    label: "entity.asset.hardware.serial_number"
    view_label: "Entity"
    description: "Hardware serial number."
  }  # dimension serial_number

}  # view entity_graph__entity__asset__hardware

view: entity_graph__entity__asset__ip {
  dimension: entity_graph__entity__asset__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__ip
}  # view entity_graph__entity__asset__ip

view: entity_graph__entity__asset__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.asset.labels.key [D]"
    label: "entity.asset.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.asset.labels.value [D]"
    label: "entity.asset.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__asset__labels

view: entity_graph__entity__asset__mac {
  dimension: entity_graph__entity__asset__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__mac
}  # view entity_graph__entity__asset__mac

view: entity_graph__entity__asset__nat_ip {
  dimension: entity_graph__entity__asset__nat_ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.asset.nat_ip"
    view_label: "Entity"
    description: "List of NAT IP addresses associated with an asset."
  }  # dimension entity_graph__entity__asset__nat_ip
}  # view entity_graph__entity__asset__nat_ip

view: entity_graph__entity__asset__software__permissions {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.asset.software.permissions.description"
    view_label: "Entity"
    description: "Description of the permission (e.g. 'Ability to update detect rules')."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.software.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__entity__asset__software__permissions

view: entity_graph__entity__asset__software {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.software.name"
    view_label: "Entity"
    description: "The name of the software."
  }  # dimension name

  dimension: permissions {
    hidden: yes
  }  # dimension permissions

  dimension: version {
    type: string
    sql: ${TABLE}.version ;;
    group_label: "entity"
    label: "entity.asset.software.version"
    view_label: "Entity"
    description: "The version of the software."
  }  # dimension version

}  # view entity_graph__entity__asset__software

view: entity_graph__entity__asset__vulnerabilities__about__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.asset.vulnerabilities.about.labels.key [D]"
    label: "entity.asset.vulnerabilities.about.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.asset.vulnerabilities.about.labels.value [D]"
    label: "entity.asset.vulnerabilities.about.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__asset__vulnerabilities__about__labels

view: entity_graph__entity__asset__vulnerabilities {
  dimension: about {
    hidden: yes
  }  # dimension about

  dimension: about__labels {
    hidden: yes
  }  # dimension about__labels

  dimension: about__namespace {
    type: string
    sql: ${TABLE}.about.namespace ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.about.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension about__namespace

  dimension: cve_description {
    type: string
    sql: ${TABLE}.cve_description ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cve_description"
    view_label: "Entity"
    description: "Common Vulnerabilities and Exposures Description. <a href=\"https://cve.mitre.org/about/faqs.html#what_is_cve_record\">https://cve.mitre.org/about/faqs.html#what_is_cve_record</a>"
  }  # dimension cve_description

  dimension: cve_id {
    type: string
    sql: ${TABLE}.cve_id ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cve_id"
    view_label: "Entity"
    description: "Common Vulnerabilities and Exposures Id.<a href=\"https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures\">https://en.wikipedia.org/wiki/Common_Vulnerabilities_and_Exposures</a> <a href=\"https://cve.mitre.org/about/faqs.html#what_is_cve_id\">https://cve.mitre.org/about/faqs.html#what_is_cve_id</a>"
  }  # dimension cve_id

  dimension: cvss_base_score {
    type: number
    sql: ${TABLE}.cvss_base_score ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_base_score"
    view_label: "Entity"
    description: "CVSS Base Score in the range of 0.0 to 10.0. Useful for sorting."
  }  # dimension cvss_base_score

  dimension: cvss_vector {
    type: string
    sql: ${TABLE}.cvss_vector ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_vector"
    view_label: "Entity"
    description: "Vector of CVSS properties (e.g. \"AV:L/AC:H/Au:N/C:N/I:P/A:C\") Can be linked to via:<a href=\"https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator?vector=VALUE\"> https://nvd.nist.gov/vuln-metrics/cvss/v2-calculator?vector=VALUE</a>"
  }  # dimension cvss_vector

  dimension: cvss_version {
    type: string
    sql: ${TABLE}.cvss_version ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.cvss_version"
    view_label: "Entity"
    description: "Version of CVSS Vector/Score."
  }  # dimension cvss_version

  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.description"
    view_label: "Entity"
    description: "Description of the vulnerability."
  }  # dimension description

  dimension_group: entity__asset__vulnerabilities__first_found {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.first_found.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.first_found.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.first_found"
    view_label: "Entity"
    description: "Products that maintain a history of vuln scans should populate first_found with the time that a scan first detected the vulnerability on this asset."
  }  # dimension entity__asset__vulnerabilities__first_found

  dimension_group: entity__asset__vulnerabilities__last_found {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.last_found.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.last_found.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.last_found"
    view_label: "Entity"
    description: "Products that maintain a history of vuln scans should populate last_found with the time that a scan last detected the vulnerability on this asset."
  }  # dimension entity__asset__vulnerabilities__last_found

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.name"
    view_label: "Entity"
    description: "Name of the vulnerability (e.g. \"Unsupported OS Version detected\")."
  }  # dimension name

  dimension_group: entity__asset__vulnerabilities__scan_end_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.scan_end_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.scan_end_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.scan_end_time"
    view_label: "Entity"
    description: "If the vulnerability was discovered during an asset scan, then this field should be populated with the time the scan ended. This field can be left unset if the end time is not available or not applicable."
  }  # dimension entity__asset__vulnerabilities__scan_end_time

  dimension_group: entity__asset__vulnerabilities__scan_start_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.scan_start_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.scan_start_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.scan_start_time"
    view_label: "Entity"
    description: "If the vulnerability was discovered during an asset scan, then this field should be populated with the time the scan started. This field can be left unset if the start time is not available or not applicable."
  }  # dimension entity__asset__vulnerabilities__scan_start_time

  dimension: severity {
    type: number
    sql: ${TABLE}.severity ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity"
    view_label: "Entity"
    description: "The severity of the vulnerability."
  }  # dimension severity

  dimension: severity_enum_name {
    type: string
    suggestions: ["CRITICAL", "HIGH", "LOW", "MEDIUM", "UNKNOWN_SEVERITY"]
    sql: CASE ${TABLE}.severity WHEN 0 THEN 'UNKNOWN_SEVERITY' WHEN 1 THEN 'LOW' WHEN 2 THEN 'MEDIUM' WHEN 3 THEN 'HIGH' WHEN 4 THEN 'CRITICAL' END ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity_enum_name"
    view_label: "Entity"
    description: "The severity of the vulnerability."
  }  # dimension severity_enum_name

  dimension: severity_details {
    type: string
    sql: ${TABLE}.severity_details ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.severity_details"
    view_label: "Entity"
    description: "Vendor-specific severity"
  }  # dimension severity_details

  dimension: vendor {
    type: string
    sql: ${TABLE}.vendor ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.vendor"
    view_label: "Entity"
    description: "Vendor of scan that discovered vulnerability."
  }  # dimension vendor

  dimension: vendor_knowledge_base_article_id {
    type: string
    sql: ${TABLE}.vendor_knowledge_base_article_id ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.vendor_knowledge_base_article_id"
    view_label: "Entity"
    description: "Vendor specific knowledge base article (e.g. \"KBXXXXXX\" from Microsoft). <a href=\"https://en.wikipedia.org/wiki/Microsoft_Knowledge_Base\">https://en.wikipedia.org/wiki/Microsoft_Knowledge_Base</a> <a href=\"https://access.redhat.com/knowledgebase\">https://access.redhat.com/knowledgebase</a>"
  }  # dimension vendor_knowledge_base_article_id

  dimension: vendor_vulnerability_id {
    type: string
    sql: ${TABLE}.vendor_vulnerability_id ;;
    group_label: "entity"
    label: "entity.asset.vulnerabilities.vendor_vulnerability_id"
    view_label: "Entity"
    description: "Vendor specific vulnerability id (e.g. Microsoft security bulletin id)."
  }  # dimension vendor_vulnerability_id

}  # view entity_graph__entity__asset__vulnerabilities

view: entity_graph__entity__domain__admin__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.admin.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.admin.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__admin__attribute__labels

view: entity_graph__entity__domain__billing__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.billing.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.billing.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__billing__attribute__labels

view: entity_graph__entity__domain__name_server {
  dimension: entity_graph__entity__domain__name_server {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.domain.name_server"
    view_label: "Entity"
    description: "Repeated list of name servers."
  }  # dimension entity_graph__entity__domain__name_server
}  # view entity_graph__entity__domain__name_server

view: entity_graph__entity__domain__registrant__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.registrant.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.registrant.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__registrant__attribute__labels

view: entity_graph__entity__domain__registrant__email_addresses {
  dimension: entity_graph__entity__domain__registrant__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.domain.registrant.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__domain__registrant__email_addresses
}  # view entity_graph__entity__domain__registrant__email_addresses

view: entity_graph__entity__domain__tech__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.domain.tech.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.domain.tech.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__domain__tech__attribute__labels

view: entity_graph__entity__file__names {
  dimension: entity_graph__entity__file__names {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.file.names"
    view_label: "Entity"
    description: "Names fields."
  }  # dimension entity_graph__entity__file__names
}  # view entity_graph__entity__file__names

view: entity_graph__entity__group__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.group.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.group.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__group__attribute__labels

view: entity_graph__entity__group__email_addresses {
  dimension: entity_graph__entity__group__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.group.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the group."
  }  # dimension entity_graph__entity__group__email_addresses
}  # view entity_graph__entity__group__email_addresses

view: entity_graph__entity__ip {
  dimension: entity_graph__entity__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with a network connection."
  }  # dimension entity_graph__entity__ip
}  # view entity_graph__entity__ip

view: entity_graph__entity__ip_geo_artifact {
  dimension: ip {
    type: string
    sql: ${TABLE}.ip ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.ip"
    view_label: "Entity"
    description: "IP address of the artifact."
  }  # dimension ip

  dimension: location {
    hidden: yes
  }  # dimension location

  dimension: location__city {
    type: string
    sql: ${TABLE}.location.city ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.location.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension location__city

  dimension: location__country_or_region {
    type: string
    sql: ${TABLE}.location.country_or_region ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension location__country_or_region

  dimension: location__region_coordinates {
    type: location
    sql_latitude: ${TABLE}.location.region_coordinates.latitude ;;
    sql_longitude: ${TABLE}.location.region_coordinates.longitude ;;
    group_label: "entity"
    group_item_label: "entity.ip_geo_artifact.location.region_coordinates [L]"
    label: "entity.ip_geo_artifact.location.region_coordinates"
    view_label: "Entity"
    description: "Coordinates for the associated region. See <a href=\"https://cloud.google.com/vision/docs/reference/rest/v1/LatLng\">https://cloud.google.com/vision/docs/reference/rest/v1/LatLng</a> for a description of the fields. [L]: This is a location field and can be used in maps."
  }  # dimension location__region_coordinates

  dimension: network {
    hidden: yes
  }  # dimension network

  dimension: network__asn {
    type: string
    sql: ${TABLE}.network.asn ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.network.asn"
    view_label: "Entity"
    description: "Autonomous system number."
  }  # dimension network__asn

  dimension: network__organization_name {
    type: string
    sql: ${TABLE}.network.organization_name ;;
    group_label: "entity"
    label: "entity.ip_geo_artifact.network.organization_name"
    view_label: "Entity"
    description: "Organization name (e.g Google)."
  }  # dimension network__organization_name

}  # view entity_graph__entity__ip_geo_artifact

view: entity_graph__entity__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    group_item_label: "entity.labels.key [D]"
    label: "entity.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    group_item_label: "entity.labels.value [D]"
    label: "entity.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__entity__labels

view: entity_graph__entity__mac {
  dimension: entity_graph__entity__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with a device."
  }  # dimension entity_graph__entity__mac
}  # view entity_graph__entity__mac

view: entity_graph__entity__resource__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.resource.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.resource.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__resource__attribute__labels

view: entity_graph__entity__resource__attribute__permissions {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.resource.attribute.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__entity__resource__attribute__permissions

view: entity_graph__entity__resource_ancestors {
  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "entity"
    label: "entity.resource_ancestors.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension product_object_id

  dimension: resource_subtype {
    type: string
    sql: ${TABLE}.resource_subtype ;;
    group_label: "entity"
    label: "entity.resource_ancestors.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension resource_subtype

  dimension: resource_type {
    type: number
    sql: ${TABLE}.resource_type ;;
    group_label: "entity"
    label: "entity.resource_ancestors.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension resource_type

  dimension: resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "entity"
    label: "entity.resource_ancestors.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension resource_type_enum_name

}  # view entity_graph__entity__resource_ancestors

view: entity_graph__entity__security_result__detection_fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.security_result.detection_fields.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.security_result.detection_fields.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__security_result__detection_fields

view: entity_graph__entity__security_result {
  dimension: action_details {
    type: string
    sql: ${TABLE}.action_details ;;
    group_label: "entity"
    label: "entity.security_result.action_details"
    view_label: "Entity"
    description: "The detail of the action taken as provided by the vendor."
  }  # dimension action_details

  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.security_result.description"
    view_label: "Entity"
    description: "A human readable description (e.g. \"user password was wrong\")"
  }  # dimension description

  dimension: detection_fields {
    hidden: yes
  }  # dimension detection_fields

  dimension: rule_id {
    type: string
    sql: ${TABLE}.rule_id ;;
    group_label: "entity"
    label: "entity.security_result.rule_id"
    view_label: "Entity"
    description: "A vendor-specific ID and name for a rule, varying by observerer type (e.g. \"08123\", \"5d2b44d0-5ef6-40f5-a704-47d61d3babbe\")."
  }  # dimension rule_id

  dimension: rule_name {
    type: string
    sql: ${TABLE}.rule_name ;;
    group_label: "entity"
    label: "entity.security_result.rule_name"
    view_label: "Entity"
    description: "Name of the security rule (e.g. \"BlockInboundToOracle\")."
  }  # dimension rule_name

  dimension: rule_type {
    type: string
    sql: ${TABLE}.rule_type ;;
    group_label: "entity"
    label: "entity.security_result.rule_type"
    view_label: "Entity"
    description: "The type of security rule."
  }  # dimension rule_type

  dimension: severity {
    type: number
    sql: ${TABLE}.severity ;;
    group_label: "entity"
    label: "entity.security_result.severity"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity

  dimension: severity_enum_name {
    type: string
    suggestions: ["CRITICAL", "ERROR", "HIGH", "INFORMATIONAL", "LOW", "MEDIUM", "UNKNOWN_SEVERITY"]
    sql: CASE ${TABLE}.severity WHEN 0 THEN 'UNKNOWN_SEVERITY' WHEN 100 THEN 'INFORMATIONAL' WHEN 150 THEN 'ERROR' WHEN 200 THEN 'LOW' WHEN 300 THEN 'MEDIUM' WHEN 400 THEN 'HIGH' WHEN 500 THEN 'CRITICAL' END ;;
    group_label: "entity"
    label: "entity.security_result.severity_enum_name"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity_enum_name

  dimension: summary {
    type: string
    sql: ${TABLE}.summary ;;
    group_label: "entity"
    label: "entity.security_result.summary"
    view_label: "Entity"
    description: "A human readable summary (e.g. \"failed login occurred\")"
  }  # dimension summary

}  # view entity_graph__entity__security_result

view: entity_graph__entity__user__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.user.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.user.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__user__attribute__labels

view: entity_graph__entity__user__attribute__permissions {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.description"
    view_label: "Entity"
    description: "Description of the permission (e.g. 'Ability to update detect rules')."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.attribute.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__entity__user__attribute__permissions

view: entity_graph__entity__user__attribute__roles {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.description"
    view_label: "Entity"
    description: "System role description for user."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.type"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'TYPE_UNSPECIFIED' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    label: "entity.user.attribute.roles.type_enum_name"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type_enum_name

}  # view entity_graph__entity__user__attribute__roles

view: entity_graph__entity__user__department {
  dimension: entity_graph__entity__user__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__entity__user__department
}  # view entity_graph__entity__user__department

view: entity_graph__entity__user__email_addresses {
  dimension: entity_graph__entity__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__user__email_addresses
}  # view entity_graph__entity__user__email_addresses

view: entity_graph__entity__user__group_identifiers {
  dimension: entity_graph__entity__user__group_identifiers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.group_identifiers"
    view_label: "Entity"
    description: "Product object identifiers of the group(s) the user belongs to A vendor-specific identifier to uniquely identify the group(s) the user belongs to (a GUID, LDAP OID, or similar)."
  }  # dimension entity_graph__entity__user__group_identifiers
}  # view entity_graph__entity__user__group_identifiers

view: entity_graph__entity__user__managers__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__entity__user__managers__attribute__labels

view: entity_graph__entity__user__managers__attribute__roles {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.type"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'TYPE_UNSPECIFIED' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "entity"
    label: "entity.user.managers.attribute.roles.type_enum_name"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type_enum_name

}  # view entity_graph__entity__user__managers__attribute__roles

view: entity_graph__entity__user__managers__department {
  dimension: entity_graph__entity__user__managers__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__entity__user__managers__department
}  # view entity_graph__entity__user__managers__department

view: entity_graph__entity__user__managers__email_addresses {
  dimension: entity_graph__entity__user__managers__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__entity__user__managers__email_addresses
}  # view entity_graph__entity__user__managers__email_addresses

view: entity_graph__entity__user__managers__group_identifiers {
  dimension: entity_graph__entity__user__managers__group_identifiers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.group_identifiers"
    view_label: "Entity"
    description: "Product object identifiers of the group(s) the user belongs to A vendor-specific identifier to uniquely identify the group(s) the user belongs to (a GUID, LDAP OID, or similar)."
  }  # dimension entity_graph__entity__user__managers__group_identifiers
}  # view entity_graph__entity__user__managers__group_identifiers

view: entity_graph__entity__user__managers__phone_numbers {
  dimension: entity_graph__entity__user__managers__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.managers.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__entity__user__managers__phone_numbers
}  # view entity_graph__entity__user__managers__phone_numbers

view: entity_graph__entity__user__managers {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__labels {
    hidden: yes
  }  # dimension attribute__labels

  dimension: attribute__roles {
    hidden: yes
  }  # dimension attribute__roles

  dimension: company_name {
    type: string
    sql: ${TABLE}.company_name ;;
    group_label: "entity"
    label: "entity.user.managers.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension company_name

  dimension: department {
    hidden: yes
  }  # dimension department

  dimension: email_addresses {
    hidden: yes
  }  # dimension email_addresses

  dimension: employee_id {
    type: string
    sql: ${TABLE}.employee_id ;;
    group_label: "entity"
    label: "entity.user.managers.employee_id"
    view_label: "Entity"
    description: "Human capital management identifier."
  }  # dimension employee_id

  dimension: first_name {
    type: string
    sql: ${TABLE}.first_name ;;
    group_label: "entity"
    label: "entity.user.managers.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension first_name

  dimension: group_identifiers {
    hidden: yes
  }  # dimension group_identifiers

  dimension: last_name {
    type: string
    sql: ${TABLE}.last_name ;;
    group_label: "entity"
    label: "entity.user.managers.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension last_name

  dimension: personal_address {
    hidden: yes
  }  # dimension personal_address

  dimension: personal_address__city {
    type: string
    sql: ${TABLE}.personal_address.city ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.city"
    view_label: "Entity"
    description: "The city."
  }  # dimension personal_address__city

  dimension: personal_address__country_or_region {
    type: string
    sql: ${TABLE}.personal_address.country_or_region ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension personal_address__country_or_region

  dimension: personal_address__name {
    type: string
    sql: ${TABLE}.personal_address.name ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension personal_address__name

  dimension: personal_address__state {
    type: string
    sql: ${TABLE}.personal_address.state ;;
    group_label: "entity"
    label: "entity.user.managers.personal_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension personal_address__state

  dimension: phone_numbers {
    hidden: yes
  }  # dimension phone_numbers

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "entity"
    label: "entity.user.managers.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension product_object_id

  dimension: title {
    type: string
    sql: ${TABLE}.title ;;
    group_label: "entity"
    label: "entity.user.managers.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension title

  dimension: user_display_name {
    type: string
    sql: ${TABLE}.user_display_name ;;
    group_label: "entity"
    label: "entity.user.managers.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension user_display_name

  dimension: userid {
    type: string
    sql: ${TABLE}.userid ;;
    group_label: "entity"
    label: "entity.user.managers.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension userid

  dimension: windows_sid {
    type: string
    sql: ${TABLE}.windows_sid ;;
    group_label: "entity"
    label: "entity.user.managers.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension windows_sid

}  # view entity_graph__entity__user__managers

view: entity_graph__entity__user__phone_numbers {
  dimension: entity_graph__entity__user__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "entity"
    label: "entity.user.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__entity__user__phone_numbers
}  # view entity_graph__entity__user__phone_numbers

view: entity_graph__entity__user__time_off {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "entity"
    label: "entity.user.time_off.description"
    view_label: "Entity"
    description: "Description of the leave if available (e.g. 'Vacation')."
  }  # dimension description

  dimension_group: entity__user__time_off__interval {
    type: duration
    intervals: [ second, minute, hour ]
    sql_start: TIMESTAMP_MICROS(IFNULL(${TABLE}.interval.start_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.interval.start_time.nanos,0) / 1000) as INT64)) ;;
    sql_end: TIMESTAMP_MICROS(IFNULL(${TABLE}.interval.end_time.seconds,0) * 1000000 + CAST((IFNULL(${TABLE}.interval.end_time.nanos,0) / 1000) as INT64)) ;;
    group_label: "entity"
    label: "entity.user.time_off.interval"
    view_label: "Entity"
    description: "Interval duration of the leave."
  }  # dimension entity__user__time_off__interval

}  # view entity_graph__entity__user__time_off

view: entity_graph__metadata__event_metadata__base_labels__ingestion_kv_labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.ingestion_kv_labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.ingestion_kv_labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__event_metadata__base_labels__ingestion_kv_labels

view: entity_graph__metadata__event_metadata__base_labels__log_types {
  dimension: entity_graph__metadata__event_metadata__base_labels__log_types {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.log_types"
    view_label: "Entity"
    description: "All the LogType labels. (-- We use string to log types to avoid moving LogType proto, which contains customer info, to external. --)"
  }  # dimension entity_graph__metadata__event_metadata__base_labels__log_types
}  # view entity_graph__metadata__event_metadata__base_labels__log_types

view: entity_graph__metadata__event_metadata__base_labels__namespaces {
  dimension: entity_graph__metadata__event_metadata__base_labels__namespaces {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.event_metadata.base_labels.namespaces"
    view_label: "Entity"
    description: "All the namespaces."
  }  # dimension entity_graph__metadata__event_metadata__base_labels__namespaces
}  # view entity_graph__metadata__event_metadata__base_labels__namespaces

view: entity_graph__metadata__source_labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.source_labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.source_labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__source_labels

view: entity_graph__metadata__threat__about__asset__ip {
  dimension: entity_graph__metadata__threat__about__asset__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.asset.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with an asset."
  }  # dimension entity_graph__metadata__threat__about__asset__ip
}  # view entity_graph__metadata__threat__about__asset__ip

view: entity_graph__metadata__threat__about__file__names {
  dimension: entity_graph__metadata__threat__about__file__names {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.names"
    view_label: "Entity"
    description: "Names fields."
  }  # dimension entity_graph__metadata__threat__about__file__names
}  # view entity_graph__metadata__threat__about__file__names

view: entity_graph__metadata__threat__about__ip {
  dimension: entity_graph__metadata__threat__about__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with a network connection."
  }  # dimension entity_graph__metadata__threat__about__ip
}  # view entity_graph__metadata__threat__about__ip

view: entity_graph__metadata__threat__about__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.labels.key [D]"
    label: "metadata.threat.about.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.about.labels.value [D]"
    label: "metadata.threat.about.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__metadata__threat__about__labels

view: entity_graph__metadata__threat__about__user__email_addresses {
  dimension: entity_graph__metadata__threat__about__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.about.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__metadata__threat__about__user__email_addresses
}  # view entity_graph__metadata__threat__about__user__email_addresses

view: entity_graph__metadata__threat__action {
  dimension: entity_graph__metadata__threat__action {
    type: number
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.action"
    view_label: "Entity"
    description: "Actions taken for this event."
  }  # dimension entity_graph__metadata__threat__action
}  # view entity_graph__metadata__threat__action

view: entity_graph__metadata__threat__action_enum_name {
  dimension: entity_graph__metadata__threat__action_enum_name {
    type: string
    suggestions: ["ALLOW", "ALLOW_WITH_MODIFICATION", "BLOCK", "CHALLENGE", "FAIL", "QUARANTINE", "UNKNOWN_ACTION"]
    sql: CASE ${TABLE} WHEN 0 THEN 'UNKNOWN_ACTION' WHEN 1 THEN 'ALLOW' WHEN 2 THEN 'BLOCK' WHEN 3 THEN 'ALLOW_WITH_MODIFICATION' WHEN 4 THEN 'QUARANTINE' WHEN 5 THEN 'FAIL' WHEN 6 THEN 'CHALLENGE' END ;;
    group_label: "metadata"
    label: "metadata.threat.action_enum_name"
    view_label: "Entity"
    description: "Actions taken for this event."
  }  # dimension entity_graph__metadata__threat__action_enum_name
}  # view entity_graph__metadata__threat__action_enum_name

view: entity_graph__metadata__threat__associations {
  dimension: id {
    type: string
    sql: ${TABLE}.id ;;
    group_label: "metadata"
    label: "metadata.threat.associations.id"
    view_label: "Entity"
    description: "Unique association id generated by mandiant."
  }  # dimension id

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "metadata"
    label: "metadata.threat.associations.name"
    view_label: "Entity"
    description: "Name of the threat actor/malware."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "metadata"
    label: "metadata.threat.associations.type"
    view_label: "Entity"
    description: "Signifies the type of association."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ASSOCIATION_TYPE_UNSPECIFIED", "MALWARE", "THREAT_ACTOR"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'ASSOCIATION_TYPE_UNSPECIFIED' WHEN 1 THEN 'THREAT_ACTOR' WHEN 2 THEN 'MALWARE' END ;;
    group_label: "metadata"
    label: "metadata.threat.associations.type_enum_name"
    view_label: "Entity"
    description: "Signifies the type of association."
  }  # dimension type_enum_name

}  # view entity_graph__metadata__threat__associations

view: entity_graph__metadata__threat__campaigns {
  dimension: entity_graph__metadata__threat__campaigns {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.campaigns"
    view_label: "Entity"
    description: "Campaigns using this IOC threat."
  }  # dimension entity_graph__metadata__threat__campaigns
}  # view entity_graph__metadata__threat__campaigns

view: entity_graph__metadata__threat__category {
  dimension: entity_graph__metadata__threat__category {
    type: number
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.category"
    view_label: "Entity"
    description: "The security category."
  }  # dimension entity_graph__metadata__threat__category
}  # view entity_graph__metadata__threat__category

view: entity_graph__metadata__threat__category_enum_name {
  dimension: entity_graph__metadata__threat__category_enum_name {
    type: string
    suggestions: ["ACL_VIOLATION", "AUTH_VIOLATION", "DATA_AT_REST", "DATA_DESTRUCTION", "DATA_EXFILTRATION", "EXPLOIT", "MAIL_PHISHING", "MAIL_SPAM", "MAIL_SPOOFING", "NETWORK_CATEGORIZED_CONTENT", "NETWORK_COMMAND_AND_CONTROL", "NETWORK_DENIAL_OF_SERVICE", "NETWORK_MALICIOUS", "NETWORK_RECON", "NETWORK_SUSPICIOUS", "PHISHING", "POLICY_VIOLATION", "SOCIAL_ENGINEERING", "SOFTWARE_MALICIOUS", "SOFTWARE_PUA", "SOFTWARE_SUSPICIOUS", "TOR_EXIT_NODE", "UNKNOWN_CATEGORY"]
    sql: CASE ${TABLE} WHEN 0 THEN 'UNKNOWN_CATEGORY' WHEN 10000 THEN 'SOFTWARE_MALICIOUS' WHEN 10100 THEN 'SOFTWARE_SUSPICIOUS' WHEN 10200 THEN 'SOFTWARE_PUA' WHEN 20000 THEN 'NETWORK_MALICIOUS' WHEN 20100 THEN 'NETWORK_SUSPICIOUS' WHEN 20200 THEN 'NETWORK_CATEGORIZED_CONTENT' WHEN 20300 THEN 'NETWORK_DENIAL_OF_SERVICE' WHEN 20400 THEN 'NETWORK_RECON' WHEN 20500 THEN 'NETWORK_COMMAND_AND_CONTROL' WHEN 30000 THEN 'ACL_VIOLATION' WHEN 40000 THEN 'AUTH_VIOLATION' WHEN 50000 THEN 'EXPLOIT' WHEN 60000 THEN 'DATA_EXFILTRATION' WHEN 60100 THEN 'DATA_AT_REST' WHEN 60200 THEN 'DATA_DESTRUCTION' WHEN 60300 THEN 'TOR_EXIT_NODE' WHEN 70000 THEN 'MAIL_SPAM' WHEN 70100 THEN 'MAIL_PHISHING' WHEN 70200 THEN 'MAIL_SPOOFING' WHEN 80000 THEN 'POLICY_VIOLATION' WHEN 90001 THEN 'SOCIAL_ENGINEERING' WHEN 90002 THEN 'PHISHING' END ;;
    group_label: "metadata"
    label: "metadata.threat.category_enum_name"
    view_label: "Entity"
    description: "The security category."
  }  # dimension entity_graph__metadata__threat__category_enum_name
}  # view entity_graph__metadata__threat__category_enum_name

view: entity_graph__metadata__threat__category_details {
  dimension: entity_graph__metadata__threat__category_details {
    type: string
    sql: ${TABLE} ;;
    group_label: "metadata"
    label: "metadata.threat.category_details"
    view_label: "Entity"
    description: "For vendor-specific categories. For web categorization, put type in here such as \"gambling\", \"porn\", etc."
  }  # dimension entity_graph__metadata__threat__category_details
}  # view entity_graph__metadata__threat__category_details

view: entity_graph__metadata__threat__detection_fields {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.threat.detection_fields.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.threat.detection_fields.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__threat__detection_fields

view: entity_graph__metadata__threat__rule_labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "metadata"
    label: "metadata.threat.rule_labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "metadata"
    label: "metadata.threat.rule_labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__metadata__threat__rule_labels

view: entity_graph__metadata__threat {
  dimension: about {
    hidden: yes
  }  # dimension about

  dimension: about__asset {
    hidden: yes
  }  # dimension about__asset

  dimension: about__asset__hostname {
    type: string
    sql: ${TABLE}.about.asset.hostname ;;
    group_label: "metadata"
    label: "metadata.threat.about.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension about__asset__hostname

  dimension: about__asset__ip {
    hidden: yes
  }  # dimension about__asset__ip

  dimension: about__file {
    hidden: yes
  }  # dimension about__file

  dimension: about__file__md5 {
    type: string
    sql: ${TABLE}.about.file.md5 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.md5"
    view_label: "Entity"
    description: "The MD5 hash of the file."
  }  # dimension about__file__md5

  dimension: about__file__names {
    hidden: yes
  }  # dimension about__file__names

  dimension: about__file__sha1 {
    type: string
    sql: ${TABLE}.about.file.sha1 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.sha1"
    view_label: "Entity"
    description: "The SHA1 hash of the file."
  }  # dimension about__file__sha1

  dimension: about__file__sha256 {
    type: string
    sql: ${TABLE}.about.file.sha256 ;;
    group_label: "metadata"
    label: "metadata.threat.about.file.sha256"
    view_label: "Entity"
    description: "The SHA256 hash of the file."
  }  # dimension about__file__sha256

  dimension: about__hostname {
    type: string
    sql: ${TABLE}.about.hostname ;;
    group_label: "metadata"
    label: "metadata.threat.about.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension about__hostname

  dimension: about__ip {
    hidden: yes
  }  # dimension about__ip

  dimension: about__labels {
    hidden: yes
  }  # dimension about__labels

  dimension: about__namespace {
    type: string
    sql: ${TABLE}.about.namespace ;;
    group_label: "metadata"
    label: "metadata.threat.about.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension about__namespace

  dimension: about__resource {
    hidden: yes
  }  # dimension about__resource

  dimension: about__resource__name {
    type: string
    sql: ${TABLE}.about.resource.name ;;
    group_label: "metadata"
    label: "metadata.threat.about.resource.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension about__resource__name

  dimension: about__resource__resource_type {
    type: number
    sql: ${TABLE}.about.resource.resource_type ;;
    group_label: "metadata"
    label: "metadata.threat.about.resource.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension about__resource__resource_type

  dimension: about__resource__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.about.resource.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "metadata"
    label: "metadata.threat.about.resource.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension about__resource__resource_type_enum_name

  dimension: about__url {
    type: string
    sql: ${TABLE}.about.url ;;
    group_label: "metadata"
    label: "metadata.threat.about.url"
    view_label: "Entity"
    description: "The URL."
  }  # dimension about__url

  dimension: about__user {
    hidden: yes
  }  # dimension about__user

  dimension: about__user__email_addresses {
    hidden: yes
  }  # dimension about__user__email_addresses

  dimension: about__user__user_display_name {
    type: string
    sql: ${TABLE}.about.user.user_display_name ;;
    group_label: "metadata"
    label: "metadata.threat.about.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension about__user__user_display_name

  dimension: action {
    hidden: yes
  }  # dimension action

  dimension: action_enum_name {
    hidden: yes
  }  # dimension action_enum_name

  dimension: action_details {
    type: string
    sql: ${TABLE}.action_details ;;
    group_label: "metadata"
    label: "metadata.threat.action_details"
    view_label: "Entity"
    description: "The detail of the action taken as provided by the vendor."
  }  # dimension action_details

  dimension: alert_state {
    type: number
    sql: ${TABLE}.alert_state ;;
    group_label: "metadata"
    label: "metadata.threat.alert_state"
    view_label: "Entity"
    description: "The alerting types of this security result."
  }  # dimension alert_state

  dimension: alert_state_enum_name {
    type: string
    suggestions: ["ALERTING", "NOT_ALERTING", "UNSPECIFIED"]
    sql: CASE ${TABLE}.alert_state WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'NOT_ALERTING' WHEN 2 THEN 'ALERTING' END ;;
    group_label: "metadata"
    label: "metadata.threat.alert_state_enum_name"
    view_label: "Entity"
    description: "The alerting types of this security result."
  }  # dimension alert_state_enum_name

  dimension: associations {
    hidden: yes
  }  # dimension associations

  dimension: campaigns {
    hidden: yes
  }  # dimension campaigns

  dimension: category {
    hidden: yes
  }  # dimension category

  dimension: category_enum_name {
    hidden: yes
  }  # dimension category_enum_name

  dimension: category_details {
    hidden: yes
  }  # dimension category_details

  dimension: confidence {
    type: number
    sql: ${TABLE}.confidence ;;
    group_label: "metadata"
    label: "metadata.threat.confidence"
    view_label: "Entity"
    description: "The confidence level of the result as estimated by the product."
  }  # dimension confidence

  dimension: confidence_enum_name {
    type: string
    suggestions: ["HIGH_CONFIDENCE", "LOW_CONFIDENCE", "MEDIUM_CONFIDENCE", "UNKNOWN_CONFIDENCE"]
    sql: CASE ${TABLE}.confidence WHEN 0 THEN 'UNKNOWN_CONFIDENCE' WHEN 200 THEN 'LOW_CONFIDENCE' WHEN 300 THEN 'MEDIUM_CONFIDENCE' WHEN 400 THEN 'HIGH_CONFIDENCE' END ;;
    group_label: "metadata"
    label: "metadata.threat.confidence_enum_name"
    view_label: "Entity"
    description: "The confidence level of the result as estimated by the product."
  }  # dimension confidence_enum_name

  dimension: confidence_details {
    type: string
    sql: ${TABLE}.confidence_details ;;
    group_label: "metadata"
    label: "metadata.threat.confidence_details"
    view_label: "Entity"
    description: "Additional detail with regards to the confidence of a security event as estimated by the product vendor."
  }  # dimension confidence_details

  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "metadata"
    label: "metadata.threat.description"
    view_label: "Entity"
    description: "A human readable description (e.g. \"user password was wrong\")"
  }  # dimension description

  dimension: detection_fields {
    hidden: yes
  }  # dimension detection_fields

  dimension_group: metadata__threat__first_discovered_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.first_discovered_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.first_discovered_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "metadata"
    label: "metadata.threat.first_discovered_time"
    view_label: "Entity"
    description: "First time the ioc threat was discovered in the provider."
  }  # dimension metadata__threat__first_discovered_time

  dimension: priority {
    type: number
    sql: ${TABLE}.priority ;;
    group_label: "metadata"
    label: "metadata.threat.priority"
    view_label: "Entity"
    description: "The priority of the result."
  }  # dimension priority

  dimension: priority_enum_name {
    type: string
    suggestions: ["HIGH_PRIORITY", "LOW_PRIORITY", "MEDIUM_PRIORITY", "UNKNOWN_PRIORITY"]
    sql: CASE ${TABLE}.priority WHEN 0 THEN 'UNKNOWN_PRIORITY' WHEN 200 THEN 'LOW_PRIORITY' WHEN 300 THEN 'MEDIUM_PRIORITY' WHEN 400 THEN 'HIGH_PRIORITY' END ;;
    group_label: "metadata"
    label: "metadata.threat.priority_enum_name"
    view_label: "Entity"
    description: "The priority of the result."
  }  # dimension priority_enum_name

  dimension: rule_id {
    type: string
    sql: ${TABLE}.rule_id ;;
    group_label: "metadata"
    label: "metadata.threat.rule_id"
    view_label: "Entity"
    description: "A vendor-specific ID and name for a rule, varying by observerer type (e.g. \"08123\", \"5d2b44d0-5ef6-40f5-a704-47d61d3babbe\")."
  }  # dimension rule_id

  dimension: rule_labels {
    hidden: yes
  }  # dimension rule_labels

  dimension: rule_name {
    type: string
    sql: ${TABLE}.rule_name ;;
    group_label: "metadata"
    label: "metadata.threat.rule_name"
    view_label: "Entity"
    description: "Name of the security rule (e.g. \"BlockInboundToOracle\")."
  }  # dimension rule_name

  dimension: rule_type {
    type: string
    sql: ${TABLE}.rule_type ;;
    group_label: "metadata"
    label: "metadata.threat.rule_type"
    view_label: "Entity"
    description: "The type of security rule."
  }  # dimension rule_type

  dimension: severity {
    type: number
    sql: ${TABLE}.severity ;;
    group_label: "metadata"
    label: "metadata.threat.severity"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity

  dimension: severity_enum_name {
    type: string
    suggestions: ["CRITICAL", "ERROR", "HIGH", "INFORMATIONAL", "LOW", "MEDIUM", "UNKNOWN_SEVERITY"]
    sql: CASE ${TABLE}.severity WHEN 0 THEN 'UNKNOWN_SEVERITY' WHEN 100 THEN 'INFORMATIONAL' WHEN 150 THEN 'ERROR' WHEN 200 THEN 'LOW' WHEN 300 THEN 'MEDIUM' WHEN 400 THEN 'HIGH' WHEN 500 THEN 'CRITICAL' END ;;
    group_label: "metadata"
    label: "metadata.threat.severity_enum_name"
    view_label: "Entity"
    description: "The severity of the result."
  }  # dimension severity_enum_name

  dimension: severity_details {
    type: string
    sql: ${TABLE}.severity_details ;;
    group_label: "metadata"
    label: "metadata.threat.severity_details"
    view_label: "Entity"
    description: "Vendor-specific severity."
  }  # dimension severity_details

  dimension: summary {
    type: string
    sql: ${TABLE}.summary ;;
    group_label: "metadata"
    label: "metadata.threat.summary"
    view_label: "Entity"
    description: "A human readable summary (e.g. \"failed login occurred\")"
  }  # dimension summary

  dimension: threat_feed_name {
    type: string
    sql: ${TABLE}.threat_feed_name ;;
    group_label: "metadata"
    label: "metadata.threat.threat_feed_name"
    view_label: "Entity"
    description: "Vendor feed name for a threat indicator feed."
  }  # dimension threat_feed_name

  dimension: threat_id {
    type: string
    sql: ${TABLE}.threat_id ;;
    group_label: "metadata"
    label: "metadata.threat.threat_id"
    view_label: "Entity"
    description: "Vendor-specific ID for a threat."
  }  # dimension threat_id

  dimension: threat_name {
    type: string
    sql: ${TABLE}.threat_name ;;
    group_label: "metadata"
    label: "metadata.threat.threat_name"
    view_label: "Entity"
    description: "A vendor-assigned classification common across multiple customers (e.g. \"W32/File-A\", \"Slammer\")."
  }  # dimension threat_name

  dimension: threat_status {
    type: number
    sql: ${TABLE}.threat_status ;;
    group_label: "metadata"
    label: "metadata.threat.threat_status"
    view_label: "Entity"
    description: "Current status of the threat"
  }  # dimension threat_status

  dimension: threat_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "CLEARED", "FALSE_POSITIVE", "THREAT_STATUS_UNSPECIFIED"]
    sql: CASE ${TABLE}.threat_status WHEN 0 THEN 'THREAT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'CLEARED' WHEN 3 THEN 'FALSE_POSITIVE' END ;;
    group_label: "metadata"
    label: "metadata.threat.threat_status_enum_name"
    view_label: "Entity"
    description: "Current status of the threat"
  }  # dimension threat_status_enum_name

  dimension: url_back_to_product {
    type: string
    sql: ${TABLE}.url_back_to_product ;;
    group_label: "metadata"
    label: "metadata.threat.url_back_to_product"
    view_label: "Entity"
    description: "URL that takes the user to the source product console for this event."
  }  # dimension url_back_to_product

  dimension: verdict {
    hidden: yes
  }  # dimension verdict

  dimension: verdict__analyst_verdict {
    hidden: yes
  }  # dimension verdict__analyst_verdict

  dimension: verdict__analyst_verdict__confidence_score {
    type: number
    sql: ${TABLE}.verdict.analyst_verdict.confidence_score ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.verdict.analyst_verdict.confidence_score [D]"
    label: "metadata.threat.verdict.analyst_verdict.confidence_score"
    view_label: "Entity"
    description: "Confidence score of the verdict. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension verdict__analyst_verdict__confidence_score

  dimension: verdict__verdict {
    hidden: yes
  }  # dimension verdict__verdict

  dimension: verdict__verdict__benign_count {
    type: number
    sql: ${TABLE}.verdict.verdict.benign_count ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.verdict.verdict.benign_count [D]"
    label: "metadata.threat.verdict.verdict.benign_count"
    view_label: "Entity"
    description: "Count of responses where this IoC was marked benign. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension verdict__verdict__benign_count

  dimension: verdict__verdict__confidence_score {
    type: number
    sql: ${TABLE}.verdict.verdict.confidence_score ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.verdict.verdict.confidence_score [D]"
    label: "metadata.threat.verdict.verdict.confidence_score"
    view_label: "Entity"
    description: "Confidence score of the verdict. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension verdict__verdict__confidence_score

  dimension: verdict__verdict__malicious_count {
    type: number
    sql: ${TABLE}.verdict.verdict.malicious_count ;;
    group_label: "metadata"
    group_item_label: "metadata.threat.verdict.verdict.malicious_count [D]"
    label: "metadata.threat.verdict.verdict.malicious_count"
    view_label: "Entity"
    description: "Count of responses where this IoC was marked malicious. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension verdict__verdict__malicious_count

}  # view entity_graph__metadata__threat

view: entity_graph__relations__entity__asset__hardware {
  dimension: cpu_clock_speed {
    type: number
    sql: ${TABLE}.cpu_clock_speed ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_clock_speed"
    view_label: "Entity"
    description: "Clock speed of the hardware CPU in MHz."
  }  # dimension cpu_clock_speed

  dimension: cpu_model {
    type: string
    sql: ${TABLE}.cpu_model ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_model"
    view_label: "Entity"
    description: "Model description of the hardware CPU (e.g. \"2.8 GHz Quad-Core Intel Core i5\")."
  }  # dimension cpu_model

  dimension: cpu_number_cores {
    type: number
    sql: ${TABLE}.cpu_number_cores ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_number_cores"
    view_label: "Entity"
    description: "Number of CPU cores."
  }  # dimension cpu_number_cores

  dimension: cpu_platform {
    type: string
    sql: ${TABLE}.cpu_platform ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.cpu_platform"
    view_label: "Entity"
    description: "Platform of the hardware CPU (e.g. \"Intel Broadwell\")."
  }  # dimension cpu_platform

  dimension: manufacturer {
    type: string
    sql: ${TABLE}.manufacturer ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.manufacturer"
    view_label: "Entity"
    description: "Hardware manufacturer."
  }  # dimension manufacturer

  dimension: model {
    type: string
    sql: ${TABLE}.model ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.model"
    view_label: "Entity"
    description: "Hardware model."
  }  # dimension model

  dimension: ram {
    type: number
    sql: ${TABLE}.ram ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.ram"
    view_label: "Entity"
    description: "Amount of the hardware ramdom access memory (RAM) in Mb."
  }  # dimension ram

  dimension: serial_number {
    type: string
    sql: ${TABLE}.serial_number ;;
    group_label: "relations"
    label: "relations.entity.asset.hardware.serial_number"
    view_label: "Entity"
    description: "Hardware serial number."
  }  # dimension serial_number

}  # view entity_graph__relations__entity__asset__hardware

view: entity_graph__relations__entity__asset__ip {
  dimension: entity_graph__relations__entity__asset__ip {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.asset.ip"
    view_label: "Entity"
    description: "A list of IP addresses associated with an asset."
  }  # dimension entity_graph__relations__entity__asset__ip
}  # view entity_graph__relations__entity__asset__ip

view: entity_graph__relations__entity__asset__mac {
  dimension: entity_graph__relations__entity__asset__mac {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.asset.mac"
    view_label: "Entity"
    description: "List of MAC addresses associated with an asset."
  }  # dimension entity_graph__relations__entity__asset__mac
}  # view entity_graph__relations__entity__asset__mac

view: entity_graph__relations__entity__asset__software {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.asset.software.name"
    view_label: "Entity"
    description: "The name of the software."
  }  # dimension name

}  # view entity_graph__relations__entity__asset__software

view: entity_graph__relations__entity__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "relations"
    group_item_label: "relations.entity.labels.key [D]"
    label: "relations.entity.labels.key"
    view_label: "Entity"
    description: "The key. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "relations"
    group_item_label: "relations.entity.labels.value [D]"
    label: "relations.entity.labels.value"
    view_label: "Entity"
    description: "The value. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension value

}  # view entity_graph__relations__entity__labels

view: entity_graph__relations__entity__resource__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__relations__entity__resource__attribute__labels

view: entity_graph__relations__entity__resource__attribute__permissions {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.permissions.name"
    view_label: "Entity"
    description: "Name of the permission (e.g. chronicle.analyst.updateRule)."
  }  # dimension name

}  # view entity_graph__relations__entity__resource__attribute__permissions

view: entity_graph__relations__entity__resource__attribute__roles {
  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

}  # view entity_graph__relations__entity__resource__attribute__roles

view: entity_graph__relations__entity__resource_ancestors {
  dimension: attribute {
    hidden: yes
  }  # dimension attribute

  dimension: attribute__cloud {
    hidden: yes
  }  # dimension attribute__cloud

  dimension: attribute__cloud__environment {
    type: number
    sql: ${TABLE}.attribute.cloud.environment ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension attribute__cloud__environment

  dimension: attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension attribute__cloud__environment_enum_name

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension name

  dimension: product_object_id {
    type: string
    sql: ${TABLE}.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension product_object_id

  dimension: resource_subtype {
    type: string
    sql: ${TABLE}.resource_subtype ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension resource_subtype

  dimension: resource_type {
    type: number
    sql: ${TABLE}.resource_type ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension resource_type

  dimension: resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "relations"
    label: "relations.entity.resource_ancestors.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension resource_type_enum_name

}  # view entity_graph__relations__entity__resource_ancestors

view: entity_graph__relations__entity__security_result {
  dimension: rule_id {
    type: string
    sql: ${TABLE}.rule_id ;;
    group_label: "relations"
    label: "relations.entity.security_result.rule_id"
    view_label: "Entity"
    description: "A vendor-specific ID and name for a rule, varying by observerer type (e.g. \"08123\", \"5d2b44d0-5ef6-40f5-a704-47d61d3babbe\")."
  }  # dimension rule_id

  dimension: rule_name {
    type: string
    sql: ${TABLE}.rule_name ;;
    group_label: "relations"
    label: "relations.entity.security_result.rule_name"
    view_label: "Entity"
    description: "Name of the security rule (e.g. \"BlockInboundToOracle\")."
  }  # dimension rule_name

  dimension: rule_type {
    type: string
    sql: ${TABLE}.rule_type ;;
    group_label: "relations"
    label: "relations.entity.security_result.rule_type"
    view_label: "Entity"
    description: "The type of security rule."
  }  # dimension rule_type

}  # view entity_graph__relations__entity__security_result

view: entity_graph__relations__entity__user__attribute__labels {
  dimension: key {
    type: string
    sql: ${TABLE}.key ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.labels.key"
    view_label: "Entity"
    description: "The key."
  }  # dimension key

  dimension: value {
    type: string
    sql: ${TABLE}.value ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.labels.value"
    view_label: "Entity"
    description: "The value."
  }  # dimension value

}  # view entity_graph__relations__entity__user__attribute__labels

view: entity_graph__relations__entity__user__attribute__roles {
  dimension: description {
    type: string
    sql: ${TABLE}.description ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.roles.description"
    view_label: "Entity"
    description: "System role description for user."
  }  # dimension description

  dimension: name {
    type: string
    sql: ${TABLE}.name ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.roles.name"
    view_label: "Entity"
    description: "System role name for user."
  }  # dimension name

  dimension: type {
    type: number
    sql: ${TABLE}.type ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.roles.type"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type

  dimension: type_enum_name {
    type: string
    suggestions: ["ADMINISTRATOR", "SERVICE_ACCOUNT", "TYPE_UNSPECIFIED"]
    sql: CASE ${TABLE}.type WHEN 0 THEN 'TYPE_UNSPECIFIED' WHEN 1 THEN 'ADMINISTRATOR' WHEN 2 THEN 'SERVICE_ACCOUNT' END ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.roles.type_enum_name"
    view_label: "Entity"
    description: "System role type for well known roles."
  }  # dimension type_enum_name

}  # view entity_graph__relations__entity__user__attribute__roles

view: entity_graph__relations__entity__user__department {
  dimension: entity_graph__relations__entity__user__department {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user.department"
    view_label: "Entity"
    description: "User job department"
  }  # dimension entity_graph__relations__entity__user__department
}  # view entity_graph__relations__entity__user__department

view: entity_graph__relations__entity__user__email_addresses {
  dimension: entity_graph__relations__entity__user__email_addresses {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user.email_addresses"
    view_label: "Entity"
    description: "Email addresses of the user."
  }  # dimension entity_graph__relations__entity__user__email_addresses
}  # view entity_graph__relations__entity__user__email_addresses

view: entity_graph__relations__entity__user__phone_numbers {
  dimension: entity_graph__relations__entity__user__phone_numbers {
    type: string
    sql: ${TABLE} ;;
    group_label: "relations"
    label: "relations.entity.user.phone_numbers"
    view_label: "Entity"
    description: "Phone numbers for the user."
  }  # dimension entity_graph__relations__entity__user__phone_numbers
}  # view entity_graph__relations__entity__user__phone_numbers

view: entity_graph__relations {
  dimension: direction {
    type: number
    sql: ${TABLE}.direction ;;
    group_label: "relations"
    label: "relations.direction"
    view_label: "Entity"
    description: "Directionality of relationship between primary entity (a) and the related entity (b)."
  }  # dimension direction

  dimension: direction_enum_name {
    type: string
    suggestions: ["BIDIRECTIONAL", "DIRECTIONALITY_UNSPECIFIED", "UNIDIRECTIONAL"]
    sql: CASE ${TABLE}.direction WHEN 0 THEN 'DIRECTIONALITY_UNSPECIFIED' WHEN 1 THEN 'BIDIRECTIONAL' WHEN 2 THEN 'UNIDIRECTIONAL' END ;;
    group_label: "relations"
    label: "relations.direction_enum_name"
    view_label: "Entity"
    description: "Directionality of relationship between primary entity (a) and the related entity (b)."
  }  # dimension direction_enum_name

  dimension: entity {
    hidden: yes
  }  # dimension entity

  dimension: entity__application {
    type: string
    sql: ${TABLE}.entity.application ;;
    group_label: "relations"
    label: "relations.entity.application"
    view_label: "Entity"
    description: "The name of an application or service. Some SSO solutions only capture the name of a target application such as \"Atlassian\" or \"Chronicle\"."
  }  # dimension entity__application

  dimension: entity__asset {
    hidden: yes
  }  # dimension entity__asset

  dimension: entity__asset__asset_id {
    type: string
    sql: ${TABLE}.entity.asset.asset_id ;;
    group_label: "relations"
    label: "relations.entity.asset.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset__asset_id

  dimension: entity__asset__attribute {
    hidden: yes
  }  # dimension entity__asset__attribute

  dimension_group: relations__entity__asset__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension relations__entity__asset__attribute__creation_time

  dimension: entity__asset__category {
    type: string
    sql: ${TABLE}.entity.asset.category ;;
    group_label: "relations"
    label: "relations.entity.asset.category"
    view_label: "Entity"
    description: "The category of the asset (e.g. \"End User Asset\", \"Workstation\", \"Server\")."
  }  # dimension entity__asset__category

  dimension_group: relations__entity__asset__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    group_item_label: "relations.entity.asset.creation_time [D]"
    label: "relations.entity.asset.creation_time"
    view_label: "Entity"
    description: "Time the asset was created or provisioned. Deprecate: creation_time should be populated in Attribute as generic metadata. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension relations__entity__asset__creation_time

  dimension: entity__asset__deployment_status {
    type: number
    sql: ${TABLE}.entity.asset.deployment_status ;;
    group_label: "relations"
    label: "relations.entity.asset.deployment_status"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status

  dimension: entity__asset__deployment_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DECOMISSIONED", "DEPLOYMENT_STATUS_UNSPECIFIED", "PENDING_DECOMISSION"]
    sql: CASE ${TABLE}.entity.asset.deployment_status WHEN 0 THEN 'DEPLOYMENT_STATUS_UNSPECIFIED' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'PENDING_DECOMISSION' WHEN 3 THEN 'DECOMISSIONED' END ;;
    group_label: "relations"
    label: "relations.entity.asset.deployment_status_enum_name"
    view_label: "Entity"
    description: "The deployment status of the asset for device lifecycle purposes."
  }  # dimension entity__asset__deployment_status_enum_name

  dimension_group: relations__entity__asset__first_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.first_discover_time"
    view_label: "Entity"
    description: "Time the asset was first discovered (by asset management/discoverability software)."
  }  # dimension relations__entity__asset__first_discover_time

  dimension_group: relations__entity__asset__first_seen_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.first_seen_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.first_seen_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.first_seen_time"
    view_label: "Entity"
    description: "The first observed time for an asset. The value is calculated on the basis of the first time the identifier was observed."
  }  # dimension relations__entity__asset__first_seen_time

  dimension: entity__asset__hardware {
    hidden: yes
  }  # dimension entity__asset__hardware

  dimension: entity__asset__hostname {
    type: string
    sql: ${TABLE}.entity.asset.hostname ;;
    group_label: "relations"
    label: "relations.entity.asset.hostname"
    view_label: "Entity"
    description: "Asset hostname or domain name field."
  }  # dimension entity__asset__hostname

  dimension: entity__asset__ip {
    hidden: yes
  }  # dimension entity__asset__ip

  dimension_group: relations__entity__asset__last_discover_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.last_discover_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.last_discover_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.last_discover_time"
    view_label: "Entity"
    description: "Time the asset was last discovered (by asset management/discoverability software)."
  }  # dimension relations__entity__asset__last_discover_time

  dimension: entity__asset__mac {
    hidden: yes
  }  # dimension entity__asset__mac

  dimension: entity__asset__network_domain {
    type: string
    sql: ${TABLE}.entity.asset.network_domain ;;
    group_label: "relations"
    label: "relations.entity.asset.network_domain"
    view_label: "Entity"
    description: "The network domain of the asset (e.g. \"corp.acme.com\")"
  }  # dimension entity__asset__network_domain

  dimension: entity__asset__platform_software {
    hidden: yes
  }  # dimension entity__asset__platform_software

  dimension: entity__asset__platform_software__platform {
    type: number
    sql: ${TABLE}.entity.asset.platform_software.platform ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform

  dimension: entity__asset__platform_software__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.asset.platform_software.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_enum_name"
    view_label: "Entity"
    description: "The platform operating system."
  }  # dimension entity__asset__platform_software__platform_enum_name

  dimension: entity__asset__platform_software__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_patch_level ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_patch_level"
    view_label: "Entity"
    description: "The platform software patch level ( e.g. \"Build 17134.48\", \"SP1\")."
  }  # dimension entity__asset__platform_software__platform_patch_level

  dimension: entity__asset__platform_software__platform_version {
    type: string
    sql: ${TABLE}.entity.asset.platform_software.platform_version ;;
    group_label: "relations"
    label: "relations.entity.asset.platform_software.platform_version"
    view_label: "Entity"
    description: "The platform software version ( e.g. \"Microsoft Windows 1803\")."
  }  # dimension entity__asset__platform_software__platform_version

  dimension: entity__asset__product_object_id {
    type: string
    sql: ${TABLE}.entity.asset.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.asset.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID  or similar)."
  }  # dimension entity__asset__product_object_id

  dimension: entity__asset__software {
    hidden: yes
  }  # dimension entity__asset__software

  dimension_group: relations__entity__asset__system_last_update_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.asset.system_last_update_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.asset.system_last_update_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.asset.system_last_update_time"
    view_label: "Entity"
    description: "Time the asset system or OS was last updated. For all other operations that are not system updates (such as resizing a vm, etc.) use Attribute.last_update_time."
  }  # dimension relations__entity__asset__system_last_update_time

  dimension: entity__asset__type {
    type: number
    sql: ${TABLE}.entity.asset.type ;;
    group_label: "relations"
    label: "relations.entity.asset.type"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type

  dimension: entity__asset__type_enum_name {
    type: string
    suggestions: ["IOT", "LAPTOP", "MOBILE", "NETWORK_ATTACHED_STORAGE", "PRINTER", "ROLE_UNSPECIFIED", "SCANNER", "SERVER", "TAPE_LIBRARY", "WORKSTATION"]
    sql: CASE ${TABLE}.entity.asset.type WHEN 0 THEN 'ROLE_UNSPECIFIED' WHEN 1 THEN 'WORKSTATION' WHEN 2 THEN 'LAPTOP' WHEN 3 THEN 'IOT' WHEN 4 THEN 'NETWORK_ATTACHED_STORAGE' WHEN 5 THEN 'PRINTER' WHEN 6 THEN 'SCANNER' WHEN 7 THEN 'SERVER' WHEN 8 THEN 'TAPE_LIBRARY' WHEN 9 THEN 'MOBILE' END ;;
    group_label: "relations"
    label: "relations.entity.asset.type_enum_name"
    view_label: "Entity"
    description: "The type of the asset (e.g. workstation or laptop or server)."
  }  # dimension entity__asset__type_enum_name

  dimension: entity__asset_id {
    type: string
    sql: ${TABLE}.entity.asset_id ;;
    group_label: "relations"
    label: "relations.entity.asset_id"
    view_label: "Entity"
    description: "The asset ID."
  }  # dimension entity__asset_id

  dimension: entity__group {
    hidden: yes
  }  # dimension entity__group

  dimension: entity__group__group_display_name {
    type: string
    sql: ${TABLE}.entity.group.group_display_name ;;
    group_label: "relations"
    label: "relations.entity.group.group_display_name"
    view_label: "Entity"
    description: "Group display name. e.g. \"Finance\"."
  }  # dimension entity__group__group_display_name

  dimension: entity__group__product_object_id {
    type: string
    sql: ${TABLE}.entity.group.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.group.product_object_id"
    view_label: "Entity"
    description: "Product globally unique user object identifier, such as an LDAP Object Identifier."
  }  # dimension entity__group__product_object_id

  dimension: entity__hostname {
    type: string
    sql: ${TABLE}.entity.hostname ;;
    group_label: "relations"
    label: "relations.entity.hostname"
    view_label: "Entity"
    description: "Client hostname or domain name field. Hostname also doubles as the domain for remote entities."
  }  # dimension entity__hostname

  dimension: entity__labels {
    hidden: yes
  }  # dimension entity__labels

  dimension: entity__location {
    hidden: yes
  }  # dimension entity__location

  dimension: entity__location__country_or_region {
    type: string
    sql: ${TABLE}.entity.location.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.location.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__location__country_or_region

  dimension: entity__location__name {
    type: string
    sql: ${TABLE}.entity.location.name ;;
    group_label: "relations"
    label: "relations.entity.location.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__location__name

  dimension: entity__namespace {
    type: string
    sql: ${TABLE}.entity.namespace ;;
    group_label: "relations"
    label: "relations.entity.namespace"
    view_label: "Entity"
    description: "Namespace which the device belongs to (e.g. AD forest) Uses for this field include Microsoft Windows AD forest, name of subsidiary or acquisition, etc."
  }  # dimension entity__namespace

  dimension: entity__platform {
    type: number
    sql: ${TABLE}.entity.platform ;;
    group_label: "relations"
    label: "relations.entity.platform"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform

  dimension: entity__platform_enum_name {
    type: string
    suggestions: ["ANDROID", "AWS", "AZURE", "CHROME_OS", "GCP", "IOS", "LINUX", "MAC", "UNKNOWN_PLATFORM", "WINDOWS"]
    sql: CASE ${TABLE}.entity.platform WHEN 0 THEN 'UNKNOWN_PLATFORM' WHEN 1 THEN 'WINDOWS' WHEN 2 THEN 'MAC' WHEN 3 THEN 'LINUX' WHEN 4 THEN 'GCP' WHEN 5 THEN 'AWS' WHEN 6 THEN 'AZURE' WHEN 7 THEN 'IOS' WHEN 8 THEN 'ANDROID' WHEN 9 THEN 'CHROME_OS' END ;;
    group_label: "relations"
    label: "relations.entity.platform_enum_name"
    view_label: "Entity"
    description: "Platform."
  }  # dimension entity__platform_enum_name

  dimension: entity__platform_patch_level {
    type: string
    sql: ${TABLE}.entity.platform_patch_level ;;
    group_label: "relations"
    label: "relations.entity.platform_patch_level"
    view_label: "Entity"
    description: "Platform patch level. For example, \"Build 17134.48\""
  }  # dimension entity__platform_patch_level

  dimension: entity__platform_version {
    type: string
    sql: ${TABLE}.entity.platform_version ;;
    group_label: "relations"
    label: "relations.entity.platform_version"
    view_label: "Entity"
    description: "Platform version. For example, \"Microsoft Windows 1803\"."
  }  # dimension entity__platform_version

  dimension: entity__resource {
    hidden: yes
  }  # dimension entity__resource

  dimension: entity__resource__attribute {
    hidden: yes
  }  # dimension entity__resource__attribute

  dimension: entity__resource__attribute__cloud {
    hidden: yes
  }  # dimension entity__resource__attribute__cloud

  dimension: entity__resource__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.resource.attribute.cloud.environment ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment

  dimension: entity__resource__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.resource.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__resource__attribute__cloud__environment_enum_name

  dimension_group: relations__entity__resource__attribute__creation_time {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.resource.attribute.creation_time.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.resource.attribute.creation_time.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.resource.attribute.creation_time"
    view_label: "Entity"
    description: "Time the resource or entity was created or provisioned."
  }  # dimension relations__entity__resource__attribute__creation_time

  dimension: entity__resource__attribute__labels {
    hidden: yes
  }  # dimension entity__resource__attribute__labels

  dimension: entity__resource__attribute__permissions {
    hidden: yes
  }  # dimension entity__resource__attribute__permissions

  dimension: entity__resource__attribute__roles {
    hidden: yes
  }  # dimension entity__resource__attribute__roles

  dimension: entity__resource__id {
    type: string
    sql: ${TABLE}.entity.resource.id ;;
    group_label: "relations"
    group_item_label: "relations.entity.resource.id [D]"
    label: "relations.entity.resource.id"
    view_label: "Entity"
    description: "Deprecated: Use resource.name or resource.product_object_id. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__resource__id

  dimension: entity__resource__name {
    type: string
    sql: ${TABLE}.entity.resource.name ;;
    group_label: "relations"
    label: "relations.entity.resource.name"
    view_label: "Entity"
    description: "The full name of the resource. For example, Google Cloud: //cloudresourcemanager.googleapis.com/projects/wombat-123, and AWS: arn:aws:iam::123456789012:user/johndoe."
  }  # dimension entity__resource__name

  dimension: entity__resource__product_object_id {
    type: string
    sql: ${TABLE}.entity.resource.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.resource.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (a GUID, OID, or similar)"
  }  # dimension entity__resource__product_object_id

  dimension: entity__resource__resource_subtype {
    type: string
    sql: ${TABLE}.entity.resource.resource_subtype ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_subtype"
    view_label: "Entity"
    description: "Resource sub-type (e.g. \"BigQuery\", \"Bigtable\")."
  }  # dimension entity__resource__resource_subtype

  dimension: entity__resource__resource_type {
    type: number
    sql: ${TABLE}.entity.resource.resource_type ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_type"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type

  dimension: entity__resource__resource_type_enum_name {
    type: string
    suggestions: ["ACCESS_POLICY", "BACKEND_SERVICE", "CLOUD_ORGANIZATION", "CLOUD_PROJECT", "CLUSTER", "CONTAINER", "CREDENTIAL", "DATABASE", "DATASET", "DEVICE", "DISK", "FIREWALL_RULE", "FUNCTION", "GATEWAY", "IMAGE", "IP_ADDRESS", "LOAD_BALANCER", "MAILBOX_FOLDER", "MUTEX", "PIPE", "POD", "REPOSITORY", "RUNTIME", "SERVICE_ACCOUNT", "SETTING", "SNAPSHOT", "STORAGE_BUCKET", "STORAGE_OBJECT", "SUBNET", "TABLE", "TASK", "UNSPECIFIED", "VIRTUAL_MACHINE", "VOLUME", "VPC_NETWORK"]
    sql: CASE ${TABLE}.entity.resource.resource_type WHEN 0 THEN 'UNSPECIFIED' WHEN 1 THEN 'MUTEX' WHEN 2 THEN 'TASK' WHEN 3 THEN 'PIPE' WHEN 4 THEN 'DEVICE' WHEN 5 THEN 'FIREWALL_RULE' WHEN 6 THEN 'MAILBOX_FOLDER' WHEN 7 THEN 'VPC_NETWORK' WHEN 8 THEN 'VIRTUAL_MACHINE' WHEN 9 THEN 'STORAGE_BUCKET' WHEN 10 THEN 'STORAGE_OBJECT' WHEN 11 THEN 'DATABASE' WHEN 12 THEN 'TABLE' WHEN 13 THEN 'CLOUD_PROJECT' WHEN 14 THEN 'CLOUD_ORGANIZATION' WHEN 15 THEN 'SERVICE_ACCOUNT' WHEN 16 THEN 'ACCESS_POLICY' WHEN 17 THEN 'CLUSTER' WHEN 18 THEN 'SETTING' WHEN 19 THEN 'DATASET' WHEN 20 THEN 'BACKEND_SERVICE' WHEN 21 THEN 'POD' WHEN 22 THEN 'CONTAINER' WHEN 23 THEN 'FUNCTION' WHEN 24 THEN 'RUNTIME' WHEN 25 THEN 'IP_ADDRESS' WHEN 26 THEN 'DISK' WHEN 27 THEN 'VOLUME' WHEN 28 THEN 'IMAGE' WHEN 29 THEN 'SNAPSHOT' WHEN 30 THEN 'REPOSITORY' WHEN 31 THEN 'CREDENTIAL' WHEN 32 THEN 'LOAD_BALANCER' WHEN 33 THEN 'GATEWAY' WHEN 34 THEN 'SUBNET' END ;;
    group_label: "relations"
    label: "relations.entity.resource.resource_type_enum_name"
    view_label: "Entity"
    description: "Resource type."
  }  # dimension entity__resource__resource_type_enum_name

  dimension: entity__resource_ancestors {
    hidden: yes
  }  # dimension entity__resource_ancestors

  dimension: entity__security_result {
    hidden: yes
  }  # dimension entity__security_result

  dimension: entity__url {
    type: string
    sql: ${TABLE}.entity.url ;;
    group_label: "relations"
    label: "relations.entity.url"
    view_label: "Entity"
    description: "The URL."
  }  # dimension entity__url

  dimension: entity__user {
    hidden: yes
  }  # dimension entity__user

  dimension: entity__user__account_type {
    type: number
    sql: ${TABLE}.entity.user.account_type ;;
    group_label: "relations"
    label: "relations.entity.user.account_type"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type

  dimension: entity__user__account_type_enum_name {
    type: string
    suggestions: ["ACCOUNT_TYPE_UNSPECIFIED", "CLOUD_ACCOUNT_TYPE", "DEFAULT_ACCOUNT_TYPE", "DOMAIN_ACCOUNT_TYPE", "LOCAL_ACCOUNT_TYPE", "SERVICE_ACCOUNT_TYPE"]
    sql: CASE ${TABLE}.entity.user.account_type WHEN 0 THEN 'ACCOUNT_TYPE_UNSPECIFIED' WHEN 1 THEN 'DOMAIN_ACCOUNT_TYPE' WHEN 2 THEN 'LOCAL_ACCOUNT_TYPE' WHEN 3 THEN 'CLOUD_ACCOUNT_TYPE' WHEN 4 THEN 'SERVICE_ACCOUNT_TYPE' WHEN 5 THEN 'DEFAULT_ACCOUNT_TYPE' END ;;
    group_label: "relations"
    label: "relations.entity.user.account_type_enum_name"
    view_label: "Entity"
    description: "Type of user account (service, domain, cloud, etc).  Somewhat aligned to: <a href=\"https://attack.mitre.org/techniques/T1078/\">https://attack.mitre.org/techniques/T1078/</a>"
  }  # dimension entity__user__account_type_enum_name

  dimension: entity__user__attribute {
    hidden: yes
  }  # dimension entity__user__attribute

  dimension: entity__user__attribute__cloud {
    hidden: yes
  }  # dimension entity__user__attribute__cloud

  dimension: entity__user__attribute__cloud__environment {
    type: number
    sql: ${TABLE}.entity.user.attribute.cloud.environment ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.cloud.environment"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment

  dimension: entity__user__attribute__cloud__environment_enum_name {
    type: string
    suggestions: ["AMAZON_WEB_SERVICES", "GOOGLE_CLOUD_PLATFORM", "MICROSOFT_AZURE", "UNSPECIFIED_CLOUD_ENVIRONMENT"]
    sql: CASE ${TABLE}.entity.user.attribute.cloud.environment WHEN 0 THEN 'UNSPECIFIED_CLOUD_ENVIRONMENT' WHEN 1 THEN 'GOOGLE_CLOUD_PLATFORM' WHEN 2 THEN 'AMAZON_WEB_SERVICES' WHEN 3 THEN 'MICROSOFT_AZURE' END ;;
    group_label: "relations"
    label: "relations.entity.user.attribute.cloud.environment_enum_name"
    view_label: "Entity"
    description: "The Cloud environment."
  }  # dimension entity__user__attribute__cloud__environment_enum_name

  dimension: entity__user__attribute__labels {
    hidden: yes
  }  # dimension entity__user__attribute__labels

  dimension: entity__user__attribute__roles {
    hidden: yes
  }  # dimension entity__user__attribute__roles

  dimension: entity__user__company_name {
    type: string
    sql: ${TABLE}.entity.user.company_name ;;
    group_label: "relations"
    label: "relations.entity.user.company_name"
    view_label: "Entity"
    description: "User job company name."
  }  # dimension entity__user__company_name

  dimension: entity__user__department {
    hidden: yes
  }  # dimension entity__user__department

  dimension: entity__user__email_addresses {
    hidden: yes
  }  # dimension entity__user__email_addresses

  dimension: entity__user__first_name {
    type: string
    sql: ${TABLE}.entity.user.first_name ;;
    group_label: "relations"
    label: "relations.entity.user.first_name"
    view_label: "Entity"
    description: "First name of the user (e.g. \"John\")."
  }  # dimension entity__user__first_name

  dimension: entity__user__last_name {
    type: string
    sql: ${TABLE}.entity.user.last_name ;;
    group_label: "relations"
    label: "relations.entity.user.last_name"
    view_label: "Entity"
    description: "Last name of the user (e.g. \"Locke\")."
  }  # dimension entity__user__last_name

  dimension: entity__user__office_address {
    hidden: yes
  }  # dimension entity__user__office_address

  dimension: entity__user__office_address__country_or_region {
    type: string
    sql: ${TABLE}.entity.user.office_address.country_or_region ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.country_or_region"
    view_label: "Entity"
    description: "The country or region."
  }  # dimension entity__user__office_address__country_or_region

  dimension: entity__user__office_address__name {
    type: string
    sql: ${TABLE}.entity.user.office_address.name ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.name"
    view_label: "Entity"
    description: "Custom location name (e.g. building or site name like \"London Office\"). For cloud environments, this is the region (e.g. \"us-west2\")."
  }  # dimension entity__user__office_address__name

  dimension: entity__user__office_address__state {
    type: string
    sql: ${TABLE}.entity.user.office_address.state ;;
    group_label: "relations"
    label: "relations.entity.user.office_address.state"
    view_label: "Entity"
    description: "The state."
  }  # dimension entity__user__office_address__state

  dimension: entity__user__phone_numbers {
    hidden: yes
  }  # dimension entity__user__phone_numbers

  dimension: entity__user__product_object_id {
    type: string
    sql: ${TABLE}.entity.user.product_object_id ;;
    group_label: "relations"
    label: "relations.entity.user.product_object_id"
    view_label: "Entity"
    description: "A vendor-specific identifier to uniquely identify the entity (e.g. a GUID, LDAP, OID, or similar)."
  }  # dimension entity__user__product_object_id

  dimension: entity__user__role_description {
    type: string
    sql: ${TABLE}.entity.user.role_description ;;
    group_label: "relations"
    group_item_label: "relations.entity.user.role_description [D]"
    label: "relations.entity.user.role_description"
    view_label: "Entity"
    description: "System role description for user. Deprecated: use attribute.roles. [D]: This field is deprecated and will be removed in a future release"
  }  # dimension entity__user__role_description

  dimension_group: relations__entity__user__termination_date {
    type: time
    timeframes: [raw, microsecond, second, time, minute, hour, date, week, month, year]
    sql: TIMESTAMP_MICROS(IFNULL(${TABLE}.entity.user.termination_date.seconds, 0) * 1000000 + CAST((IFNULL(${TABLE}.entity.user.termination_date.nanos, 0) / 1000) as INT64)) ;;
    group_label: "relations"
    label: "relations.entity.user.termination_date"
    view_label: "Entity"
    description: "User job employment termination date."
  }  # dimension relations__entity__user__termination_date

  dimension: entity__user__title {
    type: string
    sql: ${TABLE}.entity.user.title ;;
    group_label: "relations"
    label: "relations.entity.user.title"
    view_label: "Entity"
    description: "User job title."
  }  # dimension entity__user__title

  dimension: entity__user__user_authentication_status {
    type: number
    sql: ${TABLE}.entity.user.user_authentication_status ;;
    group_label: "relations"
    label: "relations.entity.user.user_authentication_status"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status

  dimension: entity__user__user_authentication_status_enum_name {
    type: string
    suggestions: ["ACTIVE", "DELETED", "NO_ACTIVE_CREDENTIALS", "SUSPENDED", "UNKNOWN_AUTHENTICATION_STATUS"]
    sql: CASE ${TABLE}.entity.user.user_authentication_status WHEN 0 THEN 'UNKNOWN_AUTHENTICATION_STATUS' WHEN 1 THEN 'ACTIVE' WHEN 2 THEN 'SUSPENDED' WHEN 3 THEN 'NO_ACTIVE_CREDENTIALS' WHEN 4 THEN 'DELETED' END ;;
    group_label: "relations"
    label: "relations.entity.user.user_authentication_status_enum_name"
    view_label: "Entity"
    description: "System authentication status for user."
  }  # dimension entity__user__user_authentication_status_enum_name

  dimension: entity__user__user_display_name {
    type: string
    sql: ${TABLE}.entity.user.user_display_name ;;
    group_label: "relations"
    label: "relations.entity.user.user_display_name"
    view_label: "Entity"
    description: "The display name of the user (e.g. \"John Locke\")."
  }  # dimension entity__user__user_display_name

  dimension: entity__user__userid {
    type: string
    sql: ${TABLE}.entity.user.userid ;;
    group_label: "relations"
    label: "relations.entity.user.userid"
    view_label: "Entity"
    description: "The ID of the user."
  }  # dimension entity__user__userid

  dimension: entity__user__windows_sid {
    type: string
    sql: ${TABLE}.entity.user.windows_sid ;;
    group_label: "relations"
    label: "relations.entity.user.windows_sid"
    view_label: "Entity"
    description: "The Microsoft Windows SID of the user."
  }  # dimension entity__user__windows_sid

  dimension: entity_label {
    type: number
    sql: ${TABLE}.entity_label ;;
    group_label: "relations"
    label: "relations.entity_label"
    view_label: "Entity"
    description: "Label to identify the Noun of the relation."
  }  # dimension entity_label

  dimension: entity_label_enum_name {
    type: string
    suggestions: ["ENTITY_LABEL_UNSPECIFIED", "INTERMEDIARY", "NETWORK", "OBSERVER", "PRINCIPAL", "SECURITY_RESULT", "SRC", "TARGET"]
    sql: CASE ${TABLE}.entity_label WHEN 0 THEN 'ENTITY_LABEL_UNSPECIFIED' WHEN 1 THEN 'PRINCIPAL' WHEN 2 THEN 'TARGET' WHEN 3 THEN 'OBSERVER' WHEN 4 THEN 'SRC' WHEN 5 THEN 'NETWORK' WHEN 6 THEN 'SECURITY_RESULT' WHEN 7 THEN 'INTERMEDIARY' END ;;
    group_label: "relations"
    label: "relations.entity_label_enum_name"
    view_label: "Entity"
    description: "Label to identify the Noun of the relation."
  }  # dimension entity_label_enum_name

  dimension: entity_type {
    type: number
    sql: ${TABLE}.entity_type ;;
    group_label: "relations"
    label: "relations.entity_type"
    view_label: "Entity"
    description: "Type of the related entity (b) in this relationship."
  }  # dimension entity_type

  dimension: entity_type_enum_name {
    type: string
    suggestions: ["ASSET", "DOMAIN_NAME", "FILE", "GROUP", "IP_ADDRESS", "METRIC", "MUTEX", "RESOURCE", "UNKNOWN_ENTITYTYPE", "URL", "USER"]
    sql: CASE ${TABLE}.entity_type WHEN 0 THEN 'UNKNOWN_ENTITYTYPE' WHEN 1 THEN 'ASSET' WHEN 10000 THEN 'USER' WHEN 10001 THEN 'GROUP' WHEN 2 THEN 'RESOURCE' WHEN 3 THEN 'IP_ADDRESS' WHEN 4 THEN 'FILE' WHEN 5 THEN 'DOMAIN_NAME' WHEN 6 THEN 'URL' WHEN 7 THEN 'MUTEX' WHEN 8 THEN 'METRIC' END ;;
    group_label: "relations"
    label: "relations.entity_type_enum_name"
    view_label: "Entity"
    description: "Type of the related entity (b) in this relationship."
  }  # dimension entity_type_enum_name

  dimension: relationship {
    type: number
    sql: ${TABLE}.relationship ;;
    group_label: "relations"
    label: "relations.relationship"
    view_label: "Entity"
    description: "Type of relationship."
  }  # dimension relationship

  dimension: relationship_enum_name {
    type: string
    suggestions: ["ADMINISTERS", "CONTACTS", "DOWNLOADED_FROM", "EXECUTES", "MEMBER", "OWNS", "RELATIONSHIP_UNSPECIFIED"]
    sql: CASE ${TABLE}.relationship WHEN 0 THEN 'RELATIONSHIP_UNSPECIFIED' WHEN 1 THEN 'OWNS' WHEN 2 THEN 'ADMINISTERS' WHEN 3 THEN 'MEMBER' WHEN 4 THEN 'EXECUTES' WHEN 5 THEN 'DOWNLOADED_FROM' WHEN 6 THEN 'CONTACTS' END ;;
    group_label: "relations"
    label: "relations.relationship_enum_name"
    view_label: "Entity"
    description: "Type of relationship."
  }  # dimension relationship_enum_name

  dimension: uid {
    type: string
    sql: ${TABLE}.uid ;;
    group_label: "relations"
    label: "relations.uid"
    view_label: "Entity"
    description: "UID of the relationship."
  }  # dimension uid

}  # view entity_graph__relations

explore: entity_graph {
  label: "Entity Graph"
  
   conditionally_filter: {
    filters: {
      field: entity_graph.time_filter
      value: "last 24 hours"
    }
  }

  fields: [ALL_FIELDS*,]
  sql_always_where: {% condition entity_graph.time_filter %}  _PARTITIONTIME {% endcondition %}
    AND {% condition entity_graph.time_filter %} ${metadata__collected_timestamp_raw} {% endcondition %};;

  join: entity_graph__additional__fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.additional}.fields) as entity_graph__additional__fields ;;
    view_label: "Entity"
  }  # join entity_graph__additional__fields

  join: entity_graph__additional__fields__value__struct_value__fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__additional__fields.value}.struct_value.fields) as entity_graph__additional__fields__value__struct_value__fields ;;
    view_label: "Entity"
  }  # join entity_graph__additional__fields__value__struct_value__fields

  join: entity_graph__entity__asset__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.attribute.labels) as entity_graph__entity__asset__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__attribute__labels

  join: entity_graph__entity__asset__hardware {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.hardware) as entity_graph__entity__asset__hardware ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__hardware

  join: entity_graph__entity__asset__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.ip) as entity_graph__entity__asset__ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__ip

  join: entity_graph__entity__asset__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.labels) as entity_graph__entity__asset__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__labels

  join: entity_graph__entity__asset__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.mac) as entity_graph__entity__asset__mac ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__mac

  join: entity_graph__entity__asset__nat_ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.nat_ip) as entity_graph__entity__asset__nat_ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__nat_ip

  join: entity_graph__entity__asset__software {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.software) as entity_graph__entity__asset__software ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__software

  join: entity_graph__entity__asset__software__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__asset__software.permissions}) as entity_graph__entity__asset__software__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__software__permissions

  join: entity_graph__entity__asset__vulnerabilities {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.asset.vulnerabilities) as entity_graph__entity__asset__vulnerabilities ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__vulnerabilities

  join: entity_graph__entity__asset__vulnerabilities__about__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__asset__vulnerabilities.about}.labels) as entity_graph__entity__asset__vulnerabilities__about__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__asset__vulnerabilities__about__labels

  join: entity_graph__entity__domain__admin__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.admin.attribute.labels) as entity_graph__entity__domain__admin__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__admin__attribute__labels

  join: entity_graph__entity__domain__billing__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.billing.attribute.labels) as entity_graph__entity__domain__billing__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__billing__attribute__labels

  join: entity_graph__entity__domain__name_server {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.name_server) as entity_graph__entity__domain__name_server ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__name_server

  join: entity_graph__entity__domain__registrant__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.registrant.attribute.labels) as entity_graph__entity__domain__registrant__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__registrant__attribute__labels

  join: entity_graph__entity__domain__registrant__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.registrant.email_addresses) as entity_graph__entity__domain__registrant__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__registrant__email_addresses

  join: entity_graph__entity__domain__tech__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.domain.tech.attribute.labels) as entity_graph__entity__domain__tech__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__domain__tech__attribute__labels

  join: entity_graph__entity__file__names {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.file.names) as entity_graph__entity__file__names ;;
    view_label: "Entity"
  }  # join entity_graph__entity__file__names

  join: entity_graph__entity__group__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.group.attribute.labels) as entity_graph__entity__group__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__group__attribute__labels

  join: entity_graph__entity__group__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.group.email_addresses) as entity_graph__entity__group__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__group__email_addresses

  join: entity_graph__entity__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.ip) as entity_graph__entity__ip ;;
    view_label: "Entity"
  }  # join entity_graph__entity__ip

  join: entity_graph__entity__ip_geo_artifact {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.ip_geo_artifact) as entity_graph__entity__ip_geo_artifact ;;
    view_label: "Entity"
  }  # join entity_graph__entity__ip_geo_artifact

  join: entity_graph__entity__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.labels) as entity_graph__entity__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__labels

  join: entity_graph__entity__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.mac) as entity_graph__entity__mac ;;
    view_label: "Entity"
  }  # join entity_graph__entity__mac

  join: entity_graph__entity__resource__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.resource.attribute.labels) as entity_graph__entity__resource__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__resource__attribute__labels

  join: entity_graph__entity__resource__attribute__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.resource.attribute.permissions) as entity_graph__entity__resource__attribute__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__entity__resource__attribute__permissions

  join: entity_graph__entity__resource_ancestors {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.resource_ancestors) as entity_graph__entity__resource_ancestors ;;
    view_label: "Entity"
  }  # join entity_graph__entity__resource_ancestors

  join: entity_graph__entity__security_result {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.security_result) as entity_graph__entity__security_result ;;
    view_label: "Entity"
  }  # join entity_graph__entity__security_result

  join: entity_graph__entity__security_result__detection_fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__security_result.detection_fields}) as entity_graph__entity__security_result__detection_fields ;;
    view_label: "Entity"
  }  # join entity_graph__entity__security_result__detection_fields

  join: entity_graph__entity__user__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.labels) as entity_graph__entity__user__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__labels

  join: entity_graph__entity__user__attribute__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.permissions) as entity_graph__entity__user__attribute__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__permissions

  join: entity_graph__entity__user__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.attribute.roles) as entity_graph__entity__user__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__attribute__roles

  join: entity_graph__entity__user__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.department) as entity_graph__entity__user__department ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__department

  join: entity_graph__entity__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.email_addresses) as entity_graph__entity__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__email_addresses

  join: entity_graph__entity__user__group_identifiers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.group_identifiers) as entity_graph__entity__user__group_identifiers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__group_identifiers

  join: entity_graph__entity__user__managers {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.managers) as entity_graph__entity__user__managers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers

  join: entity_graph__entity__user__managers__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.attribute}.labels) as entity_graph__entity__user__managers__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__attribute__labels

  join: entity_graph__entity__user__managers__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.attribute}.roles) as entity_graph__entity__user__managers__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__attribute__roles

  join: entity_graph__entity__user__managers__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.department}) as entity_graph__entity__user__managers__department ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__department

  join: entity_graph__entity__user__managers__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.email_addresses}) as entity_graph__entity__user__managers__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__email_addresses

  join: entity_graph__entity__user__managers__group_identifiers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.group_identifiers}) as entity_graph__entity__user__managers__group_identifiers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__group_identifiers

  join: entity_graph__entity__user__managers__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__entity__user__managers.phone_numbers}) as entity_graph__entity__user__managers__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__managers__phone_numbers

  join: entity_graph__entity__user__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.phone_numbers) as entity_graph__entity__user__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__phone_numbers

  join: entity_graph__entity__user__time_off {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.entity}.user.time_off) as entity_graph__entity__user__time_off ;;
    view_label: "Entity"
  }  # join entity_graph__entity__user__time_off

  join: entity_graph__metadata__event_metadata__base_labels__ingestion_kv_labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.event_metadata.base_labels.ingestion_kv_labels) as entity_graph__metadata__event_metadata__base_labels__ingestion_kv_labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__event_metadata__base_labels__ingestion_kv_labels

  join: entity_graph__metadata__event_metadata__base_labels__log_types {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.event_metadata.base_labels.log_types) as entity_graph__metadata__event_metadata__base_labels__log_types ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__event_metadata__base_labels__log_types

  join: entity_graph__metadata__event_metadata__base_labels__namespaces {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.event_metadata.base_labels.namespaces) as entity_graph__metadata__event_metadata__base_labels__namespaces ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__event_metadata__base_labels__namespaces

  join: entity_graph__metadata__source_labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.source_labels) as entity_graph__metadata__source_labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__source_labels

  join: entity_graph__metadata__threat {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.metadata}.threat) as entity_graph__metadata__threat ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat

  join: entity_graph__metadata__threat__about__asset__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.asset.ip) as entity_graph__metadata__threat__about__asset__ip ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__asset__ip

  join: entity_graph__metadata__threat__about__file__names {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.file.names) as entity_graph__metadata__threat__about__file__names ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__file__names

  join: entity_graph__metadata__threat__about__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.ip) as entity_graph__metadata__threat__about__ip ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__ip

  join: entity_graph__metadata__threat__about__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.labels) as entity_graph__metadata__threat__about__labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__labels

  join: entity_graph__metadata__threat__about__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.about}.user.email_addresses) as entity_graph__metadata__threat__about__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__about__user__email_addresses

  join: entity_graph__metadata__threat__action {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.action}) as entity_graph__metadata__threat__action ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__action

  join: entity_graph__metadata__threat__action_enum_name {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.action}) as entity_graph__metadata__threat__action_enum_name ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__action_enum_name

  join: entity_graph__metadata__threat__associations {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.associations}) as entity_graph__metadata__threat__associations ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__associations

  join: entity_graph__metadata__threat__campaigns {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.campaigns}) as entity_graph__metadata__threat__campaigns ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__campaigns

  join: entity_graph__metadata__threat__category {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category}) as entity_graph__metadata__threat__category ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category

  join: entity_graph__metadata__threat__category_enum_name {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category}) as entity_graph__metadata__threat__category_enum_name ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category_enum_name

  join: entity_graph__metadata__threat__category_details {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.category_details}) as entity_graph__metadata__threat__category_details ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__category_details

  join: entity_graph__metadata__threat__detection_fields {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.detection_fields}) as entity_graph__metadata__threat__detection_fields ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__detection_fields

  join: entity_graph__metadata__threat__rule_labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__metadata__threat.rule_labels}) as entity_graph__metadata__threat__rule_labels ;;
    view_label: "Entity"
  }  # join entity_graph__metadata__threat__rule_labels

  join: entity_graph__relations {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph.relations}) as entity_graph__relations ;;
    view_label: "Entity"
  }  # join entity_graph__relations

  join: entity_graph__relations__entity__asset__hardware {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.hardware) as entity_graph__relations__entity__asset__hardware ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__hardware

  join: entity_graph__relations__entity__asset__ip {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.ip) as entity_graph__relations__entity__asset__ip ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__ip

  join: entity_graph__relations__entity__asset__mac {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.mac) as entity_graph__relations__entity__asset__mac ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__mac

  join: entity_graph__relations__entity__asset__software {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.asset.software) as entity_graph__relations__entity__asset__software ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__asset__software

  join: entity_graph__relations__entity__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.labels) as entity_graph__relations__entity__labels ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__labels

  join: entity_graph__relations__entity__resource__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.resource.attribute.labels) as entity_graph__relations__entity__resource__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__resource__attribute__labels

  join: entity_graph__relations__entity__resource__attribute__permissions {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.resource.attribute.permissions) as entity_graph__relations__entity__resource__attribute__permissions ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__resource__attribute__permissions

  join: entity_graph__relations__entity__resource__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.resource.attribute.roles) as entity_graph__relations__entity__resource__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__resource__attribute__roles

  join: entity_graph__relations__entity__resource_ancestors {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.resource_ancestors) as entity_graph__relations__entity__resource_ancestors ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__resource_ancestors

  join: entity_graph__relations__entity__security_result {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.security_result) as entity_graph__relations__entity__security_result ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__security_result

  join: entity_graph__relations__entity__user__attribute__labels {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.attribute.labels) as entity_graph__relations__entity__user__attribute__labels ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__attribute__labels

  join: entity_graph__relations__entity__user__attribute__roles {
    relationship: one_to_many
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.attribute.roles) as entity_graph__relations__entity__user__attribute__roles ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__attribute__roles

  join: entity_graph__relations__entity__user__department {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.department) as entity_graph__relations__entity__user__department ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__department

  join: entity_graph__relations__entity__user__email_addresses {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.email_addresses) as entity_graph__relations__entity__user__email_addresses ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__email_addresses

  join: entity_graph__relations__entity__user__phone_numbers {
    relationship: one_to_one
    sql: LEFT JOIN UNNEST(${entity_graph__relations.entity}.user.phone_numbers) as entity_graph__relations__entity__user__phone_numbers ;;
    view_label: "Entity"
  }  # join entity_graph__relations__entity__user__phone_numbers

}  # explore entity_graph

